{"aId": 1, "code": "public static PDTrueTypeFont loadTTF(PDDocument doc, InputStream input) throws IOException\n    {\n        return new PDTrueTypeFont(doc, input);\n    }", "comment": " Loads a TTF to be embedded into a document.", "issueId": "PDFBOX-2357", "issueStringList": ["PDTrueTypeFont has no method to load font from stream", "The PDTrueTypeFont had formely static method to load a font from a stream.", "Now that method is gone.", "As far as I can see without a reason.", "Probably removed by mistake.", "Could that method be restored?", "The method:", "{code:title=PDTrueTypeFont.java|borderStyle=solid}", "Loads a TTF to be embedded into a document.", "@param doc The PDF document that will hold the embedded font.", "@param file a ttf file.", "@return a PDTrueTypeFont instance.", "@throws IOException If there is an error loading the data.", "public static PDTrueTypeFont loadTTF(PDDocument doc, InputStream is) throws IOException", "{", "return new PDTrueTypeFont(doc, is);", "}", "{code}", "That class is not a public class.", "I know, that's why I deleted my former comment, obviously I wasn't fast enough ;-)", "Yep, it was a mistake, I will add this method back."], "SplitGT": [" Loads a TTF to be embedded into a document."], "issueString": "PDTrueTypeFont has no method to load font from stream\nThe PDTrueTypeFont had formely static method to load a font from a stream. Now that method is gone. As far as I can see without a reason. Probably removed by mistake.\n\nCould that method be restored?\n    The method:\n{code:title=PDTrueTypeFont.java|borderStyle=solid}\n    /**\n     * Loads a TTF to be embedded into a document.\n     *\n     * @param doc The PDF document that will hold the embedded font.\n     * @param file a ttf file.\n     * @return a PDTrueTypeFont instance.\n     * @throws IOException If there is an error loading the data.\n     */\n    public static PDTrueTypeFont loadTTF(PDDocument doc, InputStream is) throws IOException\n    {\n        return new PDTrueTypeFont(doc, is);\n    }\n{code}\nThat class is not a public class.\nI know, that's why I deleted my former comment, obviously I wasn't fast enough ;-)\nYep, it was a mistake, I will add this method back.\n"}
{"aId": 2, "code": "public void addAll(COSDictionary dic)\n    {\n        dic.forEach(this::setItem);\n    }", "comment": " This will add all of the dictionaries keys/values to this dictionary.", "issueId": "PDFBOX-4999", "issueStringList": ["Dangerous COSDictionary.addAll(COSDictionary) method", "The method {{COSDictionary.addAll(COSDictionary)}} creates the impression, by name and by JavaDoc comment,", "{code:java}", "This will add all of the dictionaries keys/values to this dictionary.", "...", "{code}", "that it can be used for exactly that, adding all key/value pairs from the argument dictionary to the current one, replacing old entries for the same keys.", "If one looks at the implementation, though, one is in for a surprise:", "{code:java}", "This will add all of the dictionaries keys/values to this dictionary.", "Only called when adding keys to a trailer that already exists.", "@param dic The dictionaries to get the keys from.", "public void addAll(COSDictionary dic)", "{", "dic.forEach((key, value) ->", "{", "*", "If we're at a second trailer, we have a linearized pdf file, meaning that the first Size entry represents", "all of the objects so we don't need to grab the second.", "if (!COSName.SIZE.equals(key) || !items.containsKey(COSName.SIZE))", "{", "setItem(key, value);", "}", "});", "}", "{code}", "Here existing *Size* entries explicitly are not replaced!", "This appears to be a relic from times when PDFBox parsed PDF documents front to back, ignoring cross reference streams, for improved results with linearized files when merging trailer dictionaries.", "Nowadays this exceptional treatment of *Size* does not make any sense anymore, see [this stack overflow answer|https://stackoverflow.com/a/64502740/1729265].", "Furthermore, this method is used in other contexts than creating trailer unions, even some PDFBox methods use it to create arbitrary dictionary unions:", "{{org.apache.pdfbox.pdmodel.PDDocument.assignAcroFormDefaultResource(PDAcroForm, COSDictionary)}}", "{{org.apache.pdfbox.filter.JPXFilter.decode(InputStream, OutputStream, COSDictionary, int, DecodeOptions)}}", "{{org.apache.pdfbox.examples.interactive.form.FieldTriggers.main(String[])}}", "{{org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.PDImageXObject(PDStream, PDResources)}}", "{{org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.PDInlineImage(COSDictionary, byte[], PDResources)}}", "{{org.apache.pdfbox.pdmodel.graphics.image.PDInlineImageTest.testInlineImage()}}", "{{org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref(long)}}", "(This list is offered by eclipse as callers of that method.", "There may be other, hidden calls.)", "Thus, this exception should be removed after all usages of that method in PDFBox have been analyzed.", "That's an interesting observation, never realized that.", "One call is missing in that list", "{{org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref(long)}}", "{quote}One call is missing in that list{quote}", "Indeed, I've just added it to the list.", "Originally I skipped it because I considered it to be the one case referred to in the method comment _\"Only called when adding keys to a trailer that already exists.", "\"_ But that's wrong, that comment referred to the old, not xref-oriented document loading, not to the current document loading.", "The size value isn't skipped any more when merging COSDictionaries.", "Now, the size value is overwritten when merging the trailer dictionaries of a pdf, but that isn't an issue for two reasons.", "The size value isn't use after merging and the merged value is as wrong/right as the other two ones of the non merged dictionaries.", "[~mkl] Thanks for the report"], "SplitGT": [" This will add all of the dictionaries keys/values to this dictionary."], "issueString": "Dangerous COSDictionary.addAll(COSDictionary) method\nThe method {{COSDictionary.addAll(COSDictionary)}} creates the impression, by name and by JavaDoc comment,\r\n{code:java}\r\n/**\r\n * This will add all of the dictionaries keys/values to this dictionary.\r\n...\r\n{code}\r\nthat it can be used for exactly that, adding all key/value pairs from the argument dictionary to the current one, replacing old entries for the same keys.\r\n If one looks at the implementation, though, one is in for a surprise:\r\n{code:java}\r\n/**\r\n * This will add all of the dictionaries keys/values to this dictionary.\r\n * Only called when adding keys to a trailer that already exists.\r\n *\r\n * @param dic The dictionaries to get the keys from.\r\n */\r\npublic void addAll(COSDictionary dic)\r\n{\r\n    dic.forEach((key, value) ->\r\n    {\r\n        /*\r\n         * If we're at a second trailer, we have a linearized pdf file, meaning that the first Size entry represents\r\n         * all of the objects so we don't need to grab the second.\r\n         */\r\n        if (!COSName.SIZE.equals(key) || !items.containsKey(COSName.SIZE))\r\n        {\r\n            setItem(key, value);\r\n        }\r\n    });\r\n}\r\n{code}\r\nHere existing *Size* entries explicitly are not replaced!\r\n\r\nThis appears to be a relic from times when PDFBox parsed PDF documents front to back, ignoring cross reference streams, for improved results with linearized files when merging trailer dictionaries.\r\n\r\nNowadays this exceptional treatment of *Size* does not make any sense anymore, see [this stack overflow answer|https://stackoverflow.com/a/64502740/1729265].\r\n\r\nFurthermore, this method is used in other contexts than creating trailer unions, even some PDFBox methods use it to create arbitrary dictionary unions:\r\n* {{org.apache.pdfbox.pdmodel.PDDocument.assignAcroFormDefaultResource(PDAcroForm, COSDictionary)}}\r\n* {{org.apache.pdfbox.filter.JPXFilter.decode(InputStream, OutputStream, COSDictionary, int, DecodeOptions)}}\r\n* {{org.apache.pdfbox.examples.interactive.form.FieldTriggers.main(String[])}}\r\n* {{org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.PDImageXObject(PDStream, PDResources)}}\r\n* {{org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.PDInlineImage(COSDictionary, byte[], PDResources)}}\r\n* {{org.apache.pdfbox.pdmodel.graphics.image.PDInlineImageTest.testInlineImage()}}\r\n* {{org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref(long)}}\r\n\r\n(This list is offered by eclipse as callers of that method. There may be other, hidden calls.)\r\n\r\nThus, this exception should be removed after all usages of that method in PDFBox have been analyzed.\nThat's an interesting observation, never realized that. One call is missing in that list\r\n* {{org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref(long)}}\r\n\r\n\n{quote}One call is missing in that list{quote}\r\nIndeed, I've just added it to the list.\r\nOriginally I skipped it because I considered it to be the one case referred to in the method comment _\"Only called when adding keys to a trailer that already exists.\"_ But that's wrong, that comment referred to the old, not xref-oriented document loading, not to the current document loading.\r\n\u00a0\nThe size value isn't skipped any more when merging COSDictionaries. Now, the size value is overwritten when merging the trailer dictionaries of a pdf, but that isn't an issue for two reasons. The size value isn't use after merging and the merged value is as wrong/right as the other two ones of the non merged dictionaries.\r\n\r\n[~mkl] Thanks for the report\n"}
{"aId": 4, "code": "public int getMaxLen()\n    {\n        return getDictionary().getInt(COSName.MAX_LEN);\n    }", "comment": " Returns the maximum number of characters of the text field.", "issueId": "PDFBOX-1782", "issueStringList": ["Add getMaxLength() and setMaxLength() methods to PDTextbox", "Basically, this would be a handy way of getting or setting the (int) value of the MaxLen property, which represents the maximum number of characters a text field can contain (documented in table 229 of PDF 32000-1:2008).", "Also, it would be nice if \"MaxLen\" could be added as a constant to COSName to facilitate this.", "I added a getter/setter for the MaxLen value in revision 1544977", "I merged the changes to the 1.8 branch in revision 1544978"], "SplitGT": [" Returns the maximum number of characters of the text field."], "issueString": "Add getMaxLength() and setMaxLength() methods to PDTextbox\nBasically, this would be a handy way of getting or setting the (int) value of the MaxLen property, which represents the maximum number of characters a text field can contain (documented in table 229 of PDF 32000-1:2008). Also, it would be nice if \"MaxLen\" could be added as a constant to COSName to facilitate this.\nI added a getter/setter for the MaxLen value in revision 1544977\nI merged the changes to the 1.8 branch in revision 1544978\n"}
{"aId": 11, "code": "@Deprecated\n    public boolean shouldOpenInNewWindow()\n    {\n        return action.getBoolean(COSName.NEW_WINDOW, true );\n    }", "comment": " If this flag is false, the destination document will replace the current document in the same window.", "issueId": "PDFBOX-4117", "issueStringList": ["Implement GoToE action-type", "One of the major Action Types is not implemented in any version of PDFBox, and I believe it should be.", "I'm referring to \"Embedded Go-To Actions\" (defined under 12.6.4.4 in PDF 32000-1:2008), which allows a link to open an attached file.", "Currently, such \"GoToE\" actions are interpreted as \"null\" by PDFBox, which is not ideal.", "Added a sample file with a GoToE link on the first page, for testing purposes.", "[~giladd] can you test whatever you want to do with the trunk?", "Is the API what you had in mind?", "It has all except /P and /A of the target directory.", "Wow, thanks a lot for the quick turnaround, Tilman!", "Is it available in any current snapshot I can download and integrate into my project?", "https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/3.0.0-SNAPSHOT/", "Seems to be working great!", "Any chance of implementing it in the older versions as well?", "One thing that might be missing is the option to remove the NewWindow COS-key, so that it defaults to the preference set in the application.", "Here's the description in the ISO:", "{noformat}", "NewWindow \u2013 boolean", "\u2013 (Optional) If true, the destination document should be opened in a new window; if false, the destination document should replace the current document in the same window.", "If this entry is absent, the conforming reader should act according to its preference.", "{noformat}", "Yes this will be added a 2.", "* version.", "I just want to be sure that it is good to use because I wouldn't be able to change the 2.", "* API after release.", "Re the NewWindow, would it help you if I return & set not a boolean, but a Boolean?", "(Not sure if I will really do it, I suspect that it is a bad practice)", "I thought about that.", "The question is whether assigning null to it will have the same effect (in Acrobat) as removing it entirely.", "It can be tested, I'm sure.", "What I mean is that the parameter/result would be a (boxed) Boolean.", "If that is null in the setter, I would remove the item.", "In the getter, I would return null if the entry is missing.", "Ah, I see.", "Sounds good to me!", "Done; please test the snapshot again and give feedback.", "Note that target directory /P and /A are not yet implemented.", "As expected, Sonar doesn't like it and here's the reason: \"While null is technically a valid Boolean value, that fact, and the distinction between Boolean and boolean is easy to forget.", "So returning null from a Boolean method is likely to cause problems with callers' code.\"", "And yes, a developer who calls {{shouldOpenInNewWindow()}} without looking at the javadoc would get an NPE soon.", "How about using an Enum similar to similar to {{PageMode}}?", "Good idea.", "I'll do that.", "Can the same enum be used for PDActionRemoteGoTo and PDActionLaunch as well?", "The NewWindow key should work the same there.", "Everything looks good to me!", "It's now available for the 2.0.9 snapshot", "https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.9-SNAPSHOT/", "and the missing items have been implemented as well.", "Please test and give any feedback in this issue if it comes up before the 2.0.9 release.", "Will do, and thanks again!"], "SplitGT": [" If this flag is false, the destination document will replace the current document in the same window."], "issueString": "Implement GoToE action-type\nOne of the major Action Types is not implemented in any version of PDFBox, and I believe it should be. I'm referring to \"Embedded Go-To Actions\" (defined under 12.6.4.4 in PDF 32000-1:2008), which allows a link to open an attached file. Currently, such \"GoToE\" actions are interpreted as \"null\" by PDFBox, which is not ideal.\nAdded a sample file with a GoToE link on the first page, for testing purposes.\n[~giladd] can you test whatever you want to do with the trunk? Is the API what you had in mind? It has all except /P and /A of the target directory.\nWow, thanks a lot for the quick turnaround, Tilman!\r\n\r\nIs it available in any current snapshot I can download and integrate into my project?\nhttps://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/3.0.0-SNAPSHOT/\nSeems to be working great! Any chance of implementing it in the older versions as well?\nOne thing that might be missing is the option to remove the NewWindow COS-key, so that it defaults to the preference set in the application.\r\n\r\nHere's the description in the ISO:\r\n{noformat}\r\nNewWindow \u2013 boolean \r\n\u2013 (Optional) If true, the destination document should be opened in a new window; if false, the destination document should replace the current document in the same window. If this entry is absent, the conforming reader should act according to its preference.{noformat}\nYes this will be added a 2.* version. I just want to be sure that it is good to use because I wouldn't be able to change the 2.* API after release.\r\n\r\nRe the NewWindow, would it help you if I return & set not a boolean, but a Boolean? (Not sure if I will really do it, I suspect that it is a bad practice)\nI thought about that. The question is whether assigning null to it will have the same effect (in Acrobat) as removing it entirely. It can be tested, I'm sure.\nWhat I mean is that the parameter/result would be a (boxed) Boolean. If that is null in the setter, I would remove the item. In the getter, I would return null if the entry is missing.\nAh, I see. Sounds good to me!\nDone; please test the snapshot again and give feedback. Note that target directory /P and /A are not yet implemented.\nAs expected, Sonar doesn't like it and here's the reason: \"While null is technically a valid Boolean value, that fact, and the distinction between Boolean and boolean is easy to forget. So returning null from a Boolean method is likely to cause problems with callers' code.\"\r\n\r\nAnd yes, a developer who calls {{shouldOpenInNewWindow()}} without looking at the javadoc would get an NPE soon.\nHow about using an Enum similar to similar to {{PageMode}}?\nGood idea. I'll do that.\nCan the same enum be used for PDActionRemoteGoTo and PDActionLaunch as well? The NewWindow key should work the same there.\nEverything looks good to me!\nIt's now available for the 2.0.9 snapshot\r\nhttps://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.9-SNAPSHOT/\r\nand the missing items have been implemented as well. Please test and give any feedback in this issue if it comes up before the 2.0.9 release.\nWill do, and thanks again!\n"}
{"aId": 20, "code": "@Deprecated\n    public boolean shouldOpenInNewWindow()\n    {\n        return action.getBoolean(COSName.NEW_WINDOW, true);\n    }", "comment": " If this flag is false, the destination document will replace the current document in the same window.", "issueId": "PDFBOX-4117", "issueStringList": ["Implement GoToE action-type", "One of the major Action Types is not implemented in any version of PDFBox, and I believe it should be.", "I'm referring to \"Embedded Go-To Actions\" (defined under 12.6.4.4 in PDF 32000-1:2008), which allows a link to open an attached file.", "Currently, such \"GoToE\" actions are interpreted as \"null\" by PDFBox, which is not ideal.", "Added a sample file with a GoToE link on the first page, for testing purposes.", "[~giladd] can you test whatever you want to do with the trunk?", "Is the API what you had in mind?", "It has all except /P and /A of the target directory.", "Wow, thanks a lot for the quick turnaround, Tilman!", "Is it available in any current snapshot I can download and integrate into my project?", "https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/3.0.0-SNAPSHOT/", "Seems to be working great!", "Any chance of implementing it in the older versions as well?", "One thing that might be missing is the option to remove the NewWindow COS-key, so that it defaults to the preference set in the application.", "Here's the description in the ISO:", "{noformat}", "NewWindow \u2013 boolean", "\u2013 (Optional) If true, the destination document should be opened in a new window; if false, the destination document should replace the current document in the same window.", "If this entry is absent, the conforming reader should act according to its preference.", "{noformat}", "Yes this will be added a 2.", "* version.", "I just want to be sure that it is good to use because I wouldn't be able to change the 2.", "* API after release.", "Re the NewWindow, would it help you if I return & set not a boolean, but a Boolean?", "(Not sure if I will really do it, I suspect that it is a bad practice)", "I thought about that.", "The question is whether assigning null to it will have the same effect (in Acrobat) as removing it entirely.", "It can be tested, I'm sure.", "What I mean is that the parameter/result would be a (boxed) Boolean.", "If that is null in the setter, I would remove the item.", "In the getter, I would return null if the entry is missing.", "Ah, I see.", "Sounds good to me!", "Done; please test the snapshot again and give feedback.", "Note that target directory /P and /A are not yet implemented.", "As expected, Sonar doesn't like it and here's the reason: \"While null is technically a valid Boolean value, that fact, and the distinction between Boolean and boolean is easy to forget.", "So returning null from a Boolean method is likely to cause problems with callers' code.\"", "And yes, a developer who calls {{shouldOpenInNewWindow()}} without looking at the javadoc would get an NPE soon.", "How about using an Enum similar to similar to {{PageMode}}?", "Good idea.", "I'll do that.", "Can the same enum be used for PDActionRemoteGoTo and PDActionLaunch as well?", "The NewWindow key should work the same there.", "Everything looks good to me!", "It's now available for the 2.0.9 snapshot", "https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.9-SNAPSHOT/", "and the missing items have been implemented as well.", "Please test and give any feedback in this issue if it comes up before the 2.0.9 release.", "Will do, and thanks again!"], "SplitGT": [" If this flag is false, the destination document will replace the current document in the same window."], "issueString": "Implement GoToE action-type\nOne of the major Action Types is not implemented in any version of PDFBox, and I believe it should be. I'm referring to \"Embedded Go-To Actions\" (defined under 12.6.4.4 in PDF 32000-1:2008), which allows a link to open an attached file. Currently, such \"GoToE\" actions are interpreted as \"null\" by PDFBox, which is not ideal.\nAdded a sample file with a GoToE link on the first page, for testing purposes.\n[~giladd] can you test whatever you want to do with the trunk? Is the API what you had in mind? It has all except /P and /A of the target directory.\nWow, thanks a lot for the quick turnaround, Tilman!\r\n\r\nIs it available in any current snapshot I can download and integrate into my project?\nhttps://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/3.0.0-SNAPSHOT/\nSeems to be working great! Any chance of implementing it in the older versions as well?\nOne thing that might be missing is the option to remove the NewWindow COS-key, so that it defaults to the preference set in the application.\r\n\r\nHere's the description in the ISO:\r\n{noformat}\r\nNewWindow \u2013 boolean \r\n\u2013 (Optional) If true, the destination document should be opened in a new window; if false, the destination document should replace the current document in the same window. If this entry is absent, the conforming reader should act according to its preference.{noformat}\nYes this will be added a 2.* version. I just want to be sure that it is good to use because I wouldn't be able to change the 2.* API after release.\r\n\r\nRe the NewWindow, would it help you if I return & set not a boolean, but a Boolean? (Not sure if I will really do it, I suspect that it is a bad practice)\nI thought about that. The question is whether assigning null to it will have the same effect (in Acrobat) as removing it entirely. It can be tested, I'm sure.\nWhat I mean is that the parameter/result would be a (boxed) Boolean. If that is null in the setter, I would remove the item. In the getter, I would return null if the entry is missing.\nAh, I see. Sounds good to me!\nDone; please test the snapshot again and give feedback. Note that target directory /P and /A are not yet implemented.\nAs expected, Sonar doesn't like it and here's the reason: \"While null is technically a valid Boolean value, that fact, and the distinction between Boolean and boolean is easy to forget. So returning null from a Boolean method is likely to cause problems with callers' code.\"\r\n\r\nAnd yes, a developer who calls {{shouldOpenInNewWindow()}} without looking at the javadoc would get an NPE soon.\nHow about using an Enum similar to similar to {{PageMode}}?\nGood idea. I'll do that.\nCan the same enum be used for PDActionRemoteGoTo and PDActionLaunch as well? The NewWindow key should work the same there.\nEverything looks good to me!\nIt's now available for the 2.0.9 snapshot\r\nhttps://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.9-SNAPSHOT/\r\nand the missing items have been implemented as well. Please test and give any feedback in this issue if it comes up before the 2.0.9 release.\nWill do, and thanks again!\n"}
{"aId": 26, "code": "protected void checkPages(COSDictionary root)\n    {\n        if (trailerWasRebuild && root != null)\n        {\n            // check if all page objects are dereferenced\n            COSBase pages = root.getDictionaryObject(COSName.PAGES);\n            if (pages != null && pages instanceof COSDictionary)\n            {\n                checkPagesDictionary((COSDictionary) pages);\n            }\n        }\n    }", "comment": " Those which can't be dereferenced are removed.", "issueId": "PDFBOX-3950", "issueStringList": ["NPE in PageIterator.enqueueKids", "{code}", "Exception in thread \"main\" java.lang.NullPointerException", "at java.util.ArrayDeque.addLast(ArrayDeque.java:244)", "at java.util.ArrayDeque.add(ArrayDeque.java:418)", "at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.enqueueKids(PDPageTree.java:178)", "at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.enqueueKids(PDPageTree.java:173)", "at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.<init>(PDPageTree.java:159)", "at org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.<init>(PDPageTree.java:153)", "at org.apache.pdfbox.pdmodel.PDPageTree.iterator(PDPageTree.java:123)", "at org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:282)", "{code}", "This worked in 2.0.7.", "There are about 200 occurences of this exception in the tests by Tim.", "This issue is similar as PDFBOX-3950.", "But instead of empty page content streams the pages itself are missing.", "I'm thinking about removing null-pages after rebuild the trailer to avoid this specific NPE", "I've added a checker for the pages dictionary.", "Those entries which are not dereferenced will be removed.", "This avoids exception like the attached one.", "But there may be some other not dereferenced objects which may lead to other exceptions, e.g.", "the attached pdf can be opened now, but throws an exception if one tries to render page 4", "Very good.", "Are you also making the change for the trunk?", "[~tilman] Did you run your test, or did you just like it ;-) ?", "And yes, I'm going to include the change into the trunk as well", "No I didn't, the test files are only for the trunk (although I create a temporary copy shortly before release).", "However I looked at the code and it looked good to me.", "I've refactored my solution for the 2.0 branch and added it to the trunk", "Tests are fine with the trunk.", "I'll retest 2.0 later today.", "2.0 is fine too.", "[~tallison@mitre.org], [~tilman] thanks for the finding and the retest.", "Set to resolved"], "SplitGT": [" Those which can't be dereferenced are removed."], "issueString": "NPE in PageIterator.enqueueKids\n{code}\nException in thread \"main\" java.lang.NullPointerException\n\tat java.util.ArrayDeque.addLast(ArrayDeque.java:244)\n\tat java.util.ArrayDeque.add(ArrayDeque.java:418)\n\tat org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.enqueueKids(PDPageTree.java:178)\n\tat org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.enqueueKids(PDPageTree.java:173)\n\tat org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.<init>(PDPageTree.java:159)\n\tat org.apache.pdfbox.pdmodel.PDPageTree$PageIterator.<init>(PDPageTree.java:153)\n\tat org.apache.pdfbox.pdmodel.PDPageTree.iterator(PDPageTree.java:123)\n\tat org.apache.pdfbox.text.PDFTextStripper.processPages(PDFTextStripper.java:282)\n{code}\nThis worked in 2.0.7. There are about 200 occurences of this exception in the tests by Tim.\nThis issue is similar as PDFBOX-3950. But instead of empty page content streams the pages itself are missing.\nI'm thinking about removing null-pages after rebuild the trailer to avoid this specific NPE\nI've added a checker for the pages dictionary. Those entries which are not dereferenced will be removed. This avoids exception like the attached one. But there may be some other not dereferenced objects which may lead to other exceptions, e.g. the attached pdf can be opened now, but throws an exception if one tries to render page 4\nVery good. Are you also making the change for the trunk?\n[~tilman] Did you run your test, or did you just like it ;-) ? And yes, I'm going to include the change into the trunk as well\nNo I didn't, the test files are only for the trunk (although I create a temporary copy shortly before release). However I looked at the code and it looked good to me.\nI've refactored my solution for the 2.0 branch and added it to the trunk\nTests are fine with the trunk. I'll retest 2.0 later today.\n2.0 is fine too.\n[~tallison@mitre.org], [~tilman] thanks for the finding and the retest. Set to resolved\n"}
{"aId": 29, "code": "public static PDTrueTypeFont loadTTF( PDDocument doc, InputStream stream ) throws IOException\n    { \n        PDTrueTypeFont retval = new PDTrueTypeFont();\n        PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();\n        retval.setFontDescriptor( fd );\n        PDStream fontStream = new PDStream(doc, stream, false );\n        fontStream.getStream().setInt( COSName.LENGTH1, fontStream.getByteArray().length );\n        fontStream.addCompression();\n        fd.setFontFile2( fontStream );\n        // As the stream was close within the PDStream constructor, we have to recreate it\n        stream = fontStream.createInputStream();\n        try\n        {\n            loadDescriptorDictionary(retval, fd, stream); \n        }\n        finally\n        {\n            stream.close();\n        }\n        //only support winansi encoding right now, should really\n        //just use Identity-H with unicode mapping\n        retval.setEncoding( new WinAnsiEncoding() );\n        return retval;\n    }", "comment": " This will load a TTF to be embedded into a document.", "issueId": "PDFBOX-732", "issueStringList": ["Loading TTF font files from the classpath", "Currently (pdfbox 1.1.0 & 1.2.0 snapshot) TTF font files can only be loaded from the file system as PDTrueTypeFont exposes two load methods:", "public static PDTrueTypeFont loadTTF(PDDocument, String)", "public static PDTrueTypeFont loadTTF(PDDocument, File)", "The first wraps the String in a java.io.File object and delegates to the second, so all TTF reading is from the file system.", "It would be useful to be able to read TTF files from the classpath - or indeed from any arbitrary stream.", "Could we have a third method?", ":", "public static PDTrueTypeFont loadTTF(PDDocument, InputStream)", "This would allow TTFs to be loaded like so:", "PDTrueTypeFont.load(myDoc, MyClass.class.getClassLoader().getResourceAsStream(\"myFont.ttf\"));", "For what it's worth here's a patch of what I did (see below).", "One uncertainty I had was about the use of the COSName.LENGTH1 field which only seems to be used currently in PDTrueTypeFont.", "So it may be reasonable or not to push the setting of this attribute into the PDStream constructor.", "Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java", "===================================================================", "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\t(revision 948363)", "+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\t(working copy)", "@@ -114,12 +114,17 @@", "{", "output = stream.createUnfilteredStream();", "}", "+            int bytesInInputStream = 0;", "byte[] buffer = new byte[ 1024 ];", "int amountRead = -1;", "while( (amountRead = str.read(buffer)) != -1 )", "{", "output.write( buffer, 0, amountRead );", "+                bytesInInputStream += amountRead;", "}", "+", "+            // Set the number of bytes read from the input stream", "+            this.stream.setInt( COSName.LENGTH1, bytesInInputStream );", "}", "finally", "{", "Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "===================================================================", "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\t(revision 948363)", "+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\t(working copy)", "@@ -130,7 +130,7 @@", "}", "* This will load a TTF to be embedding into a document.", "+     * This will load a TTF to be embedded into a document.", "@param doc The PDF document that will hold the embedded font.", "@param file A TTF file stream.", "@@ -139,21 +139,32 @@", "public static PDTrueTypeFont loadTTF( PDDocument doc, File file ) throws IOException", "{", "+        return loadTTF( doc, new FileInputStream( file ) );", "+    }", "+", "+    /**", "+     * This will load a TTF to be embedded into a document.", "+     *", "+     * @param doc The PDF document that will hold the embedded font.", "+     * @param stream A TTF input stream.", "+     * @return A PDF TTF.", "+     * @throws IOException If there is an error loading the data.", "+     */", "+    public static PDTrueTypeFont loadTTF( PDDocument doc, InputStream stream ) throws IOException", "+    {", "PDTrueTypeFont retval = new PDTrueTypeFont();", "PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();", "PDStream fontStream = new PDStream(doc, new FileInputStream( file ), false );", "fontStream.getStream().setInt( COSName.LENGTH1, (int)file.length() );", "+        PDStream fontStream = new PDStream(doc, stream, false );", "fontStream.addCompression();", "fd.setFontFile2( fontStream );", "retval.setFontDescriptor( fd );", "InputStream ttfData = new FileInputStream(file);", "try", "{", "loadDescriptorDictionary(retval, fd, ttfData);", "+            loadDescriptorDictionary(retval, fd, stream);", "}", "finally", "{", "ttfData.close();", "+            stream.close();", "}", "only support winansi encoding right now, should really", "just use Identity-H with unicode mapping", "Adding a patch of the proposed changes.", "I've added the patch with version 955384.", "I've to make some small changes:", "the change in the class PDStream isn't needed", "the stream has to be recreated otherwise an exception would be thrown, because the stream is already closed", "Thanks to Neil for the contribution"], "SplitGT": [" This will load a TTF to be embedded into a document."], "issueString": "Loading TTF font files from the classpath\nCurrently (pdfbox 1.1.0 & 1.2.0 snapshot) TTF font files can only be loaded from the file system as PDTrueTypeFont exposes two load methods:\n    public static PDTrueTypeFont loadTTF(PDDocument, String)\n    public static PDTrueTypeFont loadTTF(PDDocument, File)\nThe first wraps the String in a java.io.File object and delegates to the second, so all TTF reading is from the file system.\n\nIt would be useful to be able to read TTF files from the classpath - or indeed from any arbitrary stream.\nCould we have a third method?:\n    public static PDTrueTypeFont loadTTF(PDDocument, InputStream)\n\nThis would allow TTFs to be loaded like so:\nPDTrueTypeFont.load(myDoc, MyClass.class.getClassLoader().getResourceAsStream(\"myFont.ttf\"));\n\nFor what it's worth here's a patch of what I did (see below).\nOne uncertainty I had was about the use of the COSName.LENGTH1 field which only seems to be used currently in PDTrueTypeFont. So it may be reasonable or not to push the setting of this attribute into the PDStream constructor.\n\n\nIndex: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\n===================================================================\n--- pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\t(revision 948363)\n+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\t(working copy)\n@@ -114,12 +114,17 @@\n             {\n                 output = stream.createUnfilteredStream();\n             }\n+            int bytesInInputStream = 0;\n             byte[] buffer = new byte[ 1024 ];\n             int amountRead = -1;\n             while( (amountRead = str.read(buffer)) != -1 )\n             {\n                 output.write( buffer, 0, amountRead );\n+                bytesInInputStream += amountRead;\n             }\n+            \n+            // Set the number of bytes read from the input stream\n+            this.stream.setInt( COSName.LENGTH1, bytesInInputStream );\n         }\n         finally\n         {\nIndex: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\n===================================================================\n--- pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\t(revision 948363)\n+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\t(working copy)\n@@ -130,7 +130,7 @@\n     }\n \n     /**\n-     * This will load a TTF to be embedding into a document.\n+     * This will load a TTF to be embedded into a document.\n      *\n      * @param doc The PDF document that will hold the embedded font.\n      * @param file A TTF file stream.\n@@ -139,21 +139,32 @@\n      */\n     public static PDTrueTypeFont loadTTF( PDDocument doc, File file ) throws IOException\n     {\n+        return loadTTF( doc, new FileInputStream( file ) );\n+    }\n+\n+    /**\n+     * This will load a TTF to be embedded into a document.\n+     *\n+     * @param doc The PDF document that will hold the embedded font.\n+     * @param stream A TTF input stream.\n+     * @return A PDF TTF.\n+     * @throws IOException If there is an error loading the data.\n+     */\n+    public static PDTrueTypeFont loadTTF( PDDocument doc, InputStream stream ) throws IOException\n+    {\n         PDTrueTypeFont retval = new PDTrueTypeFont();\n         PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();\n-        PDStream fontStream = new PDStream(doc, new FileInputStream( file ), false );\n-        fontStream.getStream().setInt( COSName.LENGTH1, (int)file.length() );\n+        PDStream fontStream = new PDStream(doc, stream, false );\n         fontStream.addCompression();\n         fd.setFontFile2( fontStream );\n         retval.setFontDescriptor( fd );\n-        InputStream ttfData = new FileInputStream(file);\n         try\n         {\n-            loadDescriptorDictionary(retval, fd, ttfData);\n+            loadDescriptorDictionary(retval, fd, stream);\n         }\n         finally\n         {\n-            ttfData.close();\n+            stream.close();\n         }\n         //only support winansi encoding right now, should really\n         //just use Identity-H with unicode mapping\n\n\nAdding a patch of the proposed changes.\nI've added the patch with version 955384. \n\nI've to make some small changes:\n- the change in the class PDStream isn't needed\n- the stream has to be recreated otherwise an exception would be thrown, because the stream is already closed\n\nThanks to Neil for the contribution\n"}
{"aId": 33, "code": "public int getOrder()\n    {\n        return getDictionary().getInt(COSName.ORDER, 1);\n    }", "comment": " Get the order of interpolation between samples. Valid values are 1 and 3, specifying linear and cubic spline interpolation, respectively.", "issueId": "PDFBOX-1870", "issueStringList": ["PDFunctionType0 incorrect", "Type 0 (Sampled) Functions are described in 3.9.1 of the pdf spec and basically, its cheating: there's an n-dimensional grid of values (\"samples\") and the function shall return these values or something in-between.", "PDFunctionType0 has two bugs:", "1) it does not do any interpolation.", "The function interpolate() is called several times, but only adjust values between ranges etc, not to calculate the color between 2^n samples - that part is \"outputValues[i] = (outputValuesPrevious[i] + outputValuesNext[i]) / 2\".", "The spec does not tell much, only that \"Interpolation is used to determine output values from the nearest surrounding values in the sample table\".", "I have done a linear/bilinear interpolation implementation for 1D/2D inputs.", "I did not do an interpolation implementation for 3D and higher, because its unclear whether this is actually used.", "Instead, I return random (!)", "values.", "2) the sample bits are not collected correctly, the current code ignores the leftover bits when a row is done.", "The spec tells us \"Successive values are adjacent in the bit stream; there is no padding at byte boundaries\".", "Luckily, that one is easy to correct, three lines must be moved up.", "Alternatively, one might use the bit-io lib I mention in PDFBOX-615.", "Excellent.", "I've been having some strange behaviour from tint-transform functions in color spaces and was beginning to get suspicious about Type0 (and possibly Type2) functions.", "I should probably add that color spaces are using 3D and 4D functions, so we should take a look at implementing them...", "Ok, I'll see what I can do this evening or tomorrow evening...", "I did already do code (not included) that creates all coordinates for the n-dimensional item from the \"prev\" and \"next\" arrays, so the \"only\" thing left to do is a multilinear interpolation.", "The *Order* entry in the function dictionary gives some additional clues:", "{quote}The order of interpolation between samples.", "Valid values", "shall be 1 and 3, specifying linear and cubic spline interpolation,", "respectively.", "Default value: 1.", "{quote}", "patch that includes interpolation in any dimension.", "Its probably not the fastest method, a better one is here but has the \"wrong\" license:", "https://svn.atlassian.com/svn/public/atlassian/vendor/pdf-renderer/trunk/src/main/java/com/sun/pdfview/function/FunctionType0.java", "Their method is explained here:", "https://web.archive.org/web/20050223195150/http://osl.iu.edu/~tveldhui/papers/MAScThesis/node33.html", "I've added the patch in revision 1563210 as proposed.", "Is someone already working on an optimization or should we close this issue?", "Ahh, I haven't tested this patch yet to see if it's usable with bitmap tint transforms.", "This patch doesn't work for me, I'm getting all zeroes as the output for a CMYK tint transform function.", "Previous code worked though it gave a \"posterized\" image due to the lack of interpolation.", "Oh oh... do you have something that I can use to debug through it?", "I'll try to find something suitable, the file I have only works with my local changes (I'm re-writing all the color space code).", "Ok, I've added a test file, the issue is that the 2nd image down was displaying previously (the blue one) but now is blank.", "The blue image is the \"correct\" one as far as trunk is concerned right now.", "The image is rendered using a CMYK tint transform function.", "I'm working on a major rewrite of color space and imaging code currently, so don't worry about all the other problems this file has.", "I have fixes for all of them.", "EDIT: Also, rendering the file is very slow, I have performance fixes which I'm working on also.", "The before and after images correspond to trunk {{r1563199}}  and {{r1563210}} respectively, so the problem has to be in {{PDFunctionType0.java}}.", "EDIT: you can see the diff at http://git.io/at3nUg", "I've found a less complex test file for you, {{Devicen3.pdf}}.", "Both images are from trunk, before and after the patch was applied.", "Tricky.", "The two functions I'd suspect first (calculation of the index, and interpolation) seem to work like I expect.", "One mystery is that in the PDF file, the samples stream is very long and has lots of different characters, but when read only the first 24 entries are set, the rest is empty.", "Btw two colors (the first two) are correct in the \"after\" rendering.", "They are at position 3 and 12.", "I'll make a test with a different way of reading the stream to see if there's a difference.", "I've found the bug and it was in the original code, it reads only 24 entries instead of 4096.", "I'll post a patch when corrected.", "There's the patch and the rendered sample images.", "John - much thanks for the \"simple\" pdf, that one helped a lot.", "(there were only six function calls)", "Looking good!"], "SplitGT": [" Get the order of interpolation between samples.", "Valid values are 1 and 3, specifying linear and cubic spline interpolation, respectively."], "issueString": "PDFunctionType0 incorrect\nType 0 (Sampled) Functions are described in 3.9.1 of the pdf spec and basically, its cheating: there's an n-dimensional grid of values (\"samples\") and the function shall return these values or something in-between.\n\nPDFunctionType0 has two bugs:\n\n1) it does not do any interpolation. The function interpolate() is called several times, but only adjust values between ranges etc, not to calculate the color between 2^n samples - that part is \"outputValues[i] = (outputValuesPrevious[i] + outputValuesNext[i]) / 2\". The spec does not tell much, only that \"Interpolation is used to determine output values from the nearest surrounding values in the sample table\". I have done a linear/bilinear interpolation implementation for 1D/2D inputs. I did not do an interpolation implementation for 3D and higher, because its unclear whether this is actually used. Instead, I return random (!) values.\n\n2) the sample bits are not collected correctly, the current code ignores the leftover bits when a row is done. The spec tells us \"Successive values are adjacent in the bit stream; there is no padding at byte boundaries\". Luckily, that one is easy to correct, three lines must be moved up. Alternatively, one might use the bit-io lib I mention in PDFBOX-615.\nExcellent. I've been having some strange behaviour from tint-transform functions in color spaces and was beginning to get suspicious about Type0 (and possibly Type2) functions.\nI should probably add that color spaces are using 3D and 4D functions, so we should take a look at implementing them...\nOk, I'll see what I can do this evening or tomorrow evening... I did already do code (not included) that creates all coordinates for the n-dimensional item from the \"prev\" and \"next\" arrays, so the \"only\" thing left to do is a multilinear interpolation.\nThe *Order* entry in the function dictionary gives some additional clues: \n\n{quote}The order of interpolation between samples. Valid values \nshall be 1 and 3, specifying linear and cubic spline interpolation, \nrespectively. Default value: 1. \n{quote}\npatch that includes interpolation in any dimension.\n\nIts probably not the fastest method, a better one is here but has the \"wrong\" license:\nhttps://svn.atlassian.com/svn/public/atlassian/vendor/pdf-renderer/trunk/src/main/java/com/sun/pdfview/function/FunctionType0.java\nTheir method is explained here:\nhttps://web.archive.org/web/20050223195150/http://osl.iu.edu/~tveldhui/papers/MAScThesis/node33.html\nI've added the patch in revision 1563210 as proposed. Is someone already working on an optimization or should we close this issue?\nAhh, I haven't tested this patch yet to see if it's usable with bitmap tint transforms.\nThis patch doesn't work for me, I'm getting all zeroes as the output for a CMYK tint transform function. Previous code worked though it gave a \"posterized\" image due to the lack of interpolation.\nOh oh... do you have something that I can use to debug through it?\nI'll try to find something suitable, the file I have only works with my local changes (I'm re-writing all the color space code).\nOk, I've added a test file, the issue is that the 2nd image down was displaying previously (the blue one) but now is blank. The blue image is the \"correct\" one as far as trunk is concerned right now. The image is rendered using a CMYK tint transform function.\n\nI'm working on a major rewrite of color space and imaging code currently, so don't worry about all the other problems this file has. I have fixes for all of them.\n\nEDIT: Also, rendering the file is very slow, I have performance fixes which I'm working on also.\nThe before and after images correspond to trunk {{r1563199}}  and {{r1563210}} respectively, so the problem has to be in {{PDFunctionType0.java}}.\n\nEDIT: you can see the diff at http://git.io/at3nUg\nI've found a less complex test file for you, {{Devicen3.pdf}}. Both images are from trunk, before and after the patch was applied.\nTricky. The two functions I'd suspect first (calculation of the index, and interpolation) seem to work like I expect. One mystery is that in the PDF file, the samples stream is very long and has lots of different characters, but when read only the first 24 entries are set, the rest is empty.\n\nBtw two colors (the first two) are correct in the \"after\" rendering. They are at position 3 and 12. I'll make a test with a different way of reading the stream to see if there's a difference.\nI've found the bug and it was in the original code, it reads only 24 entries instead of 4096. I'll post a patch when corrected.\nThere's the patch and the rendered sample images. John - much thanks for the \"simple\" pdf, that one helped a lot. (there were only six function calls)\nLooking good!\n"}
{"aId": 34, "code": "public Document getDocument() throws ParserConfigurationException, SAXException, IOException \n    {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setNamespaceAware(true);\n        DocumentBuilder builder = factory.newDocumentBuilder();\n        Document xfaDocument = builder.parse(new ByteArrayInputStream(this.getBytes())); \n        return xfaDocument;\n    }", "comment": " Get the XFA content as W3C document.", "issueId": "PDFBOX-1492", "issueStringList": ["Add basic XFA extraction", "Add a basic XFA extraction capability to PDXFA to support getting the data of dynamic XFA forms.", "Patch to allow the extraction of XFA content as byte[] or W3C document", "I added the patch in revision 1435039 as proposed.", "Thanks for the contribution!"], "SplitGT": [" Get the XFA content as W3C document."], "issueString": "Add basic XFA extraction\nAdd a basic XFA extraction capability to PDXFA to support getting the data of dynamic XFA forms.\nPatch to allow the extraction of XFA content as byte[] or W3C document\nI added the patch in revision 1435039 as proposed.\n\nThanks for the contribution!\n"}
{"aId": 40, "code": "public void setMaxLen(int maxLen)\n    {\n        getDictionary().setInt(COSName.MAX_LEN, maxLen);\n    }", "comment": " Sets the maximum number of characters of the text field.", "issueId": "PDFBOX-1782", "issueStringList": ["Add getMaxLength() and setMaxLength() methods to PDTextbox", "Basically, this would be a handy way of getting or setting the (int) value of the MaxLen property, which represents the maximum number of characters a text field can contain (documented in table 229 of PDF 32000-1:2008).", "Also, it would be nice if \"MaxLen\" could be added as a constant to COSName to facilitate this.", "I added a getter/setter for the MaxLen value in revision 1544977", "I merged the changes to the 1.8 branch in revision 1544978"], "SplitGT": [" Sets the maximum number of characters of the text field."], "issueString": "Add getMaxLength() and setMaxLength() methods to PDTextbox\nBasically, this would be a handy way of getting or setting the (int) value of the MaxLen property, which represents the maximum number of characters a text field can contain (documented in table 229 of PDF 32000-1:2008). Also, it would be nice if \"MaxLen\" could be added as a constant to COSName to facilitate this.\nI added a getter/setter for the MaxLen value in revision 1544977\nI merged the changes to the 1.8 branch in revision 1544978\n"}
{"aId": 42, "code": "protected boolean isWhitespace(int c) \n    {\n        return c == 0 || c == 9 || c == 10 || c == 12 || c == 13 || c == 32;\n    }", "comment": " Whitespace 0 0x00 Null (NUL) 9 0x09 Tab (HT) 10 0x0A Line feed (LF) 12 0x0C Form feed (FF) 13 0x0D Carriage return (CR) 32 0x20 Space (SP)", "issueId": "PDFBOX-390", "issueStringList": ["org.pdfbox.filter.ASCIIHexFilter does not skip Whitespace", "org.pdfbox.filter.ASCIIHexFilter does not skip Whitespace", "According to the Specification (pdf_reference_1-7.pdf) all Whitespace", "Characters between the ASCII-Hex values have to be skipped (see 3.3.1", "ASCIIHexDecode Filter).", "The 0.8.0-incubator source decodes (or attempts to decode) those Whitespace", "Characters and as a result the byte values are wrong (all characters that", "are not [0-9a-f] result in -1, but processing does continue).", "This causes an invalid byte Stream.", "The ASCIIHexDecode Filter Section also defines the EOD end Character of the", "Byte Steam as '>' which might ease the parsing of inline Images.", "(The EI Operator should follow the EOD in case of an inline Image).", "Example for ASCII-Hex encoded value, copied from the Spec:", "FF CE A3 7C 5B 3F 28 16 0A 02 00 02 0A 16 28 3F 5B 7C A3 CE FF >", "I did fix the problem to be able to continue with my work.", "I paste the changed code here as a hint that might help to fix the bug.", "public class ASCIIHexFilter", "implements Filter", "{", "Whitespace", "0  0x00  Null (NUL)", "9  0x09  Tab (HT)", "10  0x0A  Line feed (LF)", "12  0x0C  Form feed (FF)", "13  0x0D  Carriage return (CR)", "32  0x20  Space (SP)", "protected boolean isWhitespace(int c) {", "return c == 0 || c == 9 || c == 10 || c == 12 || c == 13 || c == 32;", "}", "protected boolean isEOD(int c) {", "return (c == 62); // '>' - EOD", "}", "{@inheritDoc}", "public void decode(InputStream compressedData, OutputStream result, COSDictionary options, int filterIndex) throws IOException {", "int value = 0;", "int firstByte = 0;", "int secondByte = 0;", "while ((firstByte = compressedData.read()) != -1) {", "always after first char", "while(isWhitespace(firstByte))", "firstByte = compressedData.read();", "if(isEOD(firstByte))", "break;", "if(REVERSE_HEX[firstByte] == -1)", "System.out.println(\"Invalid Hex Code; int: \" + firstByte + \" char: \" + (char) firstByte);", "value = REVERSE_HEX[firstByte] * 16;", "secondByte = compressedData.read();", "if(isEOD(secondByte)) {", "second value behaves like 0 in case of EOD", "result.write(value);", "break;", "}", "if(secondByte >= 0) {", "if(REVERSE_HEX[secondByte] == -1)", "System.out.println(\"Invalid Hex Code; int: \" + secondByte + \" char: \" + (char) secondByte);", "value += REVERSE_HEX[secondByte];", "}", "result.write(value);", "}", "result.flush();", "}", ".....................................................", "other code remains unchanged", "Can you attach a patch containing your changes?", "That way it would be easier for us to review your changes.", "If you've made your changes to an svn checkout of the trunk, you can create the patch by running \"svn diff\" in the root directory of the checkout.", "I've created a patch with the suggested changes from mathias.", "Has someone a sample-document to test this feature?", "hi andreas,", "i did attach a sample document containing multiple hex encoded inline", "images containing whitespaces and an EOD as the firstByte.", "It does not provide an example for the \"special\" case where the", "secondByte is the EOD,", "this is coded according to the spec.", "After applying Mathias patch the sample documents works fine.", "Thanks Mathias.", "Fixed in version 732135"], "SplitGT": [" Whitespace 0 0x00 Null (NUL) 9 0x09 Tab (HT) 10 0x0A Line feed (LF) 12 0x0C Form feed (FF) 13 0x0D Carriage return (CR) 32 0x20 Space (SP)"], "issueString": "org.pdfbox.filter.ASCIIHexFilter does not skip Whitespace\norg.pdfbox.filter.ASCIIHexFilter does not skip Whitespace\n\nAccording to the Specification (pdf_reference_1-7.pdf) all Whitespace\nCharacters between the ASCII-Hex values have to be skipped (see 3.3.1\nASCIIHexDecode Filter).\n\nThe 0.8.0-incubator source decodes (or attempts to decode) those Whitespace\nCharacters and as a result the byte values are wrong (all characters that\nare not [0-9a-f] result in -1, but processing does continue).\nThis causes an invalid byte Stream.\n\nThe ASCIIHexDecode Filter Section also defines the EOD end Character of the\nByte Steam as '>' which might ease the parsing of inline Images.\n(The EI Operator should follow the EOD in case of an inline Image).\n\nExample for ASCII-Hex encoded value, copied from the Spec:\nFF CE A3 7C 5B 3F 28 16 0A 02 00 02 0A 16 28 3F 5B 7C A3 CE FF >\n\n\nI did fix the problem to be able to continue with my work.\nI paste the changed code here as a hint that might help to fix the bug.\n\npublic class ASCIIHexFilter\n  implements Filter\n{\n\n /**\n  * Whitespace\n  *   0  0x00  Null (NUL)\n  *   9  0x09  Tab (HT)\n  *  10  0x0A  Line feed (LF)\n  *  12  0x0C  Form feed (FF)\n  *  13  0x0D  Carriage return (CR)\n  *  32  0x20  Space (SP)  \n  */\n  protected boolean isWhitespace(int c) {\n    return c == 0 || c == 9 || c == 10 || c == 12 || c == 13 || c == 32;\n  }\n  \n  protected boolean isEOD(int c) {\n    return (c == 62); // '>' - EOD\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public void decode(InputStream compressedData, OutputStream result, COSDictionary options, int filterIndex) throws IOException {\n    int value = 0;\n    int firstByte = 0;\n    int secondByte = 0;\n    while ((firstByte = compressedData.read()) != -1) {\n      \n      // always after first char\n      while(isWhitespace(firstByte))\n        firstByte = compressedData.read();\n\n      if(isEOD(firstByte))\n        break;\n      \n      if(REVERSE_HEX[firstByte] == -1)\n        System.out.println(\"Invalid Hex Code; int: \" + firstByte + \" char: \" + (char) firstByte);\n\n      value = REVERSE_HEX[firstByte] * 16;\n      secondByte = compressedData.read();\n      \n      if(isEOD(secondByte)) {\n        // second value behaves like 0 in case of EOD\n        result.write(value);\n        break;\n      }\n\n      if(secondByte >= 0) {\n        if(REVERSE_HEX[secondByte] == -1)\n          System.out.println(\"Invalid Hex Code; int: \" + secondByte + \" char: \" + (char) secondByte);\n\n        value += REVERSE_HEX[secondByte];\n      }\n      result.write(value);\n    }\n    \n    result.flush();\n  }\n\n// .....................................................\n// other code remains unchanged\n\n\n\n\nCan you attach a patch containing your changes? That way it would be easier for us to review your changes.\n\nIf you've made your changes to an svn checkout of the trunk, you can create the patch by running \"svn diff\" in the root directory of the checkout.\nI've created a patch with the suggested changes from mathias. Has someone a sample-document to test this feature?\nhi andreas,\n\ni did attach a sample document containing multiple hex encoded inline \nimages containing whitespaces and an EOD as the firstByte.\n\nIt does not provide an example for the \"special\" case where the \nsecondByte is the EOD,\nthis is coded according to the spec.\n\n\n\n\nAfter applying Mathias patch the sample documents works fine.\n\nThanks Mathias.\nFixed in version 732135\n"}
{"aId": 43, "code": "protected final COSDictionary rebuildTrailer() throws IOException\n    {\n    \tCOSDictionary trailer = null;\n    \tbfSearchForObjects();\n    \tif (bfSearchCOSObjectKeyOffsets != null)\n    \t{\n            xrefTrailerResolver.nextXrefObj( 0, XRefType.TABLE );\n            for (COSObjectKey objectKey : bfSearchCOSObjectKeyOffsets.keySet())\n            {\n                xrefTrailerResolver.setXRef(objectKey, bfSearchCOSObjectKeyOffsets.get(objectKey));\n            }\n            xrefTrailerResolver.setStartxref(0);\n    \t\ttrailer = xrefTrailerResolver.getTrailer();\n    \t\tgetDocument().setTrailer(trailer);\n    \t\tfor(COSObjectKey key : bfSearchCOSObjectKeyOffsets.keySet())\n    \t\t{\n    \t\t\tLong offset = bfSearchCOSObjectKeyOffsets.get(key);\n    \t\t\tpdfSource.seek(offset);\n    \t        readObjectNumber();\n    \t        readGenerationNumber();\n    \t        readExpectedString(OBJ_MARKER, true);\n    \t\t\tCOSDictionary dictionary = null;\n    \t\t\ttry\n    \t\t\t{\n    \t\t\t\tdictionary = parseCOSDictionary();\n\t    \t\t\tif (dictionary != null)\n\t    \t\t\t{\n\t    \t\t\t\tif (COSName.CATALOG.equals(dictionary.getCOSName(COSName.TYPE)))\n\t    \t\t\t\t{\n\t    \t\t\t\t\ttrailer.setItem(COSName.ROOT, document.getObjectFromPool(key));\n\t    \t\t\t\t}\n\t    \t\t\t\telse if (dictionary.containsKey(COSName.TITLE)\n\t    \t\t\t\t\t\t|| dictionary.containsKey(COSName.AUTHOR)\n\t    \t\t\t\t\t\t|| dictionary.containsKey(COSName.SUBJECT)\n\t    \t\t\t\t\t\t|| dictionary.containsKey(COSName.KEYWORDS)\n\t    \t\t\t\t\t\t|| dictionary.containsKey(COSName.CREATOR)\n\t    \t\t\t\t\t\t|| dictionary.containsKey(COSName.PRODUCER)\n\t    \t\t\t\t\t\t|| dictionary.containsKey(COSName.CREATION_DATE))\n\t    \t\t\t\t{\n\t    \t\t\t\t\ttrailer.setItem(COSName.INFO, document.getObjectFromPool(key));\n\t    \t\t\t\t}\n\t    \t\t\t\t// TODO find/assign Encrypt entry\n\t    \t\t\t}\n    \t\t\t}\n    \t\t\tcatch(IOException exception)\n    \t\t\t{\n    \t\t\t\tLOG.error(\"Skipped invalid dictionary for object \"+key);\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn trailer;\n    }", "comment": " Rebuild the trailer dictionary if startxref can't be found.", "issueId": "PDFBOX-2527", "issueStringList": ["IOException: Negative seek offset in NonSequentialPDFParser", "{code}", "Exception in thread \"main\" java.io.IOException: Negative seek offset", "at java.io.RandomAccessFile.seek(Native Method)", "at org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek(RandomAccessBufferedFileInputStream.java:116)", "at org.apache.pdfbox.io.PushBackInputStream.seek(PushBackInputStream.java:234)", "at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:492)", "at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:1013)", "at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:951)", "at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:897)", "at org.apache.pdfbox.tools.PDFReader.parseDocument(PDFReader.java:375)", "at org.apache.pdfbox.tools.PDFReader.openPDFFile(PDFReader.java:340)", "at org.apache.pdfbox.tools.PDFReader.main(PDFReader.java:326)", "at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:80)", "{code}", "This happens with several malformed PDFs from the test set in TIKA-1442.", "These files (303385, 069020, 303385, 742141, 982996) all have some trash at the end.", "It looks like the pdf is truncated somewhere in the middle.", "I'm working on an improved self repair but as long as the parser isn't able to ignore corrupt parts it won't render.", "Are there any good workarounds to this problem?", "You can use the \"old\" parser (load() in 1.8.", "*, loadLegacy() in 2.0) as a fallback solution.", "Hmm, I changed to the \"new\" parser in the first place to workaround issues with the \"old\" parser...", "PDFBOX-1483 was the issue that prompted me to move to the \"new\" parser.", "What I mean is that you catch the exception in the nonSeq parser, and then only use the old parser.", "The attached PDF isn't just \"bad\" meaning that one developer hasn't applied the specification to 100%.", "The PDF has trash at the end, maybe as the result of a corrupted filesystem.", "OK thanks - I can try that.", "I may try and look into the code too and see if there is a way I can help fix both of these bugs.", "The files PDFBOX-1738.pdf, PDFBOX-2193-013973.pdf, PDFBOX-2250-055794.pdf, PDFBOX-2250-113223.pdf, PDFBOX-2421-357567.pdf and PDFBOX-2521.pdf now fail.", "I'm not yet done and am working on an improved version.", "Nevertheless, thanks for the point.", "I'm going to double check those files before committing the updated code", "[~tilman] The mentioned files should work again using my latest changes.", "Can you run another test please?", "It works!", "[~tilman] Thanks for the recheck", "After my last changes the Negative seek offset exception no longer appears.", "Now, an IOException about the real cause (the pdf is incomplete and has some additional junk at the end) is thrown:", "{code}", "Exception in thread \"main\" java.io.IOException: Corrupt XRefTable Entry - ObjID: 23", "at org.apache.pdfbox.pdfparser.COSParser.parseXrefTable(COSParser.java:1789)", "at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:239)", "at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:314)", "at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:373)", "at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:811)", "at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:757)", "at org.apache.pdfbox.tools.PDFReader.parseDocument(PDFReader.java:375)", "at org.apache.pdfbox.tools.PDFReader.openPDFFile(PDFReader.java:340)", "at org.apache.pdfbox.tools.PDFReader.main(PDFReader.java:326)", "at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:80)", "{code}", "I'm thinking about another self repair mechanism to handle corrupt files like this, but I've to run some tests first.", "I've replace my former brute force startxref search with a rebuild mechanism for the trailer dictionary if the startxref can't be found at the end of the pdf.", "The attached file renders fine now.", "The rebuild isn't yet complete.", "[~tilman] Do you have some time to run another test?", "TIA", "It works!", "Thanks a lot.", "I'll see if I can add the missing pieces."], "SplitGT": [" Rebuild the trailer dictionary if startxref can't be found."], "issueString": "IOException: Negative seek offset in NonSequentialPDFParser\n{code}\nException in thread \"main\" java.io.IOException: Negative seek offset\n\tat java.io.RandomAccessFile.seek(Native Method)\n\tat org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek(RandomAccessBufferedFileInputStream.java:116)\n\tat org.apache.pdfbox.io.PushBackInputStream.seek(PushBackInputStream.java:234)\n\tat org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:492)\n\tat org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:1013)\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:951)\n\tat org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:897)\n\tat org.apache.pdfbox.tools.PDFReader.parseDocument(PDFReader.java:375)\n\tat org.apache.pdfbox.tools.PDFReader.openPDFFile(PDFReader.java:340)\n\tat org.apache.pdfbox.tools.PDFReader.main(PDFReader.java:326)\n\tat org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:80)\n{code}\nThis happens with several malformed PDFs from the test set in TIKA-1442. These files (303385, 069020, 303385, 742141, 982996) all have some trash at the end.\n\nIt looks like the pdf is truncated somewhere in the middle. I'm working on an improved self repair but as long as the parser isn't able to ignore corrupt parts it won't render.\nAre there any good workarounds to this problem?\nYou can use the \"old\" parser (load() in 1.8.*, loadLegacy() in 2.0) as a fallback solution.\nHmm, I changed to the \"new\" parser in the first place to workaround issues with the \"old\" parser...\nPDFBOX-1483 was the issue that prompted me to move to the \"new\" parser.\nWhat I mean is that you catch the exception in the nonSeq parser, and then only use the old parser. \n\nThe attached PDF isn't just \"bad\" meaning that one developer hasn't applied the specification to 100%. The PDF has trash at the end, maybe as the result of a corrupted filesystem.\nOK thanks - I can try that. I may try and look into the code too and see if there is a way I can help fix both of these bugs.\nThe files PDFBOX-1738.pdf, PDFBOX-2193-013973.pdf, PDFBOX-2250-055794.pdf, PDFBOX-2250-113223.pdf, PDFBOX-2421-357567.pdf and PDFBOX-2521.pdf now fail.\nI'm not yet done and am working on an improved version. Nevertheless, thanks for the point. I'm going to double check those files before committing the updated code\n[~tilman] The mentioned files should work again using my latest changes. Can you run another test please?\nIt works!\n[~tilman] Thanks for the recheck\nAfter my last changes the Negative seek offset exception no longer appears. Now, an IOException about the real cause (the pdf is incomplete and has some additional junk at the end) is thrown:\n\n{code}\nException in thread \"main\" java.io.IOException: Corrupt XRefTable Entry - ObjID: 23\n        at org.apache.pdfbox.pdfparser.COSParser.parseXrefTable(COSParser.java:1789)\n        at org.apache.pdfbox.pdfparser.COSParser.parseXref(COSParser.java:239)\n        at org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:314)\n        at org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:373)\n        at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:811)\n        at org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:757)\n        at org.apache.pdfbox.tools.PDFReader.parseDocument(PDFReader.java:375)\n        at org.apache.pdfbox.tools.PDFReader.openPDFFile(PDFReader.java:340)\n        at org.apache.pdfbox.tools.PDFReader.main(PDFReader.java:326)\n        at org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:80)\n{code}\n\nI'm thinking about another self repair mechanism to handle corrupt files like this, but I've to run some tests first.\nI've replace my former brute force startxref search with a rebuild mechanism for the trailer dictionary if the startxref can't be found at the end of the pdf. The attached file renders fine now. The rebuild isn't yet complete.\n\n[~tilman] Do you have some time to run another test? TIA\n\n\nIt works!\nThanks a lot. I'll see if I can add the missing pieces.\n"}
{"aId": 46, "code": "public static void main(String[] args) throws IOException\n    {\n        CreatePortableCollection app = new CreatePortableCollection();\n        if (args.length != 1)\n        {\n            app.usage();\n        }\n        else\n        {\n            app.doIt(args[0]);\n        }\n    }", "comment": " This will create a portable collection PDF.", "issueId": "PDFBOX-5164", "issueStringList": ["Create portable collection PDF", "!image-2021-04-15-16-02-42-451.png!", "Please clarify your improvement wish / attach your PDF.", "The current version is 2.0.23.", "Thank you, that is a portable collection PDF (12.3.5 in the 1.7 PDF specification).", "I've heard of these but I think it's the first time I see one.", "I had a quick look at your code, I think more needs to be done below \"Collection\".", "!screenshot-1.png!", "Your code tries to create such a portable collection PDF.", "But the title of this issue is \"customize the columns\".", "Do you want to create a new portable collection PDF", "OR", "Do you want to modify (\"customize the columns\") an existing portable collection PDF ?", "I\u00a0 want to create a new portable collection PDF, But i do not how to code", "Here's some code... there are not yet any collection classes in PDFBox.", "Get the EmbeddedFiles.java example from the source code and then add this near the end.", "This is about a single file but you can add several ones.", "For that, create more \"ciDict\" dictionaries and of course more PDComplexFileSpecification objects.", "{code}", "COSDictionary collectionDic = new COSDictionary();", "COSDictionary schemaDict = new COSDictionary();", "schemaDict.setItem(COSName.TYPE, COSName.COLLECTION_SCHEMA);", "COSDictionary sortDic = new COSDictionary();", "sortDic.setItem(COSName.TYPE, COSName.COLLECTION_SORT);", "sortDic.setString(COSName.A, \"true\"); // sort ascending", "sortDic.setItem(COSName.S, COSName.getPDFName(\"fieldtwo\")); // \"it identifies a field described in the parent collection dictionary\"", "collectionDic.setItem(COSName.TYPE, COSName.COLLECTION);", "collectionDic.setItem(COSName.SCHEMA, schemaDict);", "collectionDic.setItem(COSName.SORT, sortDic);", "collectionDic.setItem(COSName.VIEW, COSName.D); // Details mode", "COSDictionary fieldDict1 = new COSDictionary();", "fieldDict1.setItem(COSName.TYPE, COSName.COLLECTION_FIELD);", "fieldDict1.setItem(COSName.SUBTYPE, COSName.S); // type: text field", "fieldDict1.setString(COSName.N, \"field header one\"); // header text", "fieldDict1.setInt(COSName.O, 1); // order on the screen", "COSDictionary fieldDict2 = new COSDictionary();", "fieldDict2.setItem(COSName.TYPE, COSName.COLLECTION_FIELD);", "fieldDict2.setItem(COSName.SUBTYPE, COSName.S); // type: text field", "fieldDict2.setString(COSName.N, \"field header two\");", "fieldDict2.setInt(COSName.O, 2);", "COSDictionary fieldDict3 = new COSDictionary();", "fieldDict3.setItem(COSName.TYPE, COSName.COLLECTION_FIELD);", "fieldDict3.setItem(COSName.SUBTYPE, COSName.N); // type: number field", "fieldDict3.setString(COSName.N, \"field header three\");", "fieldDict3.setInt(COSName.O, 3);", "schemaDict.setItem(\"fieldone\", fieldDict1); // field name (this is a key)", "schemaDict.setItem(\"fieldtwo\", fieldDict2);", "schemaDict.setItem(\"fieldthree\", fieldDict3);", "doc.getDocumentCatalog().getCOSObject().setItem(COSName.COLLECTION, collectionDic);", "doc.getDocumentCatalog().setVersion(\"1.7\");", "COSDictionary ciDict1 = new COSDictionary();", "ciDict1.setItem(COSName.TYPE, COSName.COLLECTION_ITEM);", "use the field names from earlier", "ciDict1.setString(\"fieldone\", \"Very interesting file\");", "ciDict1.setString(\"fieldtwo\", fs.getFile());", "ciDict1.setInt(\"fieldthree\", 333);", "fs.getCOSObject().setItem(COSName.CI, ciDict1);", "{code}", "Use the latest snapshot in", "https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.24-SNAPSHOT/", "to get the new constants.", "Result file:  [^collection.pdf]", "I am gratitude to you for helping me.", "I've just attached a self working example.", "Thanks for providing the sample PDF, this helped a lot.", "Follow-up issue in PDFBOX-5172.", "Sorry to hijack this, but I wanted to confirm with [~zxltmj]...is this the output that you'd expect?", "This is the recursive parser wrapper from Tika, which uses PDFBox.", "I just want to confirm that we don't have to do anything else to handle portable collections.", "No changes needed in Tika because the EmbeddedFiles tree is used.", "In my first attempt I used the existing file attachment example and only added collection stuff, and the CI entry which described how that file is to be sorted in the collection.", "Thank you, [~tilman]!"], "SplitGT": [" This will create a portable collection PDF."], "issueString": "Create portable collection PDF\n!image-2021-04-15-16-02-42-451.png!\nPlease clarify your improvement wish / attach your PDF. The current version is 2.0.23.\nThank you, that is a portable collection PDF (12.3.5 in the 1.7 PDF specification). I've heard of these but I think it's the first time I see one.\r\n\r\nI had a quick look at your code, I think more needs to be done below \"Collection\".\r\n\r\n !screenshot-1.png! \nYour code tries to create such a portable collection PDF. But the title of this issue is \"customize the columns\".\r\n\r\nDo you want to create a new portable collection PDF\r\n\r\nOR\r\n\r\nDo you want to modify (\"customize the columns\") an existing portable collection PDF ?\nI\u00a0 want to create a new portable collection PDF, But i do not how to code\nHere's some code... there are not yet any collection classes in PDFBox. Get the EmbeddedFiles.java example from the source code and then add this near the end. \r\n\r\nThis is about a single file but you can add several ones. For that, create more \"ciDict\" dictionaries and of course more PDComplexFileSpecification objects.\r\n{code}\r\nCOSDictionary collectionDic = new COSDictionary();\r\nCOSDictionary schemaDict = new COSDictionary();\r\nschemaDict.setItem(COSName.TYPE, COSName.COLLECTION_SCHEMA);\r\nCOSDictionary sortDic = new COSDictionary();\r\nsortDic.setItem(COSName.TYPE, COSName.COLLECTION_SORT);\r\nsortDic.setString(COSName.A, \"true\"); // sort ascending\r\nsortDic.setItem(COSName.S, COSName.getPDFName(\"fieldtwo\")); // \"it identifies a field described in the parent collection dictionary\"\r\ncollectionDic.setItem(COSName.TYPE, COSName.COLLECTION);\r\ncollectionDic.setItem(COSName.SCHEMA, schemaDict);\r\ncollectionDic.setItem(COSName.SORT, sortDic);\r\ncollectionDic.setItem(COSName.VIEW, COSName.D); // Details mode\r\nCOSDictionary fieldDict1 = new COSDictionary();\r\nfieldDict1.setItem(COSName.TYPE, COSName.COLLECTION_FIELD);\r\nfieldDict1.setItem(COSName.SUBTYPE, COSName.S); // type: text field\r\nfieldDict1.setString(COSName.N, \"field header one\"); // header text\r\nfieldDict1.setInt(COSName.O, 1); // order on the screen\r\nCOSDictionary fieldDict2 = new COSDictionary();\r\nfieldDict2.setItem(COSName.TYPE, COSName.COLLECTION_FIELD);\r\nfieldDict2.setItem(COSName.SUBTYPE, COSName.S); // type: text field\r\nfieldDict2.setString(COSName.N, \"field header two\");\r\nfieldDict2.setInt(COSName.O, 2);\r\nCOSDictionary fieldDict3 = new COSDictionary();\r\nfieldDict3.setItem(COSName.TYPE, COSName.COLLECTION_FIELD);\r\nfieldDict3.setItem(COSName.SUBTYPE, COSName.N); // type: number field\r\nfieldDict3.setString(COSName.N, \"field header three\");\r\nfieldDict3.setInt(COSName.O, 3);\r\nschemaDict.setItem(\"fieldone\", fieldDict1); // field name (this is a key)\r\nschemaDict.setItem(\"fieldtwo\", fieldDict2);\r\nschemaDict.setItem(\"fieldthree\", fieldDict3);\r\ndoc.getDocumentCatalog().getCOSObject().setItem(COSName.COLLECTION, collectionDic);\r\ndoc.getDocumentCatalog().setVersion(\"1.7\");\r\n\r\n\r\nCOSDictionary ciDict1 = new COSDictionary();\r\nciDict1.setItem(COSName.TYPE, COSName.COLLECTION_ITEM);\r\n// use the field names from earlier\r\nciDict1.setString(\"fieldone\", \"Very interesting file\");\r\nciDict1.setString(\"fieldtwo\", fs.getFile());\r\nciDict1.setInt(\"fieldthree\", 333);\r\nfs.getCOSObject().setItem(COSName.CI, ciDict1);\r\n{code}\r\n\r\nUse the latest snapshot in \r\nhttps://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/2.0.24-SNAPSHOT/\r\nto get the new constants.\r\n\r\nResult file:  [^collection.pdf] \nI am gratitude to you for helping me.\nI've just attached a self working example. Thanks for providing the sample PDF, this helped a lot.\r\n\r\nFollow-up issue in PDFBOX-5172.\nSorry to hijack this, but I wanted to confirm with [~zxltmj]...is this the output that you'd expect?  This is the recursive parser wrapper from Tika, which uses PDFBox.  I just want to confirm that we don't have to do anything else to handle portable collections.\nNo changes needed in Tika because the EmbeddedFiles tree is used. In my first attempt I used the existing file attachment example and only added collection stuff, and the CI entry which described how that file is to be sorted in the collection.\nThank you, [~tilman]!\n"}
{"aId": 48, "code": "private long bfSearchForLastStartxrefEntry() throws IOException\n    {\n        long originOffset = source.getPosition();\n        long lastStartxref = -1;\n        source.seek(MINIMUM_SEARCH_OFFSET);\n        // search for startxref\n        while (!source.isEOF())\n        {\n            if (isString(STARTXREF))\n            {\n                lastStartxref = source.getPosition();\n                source.seek(lastStartxref + 9);\n            }\n            source.read();\n        }\n        source.seek(originOffset);\n        return lastStartxref;\n    }", "comment": " Brute force search for the last startxref entry.", "issueId": "PDFBOX-3783", "issueStringList": ["java.io.IOException: Expected root dictionary, but got this: COSNull{}", "This file was parsed in 2.0.5 but no longer now:", "{code}", "java.io.IOException: Expected root dictionary, but got this: COSNull{}", "org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:230)", "org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:276)", "org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1005)", "org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:943)", "org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1375)", "org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1293)", "org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1276)", "org.apache.pdfbox.debugger.PDFDebugger.main(PDFDebugger.java:262)", "org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:85)", "{code}", "This is related to the changes of PDFBOX-3318, I'll have a look", "I've replaced the repair mechanism from PDFBOX-3318 with a brute force search fro the latest startxref entry.", "This should work for most files with garbage attached at the end.", "[~tallison@mitre.org] thanks for running the comparison", "[~tilman] thanks for analyzing the results"], "SplitGT": [" Brute force search for the last startxref entry."], "issueString": "java.io.IOException: Expected root dictionary, but got this: COSNull{}\nThis file was parsed in 2.0.5 but no longer now:\n{code}\njava.io.IOException: Expected root dictionary, but got this: COSNull{}\n    org.apache.pdfbox.pdfparser.PDFParser.initialParse(PDFParser.java:230)\n    org.apache.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:276)\n    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:1005)\n    org.apache.pdfbox.pdmodel.PDDocument.load(PDDocument.java:943)\n    org.apache.pdfbox.debugger.PDFDebugger.parseDocument(PDFDebugger.java:1375)\n    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1293)\n    org.apache.pdfbox.debugger.PDFDebugger.readPDFFile(PDFDebugger.java:1276)\n    org.apache.pdfbox.debugger.PDFDebugger.main(PDFDebugger.java:262)\n    org.apache.pdfbox.tools.PDFBox.main(PDFBox.java:85)\n{code}\n\nThis is related to the changes of PDFBOX-3318, I'll have a look\nI've replaced the repair mechanism from PDFBOX-3318 with a brute force search fro the latest startxref entry. This should work for most files with garbage attached at the end.\n\n[~tallison@mitre.org] thanks for running the comparison \n[~tilman] thanks for analyzing the results\n"}
{"aId": 51, "code": "public Boolean shouldOpenInNewWindow()\n    {\n        if (getCOSObject().getDictionaryObject(COSName.NEW_WINDOW) instanceof COSBoolean)\n        {\n            return getCOSObject().getBoolean(COSName.NEW_WINDOW, true);\n        }\n        return null;\n    }", "comment": " If this flag is false, the destination document will replace the current document in the same window.", "issueId": "PDFBOX-4117", "issueStringList": ["Implement GoToE action-type", "One of the major Action Types is not implemented in any version of PDFBox, and I believe it should be.", "I'm referring to \"Embedded Go-To Actions\" (defined under 12.6.4.4 in PDF 32000-1:2008), which allows a link to open an attached file.", "Currently, such \"GoToE\" actions are interpreted as \"null\" by PDFBox, which is not ideal.", "Added a sample file with a GoToE link on the first page, for testing purposes.", "[~giladd] can you test whatever you want to do with the trunk?", "Is the API what you had in mind?", "It has all except /P and /A of the target directory.", "Wow, thanks a lot for the quick turnaround, Tilman!", "Is it available in any current snapshot I can download and integrate into my project?", "https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/3.0.0-SNAPSHOT/", "Seems to be working great!", "Any chance of implementing it in the older versions as well?", "One thing that might be missing is the option to remove the NewWindow COS-key, so that it defaults to the preference set in the application.", "Here's the description in the ISO:", "{noformat}", "NewWindow \u2013 boolean", "\u2013 (Optional) If true, the destination document should be opened in a new window; if false, the destination document should replace the current document in the same window.", "If this entry is absent, the conforming reader should act according to its preference.", "{noformat}", "Yes this will be added a 2.", "* version.", "I just want to be sure that it is good to use because I wouldn't be able to change the 2.", "* API after release.", "Re the NewWindow, would it help you if I return & set not a boolean, but a Boolean?", "(Not sure if I will really do it, I suspect that it is a bad practice)", "I thought about that.", "The question is whether assigning null to it will have the same effect (in Acrobat) as removing it entirely.", "It can be tested, I'm sure.", "What I mean is that the parameter/result would be a (boxed) Boolean.", "If that is null in the setter, I would remove the item.", "In the getter, I would return null if the entry is missing.", "Ah, I see.", "Sounds good to me!", "Done; please test the snapshot again and give feedback.", "Note that target directory /P and /A are not yet implemented."], "SplitGT": [" If this flag is false, the destination document will replace the current document in the same window."], "issueString": "Implement GoToE action-type\nOne of the major Action Types is not implemented in any version of PDFBox, and I believe it should be. I'm referring to \"Embedded Go-To Actions\" (defined under 12.6.4.4 in PDF 32000-1:2008), which allows a link to open an attached file. Currently, such \"GoToE\" actions are interpreted as \"null\" by PDFBox, which is not ideal.\nAdded a sample file with a GoToE link on the first page, for testing purposes.\n[~giladd] can you test whatever you want to do with the trunk? Is the API what you had in mind? It has all except /P and /A of the target directory.\nWow, thanks a lot for the quick turnaround, Tilman!\r\n\r\nIs it available in any current snapshot I can download and integrate into my project?\nhttps://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/3.0.0-SNAPSHOT/\nSeems to be working great! Any chance of implementing it in the older versions as well?\nOne thing that might be missing is the option to remove the NewWindow COS-key, so that it defaults to the preference set in the application.\r\n\r\nHere's the description in the ISO:\r\n{noformat}\r\nNewWindow \u2013 boolean \r\n\u2013 (Optional) If true, the destination document should be opened in a new window; if false, the destination document should replace the current document in the same window. If this entry is absent, the conforming reader should act according to its preference.{noformat}\nYes this will be added a 2.* version. I just want to be sure that it is good to use because I wouldn't be able to change the 2.* API after release.\r\n\r\nRe the NewWindow, would it help you if I return & set not a boolean, but a Boolean? (Not sure if I will really do it, I suspect that it is a bad practice)\nI thought about that. The question is whether assigning null to it will have the same effect (in Acrobat) as removing it entirely. It can be tested, I'm sure.\nWhat I mean is that the parameter/result would be a (boxed) Boolean. If that is null in the setter, I would remove the item. In the getter, I would return null if the entry is missing.\nAh, I see. Sounds good to me!\nDone; please test the snapshot again and give feedback. Note that target directory /P and /A are not yet implemented.\n"}
{"aId": 54, "code": "private void readUntilEndStream( OutputStream out ) throws IOException{\n        int byteRead;\n        do{ //use a fail fast test for end of stream markers\n            byteRead = pdfSource.read();\n            if(byteRead==E){//only branch if \"e\"\n                byteRead = pdfSource.read();\n                if(byteRead==N){ //only continue branch if \"en\"\n                    byteRead = pdfSource.read();\n                    if(byteRead==D){//up to \"end\" now\n                        byteRead = pdfSource.read();\n                        if(byteRead==S){\n                            byteRead = pdfSource.read();\n                            if(byteRead==T){\n                                byteRead = pdfSource.read();\n                                if(byteRead==R){\n                                    byteRead = pdfSource.read();\n                                    if(byteRead==E){\n                                        byteRead = pdfSource.read();\n                                        if(byteRead==A){\n                                            byteRead = pdfSource.read();\n                                            if(byteRead==M){\n                                                //found the whole marker\n                                                pdfSource.unread( ENDSTREAM );\n                                                return;\n                                            }\n                                        }else{\n                                            out.write(ENDSTREAM, 0, 7);\n                                        }\n                                    }else{\n                                        out.write(ENDSTREAM, 0, 6);\n                                    }\n                                }else{\n                                    out.write(ENDSTREAM, 0, 5);\n                                }\n                            }else{\n                                out.write(ENDSTREAM, 0, 4);\n                            }\n                        }else if(byteRead==O){\n                            byteRead = pdfSource.read();\n                            if(byteRead==B){\n                                byteRead = pdfSource.read();\n                                if(byteRead==J){\n                                    //found whole marker\n                                    pdfSource.unread( ENDOBJ );\n                                    return;\n                                }\n                            }else{\n                                out.write(ENDOBJ, 0, 4);\n                            }\n                        }else{\n                            out.write(E);\n                            out.write(N);\n                            out.write(D);\n                        }\n                    }else{\n                        out.write(E);\n                        out.write(N);\n                    }\n                }else{\n                    out.write(E);\n                }\n            }\n            if(byteRead!=-1)out.write(byteRead);\n\n        }while(byteRead!=-1);\n    }", "comment": " This method will read through the current stream object until we find the keyword \"endstream\" meaning we're at the end of this object. Some pdf files, however, forget to write some endstream tags and just close off objects with an \"endobj\" tag so we have to handle this case as well.", "issueId": "PDFBOX-591", "issueStringList": ["PDFBox performance issue:  BaseParser.readUntilEndStream() rewrite", "The load time for loading documents into PDFBox (PDDocument) is too slow.", "One culprit is the method:  org.apach.pdfbox.pdfparser.BaseParser.readUntilEndStream(OutputStream out)", "The current implementation of this method uses a very slow test for end of stream conditions.", "A profile of the readUntilEndStream() method shows that a huge chunk of the method's processing time is being consumed in the cmpCircularBuffer() call - which is purely part of the test for for the end of stream marker.", "In other words, the readUntilEndOfStream() is spending twice as much time testing for the end of stream marker as it is reading bytes from the stream.", "A better solution is to use a simpler, direct fail-fast test conditional structure that uses byte primitives.", "I strongly recommend that the current method be removed and replaced with the following code below.", "This results in a relative speed up of readUntilEndStream() method of a little over a factor of 3 (a ratio of 113/37 = 3.05 if you want to be more precise).", "This in turn helps the overall performance of PDDocument.parse() by about a factor of 2.7.", "Note the addition of some byte constants used to make the code readable.", "private static final int E = 101;", "private static final int N = 110;", "private static final int D = 100;", "private static final int S = 115;", "private static final int T = 116;", "private static final int R = 114;", "private static final int A = 97;", "private static final int M = 109;", "private static final int O = 111;", "private static final int B = 98;", "private static final int J = 106;", "This method will read through the current stream object until", "we find the keyword \"endstream\" meaning we're at the end of this", "object.", "Some pdf files, however, forget to write some endstream tags", "and just close off objects with an \"endobj\" tag so we have to handle", "this case as well.", "@param out The stream we write out to.", "@throws IOException", "private void readUntilEndStream( OutputStream out ) throws IOException{", "int byteRead;", "do{ //use a fail fast test for end of stream markers", "byteRead = pdfSource.read();", "if(byteRead==E){//only branch if \"e\"", "byteRead = pdfSource.read();", "if(byteRead==N){ //only continue branch if \"en\"", "byteRead = pdfSource.read();", "if(byteRead==D){//up to \"end\" now", "byteRead = pdfSource.read();", "if(byteRead==S){", "byteRead = pdfSource.read();", "if(byteRead==T){", "byteRead = pdfSource.read();", "if(byteRead==R){", "byteRead = pdfSource.read();", "if(byteRead==E){", "byteRead = pdfSource.read();", "if(byteRead==A){", "byteRead = pdfSource.read();", "if(byteRead==M){", "found the whole marker", "pdfSource.unread( ENDSTREAM );", "return;", "}", "}else{", "out.write(ENDSTREAM, 0, 7);", "}", "}else{", "out.write(ENDSTREAM, 0, 6);", "}", "}else{", "out.write(ENDSTREAM, 0, 5);", "}", "}else{", "out.write(ENDSTREAM, 0, 4);", "}", "}else if(byteRead==O){", "byteRead = pdfSource.read();", "if(byteRead==B){", "byteRead = pdfSource.read();", "if(byteRead==J){", "found whole marker", "pdfSource.unread( ENDOBJ );", "return;", "}", "}else{", "out.write(ENDOBJ, 0, 4);", "}", "}else{", "out.write(E);", "out.write(N);", "out.write(D);", "}", "}else{", "out.write(E);", "out.write(N);", "}", "}else{", "out.write(E);", "}", "}", "if(byteRead!=-1)out.write(byteRead);", "}while(byteRead!=-1);", "}", "tweaked version of BaseParser  to improve performance of readUntilEndStream() method.", "Changed from 'bug' to improvement.", "A much needed improvement, though!", "Good stuff!", "Committed in revision 899479.", "The deeply nested conditional looks a bit funny, but it's obviously better than the previous code.", "I made a minor improvement to the code by using characters instead of numbers for the E, N, D, S, T, R, A, M, O, B, J constants."], "SplitGT": [" This method will read through the current stream object until we find the keyword \"endstream\" meaning we're at the end of this object.", "Some pdf files, however, forget to write some endstream tags and just close off objects with an \"endobj\" tag so we have to handle this case as well."], "issueString": "PDFBox performance issue:  BaseParser.readUntilEndStream() rewrite\nThe load time for loading documents into PDFBox (PDDocument) is too slow.\n\nOne culprit is the method:  org.apach.pdfbox.pdfparser.BaseParser.readUntilEndStream(OutputStream out)\n\nThe current implementation of this method uses a very slow test for end of stream conditions.   A profile of the readUntilEndStream() method shows that a huge chunk of the method's processing time is being consumed in the cmpCircularBuffer() call - which is purely part of the test for for the end of stream marker.  In other words, the readUntilEndOfStream() is spending twice as much time testing for the end of stream marker as it is reading bytes from the stream.\n\nA better solution is to use a simpler, direct fail-fast test conditional structure that uses byte primitives.   I strongly recommend that the current method be removed and replaced with the following code below.  This results in a relative speed up of readUntilEndStream() method of a little over a factor of 3 (a ratio of 113/37 = 3.05 if you want to be more precise).  This in turn helps the overall performance of PDDocument.parse() by about a factor of 2.7.\n\nNote the addition of some byte constants used to make the code readable.\n\n-----------------------------------------------------------------\n    private static final int E = 101;\n    private static final int N = 110;\n    private static final int D = 100;\n    \n    private static final int S = 115;\n    private static final int T = 116;\n    private static final int R = 114;\n    private static final int A = 97;\n    private static final int M = 109;\n    \n    private static final int O = 111;\n    private static final int B = 98;\n    private static final int J = 106;\n    \n    \n    /**\n     * This method will read through the current stream object until\n     * we find the keyword \"endstream\" meaning we're at the end of this\n     * object. Some pdf files, however, forget to write some endstream tags\n     * and just close off objects with an \"endobj\" tag so we have to handle\n     * this case as well.\n     * @param out The stream we write out to. \n     * @throws IOException\n     */\n    private void readUntilEndStream( OutputStream out ) throws IOException{\n    \tint byteRead;\n    \tdo{ //use a fail fast test for end of stream markers\n    \t\tbyteRead = pdfSource.read();\n    \t\tif(byteRead==E){//only branch if \"e\"\n    \t\t\tbyteRead = pdfSource.read();\n    \t\t\tif(byteRead==N){ //only continue branch if \"en\"\n    \t\t\t\tbyteRead = pdfSource.read();\n    \t\t\t\tif(byteRead==D){//up to \"end\" now\n    \t\t\t\t\tbyteRead = pdfSource.read();\n    \t\t\t\t\tif(byteRead==S){\n    \t\t\t\t\t\tbyteRead = pdfSource.read();\n    \t\t\t\t\t\tif(byteRead==T){\n    \t\t\t\t\t\t\tbyteRead = pdfSource.read();\n    \t\t\t\t\t\t\tif(byteRead==R){\n    \t\t\t\t\t\t\t\tbyteRead = pdfSource.read();\n    \t\t\t\t\t\t\t\tif(byteRead==E){\n    \t\t\t\t\t\t\t\t\tbyteRead = pdfSource.read();\n    \t\t\t\t\t\t\t\t\tif(byteRead==A){\n    \t\t\t\t\t\t\t\t\t\tbyteRead = pdfSource.read();\n    \t\t\t\t\t\t\t\t\t\tif(byteRead==M){\n    \t\t\t\t\t\t\t\t\t\t\t//found the whole marker\n    \t\t\t\t\t\t\t\t\t\t\tpdfSource.unread( ENDSTREAM );\n    \t\t\t\t\t\t\t                return;\n    \t\t\t\t\t\t\t\t\t\t}\n    \t\t\t\t\t\t\t\t\t}else{\n    \t\t\t\t\t\t\t\t\t\tout.write(ENDSTREAM, 0, 7);\n    \t\t\t\t\t\t\t\t\t}\n    \t\t\t\t\t\t\t\t}else{\n    \t\t\t\t\t\t\t\t\tout.write(ENDSTREAM, 0, 6);\n    \t\t\t\t\t\t\t\t}\n    \t\t\t\t\t\t\t}else{\n    \t\t\t\t\t\t\t\tout.write(ENDSTREAM, 0, 5);\n    \t\t\t\t\t\t\t}\n    \t\t\t\t\t\t}else{\n        \t\t\t\t\t\tout.write(ENDSTREAM, 0, 4);\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}else if(byteRead==O){\n    \t\t\t\t\t\tbyteRead = pdfSource.read();\n    \t\t\t\t\t\tif(byteRead==B){\n    \t\t\t\t\t\t\tbyteRead = pdfSource.read();\n    \t\t\t\t\t\t\tif(byteRead==J){\n    \t\t\t\t\t\t\t\t//found whole marker\n    \t\t\t\t\t\t\t\tpdfSource.unread( ENDOBJ );\n    \t\t\t\t                return;\n    \t\t\t\t\t\t\t}\n    \t\t\t\t\t\t}else{\n        \t\t\t\t\t\tout.write(ENDOBJ, 0, 4);\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}else{\n    \t\t\t\t\t\tout.write(E);\n    \t\t\t\t\t\tout.write(N);\n    \t\t\t\t\t\tout.write(D);\n    \t\t\t\t\t}\n    \t\t\t\t}else{\n    \t\t\t\t\tout.write(E);\n    \t\t\t\t\tout.write(N);\n    \t\t\t\t}\n    \t\t\t}else{\n    \t\t\t\tout.write(E);\n    \t\t\t}\n    \t\t}\n    \t\tif(byteRead!=-1)out.write(byteRead);\n\n    \t}while(byteRead!=-1);\n    }\n\ntweaked version of BaseParser  to improve performance of readUntilEndStream() method.\nChanged from 'bug' to improvement.\n\nA much needed improvement, though!\nGood stuff! Committed in revision 899479.\n\nThe deeply nested conditional looks a bit funny, but it's obviously better than the previous code. I made a minor improvement to the code by using characters instead of numbers for the E, N, D, S, T, R, A, M, O, B, J constants.\n"}
{"aId": 56, "code": "public static PDTrueTypeFont loadTTF( PDDocument doc, File file ) throws IOException\n    {\n        return loadTTF( doc, new FileInputStream( file ) );\n    }", "comment": " This will load a TTF to be embedded into a document.", "issueId": "PDFBOX-732", "issueStringList": ["Loading TTF font files from the classpath", "Currently (pdfbox 1.1.0 & 1.2.0 snapshot) TTF font files can only be loaded from the file system as PDTrueTypeFont exposes two load methods:", "public static PDTrueTypeFont loadTTF(PDDocument, String)", "public static PDTrueTypeFont loadTTF(PDDocument, File)", "The first wraps the String in a java.io.File object and delegates to the second, so all TTF reading is from the file system.", "It would be useful to be able to read TTF files from the classpath - or indeed from any arbitrary stream.", "Could we have a third method?", ":", "public static PDTrueTypeFont loadTTF(PDDocument, InputStream)", "This would allow TTFs to be loaded like so:", "PDTrueTypeFont.load(myDoc, MyClass.class.getClassLoader().getResourceAsStream(\"myFont.ttf\"));", "For what it's worth here's a patch of what I did (see below).", "One uncertainty I had was about the use of the COSName.LENGTH1 field which only seems to be used currently in PDTrueTypeFont.", "So it may be reasonable or not to push the setting of this attribute into the PDStream constructor.", "Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java", "===================================================================", "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\t(revision 948363)", "+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\t(working copy)", "@@ -114,12 +114,17 @@", "{", "output = stream.createUnfilteredStream();", "}", "+            int bytesInInputStream = 0;", "byte[] buffer = new byte[ 1024 ];", "int amountRead = -1;", "while( (amountRead = str.read(buffer)) != -1 )", "{", "output.write( buffer, 0, amountRead );", "+                bytesInInputStream += amountRead;", "}", "+", "+            // Set the number of bytes read from the input stream", "+            this.stream.setInt( COSName.LENGTH1, bytesInInputStream );", "}", "finally", "{", "Index: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java", "===================================================================", "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\t(revision 948363)", "+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\t(working copy)", "@@ -130,7 +130,7 @@", "}", "* This will load a TTF to be embedding into a document.", "+     * This will load a TTF to be embedded into a document.", "@param doc The PDF document that will hold the embedded font.", "@param file A TTF file stream.", "@@ -139,21 +139,32 @@", "public static PDTrueTypeFont loadTTF( PDDocument doc, File file ) throws IOException", "{", "+        return loadTTF( doc, new FileInputStream( file ) );", "+    }", "+", "+    /**", "+     * This will load a TTF to be embedded into a document.", "+     *", "+     * @param doc The PDF document that will hold the embedded font.", "+     * @param stream A TTF input stream.", "+     * @return A PDF TTF.", "+     * @throws IOException If there is an error loading the data.", "+     */", "+    public static PDTrueTypeFont loadTTF( PDDocument doc, InputStream stream ) throws IOException", "+    {", "PDTrueTypeFont retval = new PDTrueTypeFont();", "PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();", "PDStream fontStream = new PDStream(doc, new FileInputStream( file ), false );", "fontStream.getStream().setInt( COSName.LENGTH1, (int)file.length() );", "+        PDStream fontStream = new PDStream(doc, stream, false );", "fontStream.addCompression();", "fd.setFontFile2( fontStream );", "retval.setFontDescriptor( fd );", "InputStream ttfData = new FileInputStream(file);", "try", "{", "loadDescriptorDictionary(retval, fd, ttfData);", "+            loadDescriptorDictionary(retval, fd, stream);", "}", "finally", "{", "ttfData.close();", "+            stream.close();", "}", "only support winansi encoding right now, should really", "just use Identity-H with unicode mapping", "Adding a patch of the proposed changes.", "I've added the patch with version 955384.", "I've to make some small changes:", "the change in the class PDStream isn't needed", "the stream has to be recreated otherwise an exception would be thrown, because the stream is already closed", "Thanks to Neil for the contribution"], "SplitGT": [" This will load a TTF to be embedded into a document."], "issueString": "Loading TTF font files from the classpath\nCurrently (pdfbox 1.1.0 & 1.2.0 snapshot) TTF font files can only be loaded from the file system as PDTrueTypeFont exposes two load methods:\n    public static PDTrueTypeFont loadTTF(PDDocument, String)\n    public static PDTrueTypeFont loadTTF(PDDocument, File)\nThe first wraps the String in a java.io.File object and delegates to the second, so all TTF reading is from the file system.\n\nIt would be useful to be able to read TTF files from the classpath - or indeed from any arbitrary stream.\nCould we have a third method?:\n    public static PDTrueTypeFont loadTTF(PDDocument, InputStream)\n\nThis would allow TTFs to be loaded like so:\nPDTrueTypeFont.load(myDoc, MyClass.class.getClassLoader().getResourceAsStream(\"myFont.ttf\"));\n\nFor what it's worth here's a patch of what I did (see below).\nOne uncertainty I had was about the use of the COSName.LENGTH1 field which only seems to be used currently in PDTrueTypeFont. So it may be reasonable or not to push the setting of this attribute into the PDStream constructor.\n\n\nIndex: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\n===================================================================\n--- pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\t(revision 948363)\n+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java\t(working copy)\n@@ -114,12 +114,17 @@\n             {\n                 output = stream.createUnfilteredStream();\n             }\n+            int bytesInInputStream = 0;\n             byte[] buffer = new byte[ 1024 ];\n             int amountRead = -1;\n             while( (amountRead = str.read(buffer)) != -1 )\n             {\n                 output.write( buffer, 0, amountRead );\n+                bytesInInputStream += amountRead;\n             }\n+            \n+            // Set the number of bytes read from the input stream\n+            this.stream.setInt( COSName.LENGTH1, bytesInInputStream );\n         }\n         finally\n         {\nIndex: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\n===================================================================\n--- pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\t(revision 948363)\n+++ pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java\t(working copy)\n@@ -130,7 +130,7 @@\n     }\n \n     /**\n-     * This will load a TTF to be embedding into a document.\n+     * This will load a TTF to be embedded into a document.\n      *\n      * @param doc The PDF document that will hold the embedded font.\n      * @param file A TTF file stream.\n@@ -139,21 +139,32 @@\n      */\n     public static PDTrueTypeFont loadTTF( PDDocument doc, File file ) throws IOException\n     {\n+        return loadTTF( doc, new FileInputStream( file ) );\n+    }\n+\n+    /**\n+     * This will load a TTF to be embedded into a document.\n+     *\n+     * @param doc The PDF document that will hold the embedded font.\n+     * @param stream A TTF input stream.\n+     * @return A PDF TTF.\n+     * @throws IOException If there is an error loading the data.\n+     */\n+    public static PDTrueTypeFont loadTTF( PDDocument doc, InputStream stream ) throws IOException\n+    {\n         PDTrueTypeFont retval = new PDTrueTypeFont();\n         PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();\n-        PDStream fontStream = new PDStream(doc, new FileInputStream( file ), false );\n-        fontStream.getStream().setInt( COSName.LENGTH1, (int)file.length() );\n+        PDStream fontStream = new PDStream(doc, stream, false );\n         fontStream.addCompression();\n         fd.setFontFile2( fontStream );\n         retval.setFontDescriptor( fd );\n-        InputStream ttfData = new FileInputStream(file);\n         try\n         {\n-            loadDescriptorDictionary(retval, fd, ttfData);\n+            loadDescriptorDictionary(retval, fd, stream);\n         }\n         finally\n         {\n-            ttfData.close();\n+            stream.close();\n         }\n         //only support winansi encoding right now, should really\n         //just use Identity-H with unicode mapping\n\n\nAdding a patch of the proposed changes.\nI've added the patch with version 955384. \n\nI've to make some small changes:\n- the change in the class PDStream isn't needed\n- the stream has to be recreated otherwise an exception would be thrown, because the stream is already closed\n\nThanks to Neil for the contribution\n"}
{"aId": 58, "code": "private void saveDiskCache()\n    {\n        BufferedWriter writer = null;\n        try\n        {\n            File file = getDiskCacheFile();\n            writer = new BufferedWriter(new FileWriter(file));\n\n            for (FSFontInfo fontInfo : fontInfoList)\n            {\n                writer.write(fontInfo.postScriptName);\n                writer.write(\"|\");\n                writer.write(fontInfo.format.toString());\n                writer.write(\"|\");\n                if (fontInfo.cidSystemInfo != null)\n                {\n                    writer.write(fontInfo.cidSystemInfo.getRegistry() + '-' +\n                                 fontInfo.cidSystemInfo.getOrdering() + '-' +\n                                 fontInfo.cidSystemInfo.getSupplement());\n                }\n                writer.write(\"|\");\n                if (fontInfo.usWeightClass > -1)\n                {\n                    writer.write(Integer.toHexString(fontInfo.usWeightClass));\n                }\n                writer.write(\"|\");\n                if (fontInfo.sFamilyClass > -1)\n                {\n                    writer.write(Integer.toHexString(fontInfo.sFamilyClass));\n                }\n                writer.write(\"|\");\n                writer.write(Integer.toHexString(fontInfo.ulCodePageRange1));\n                writer.write(\"|\");\n                writer.write(Integer.toHexString(fontInfo.ulCodePageRange2));\n                writer.write(\"|\");\n                if (fontInfo.macStyle > -1)\n                {\n                    writer.write(Integer.toHexString(fontInfo.macStyle));\n                }\n                writer.write(\"|\");\n                if (fontInfo.panose != null)\n                {\n                    byte[] bytes = fontInfo.panose.getBytes();\n                    for (int i = 0; i < 10; i ++)\n                    {\n                        String str = Integer.toHexString(bytes[i]);\n                        if (str.length() == 1)\n                        {\n                            writer.write('0');\n                        }\n                        writer.write(str);\n                    }\n                }\n                writer.write(\"|\");\n                writer.write(fontInfo.file.getAbsolutePath());\n                writer.newLine();\n            }\n        }\n        catch (IOException e)\n        {\n            LOG.error(\"Could not write to font cache\", e);\n        }\n        finally\n        {\n            IOUtils.closeQuietly(writer);\n        }\n    }", "comment": " Saves the font metadata cache to disk.", "issueId": "PDFBOX-3001", "issueStringList": ["FileSystemFontProvider cache instability", "FileSystemFontProvider uses Java's Preferences API to cache font metadata, however it doesn't seem to work out of the box on Windows (due to file permissions) and one user on the mailing list has complained that on Linux file paths with more than 80 characters can't be handed.", "Serializable is also slow.", "It looks like Preferences wasn't a good choice here.", "We're going to need to roll our own cache file format and save it somewhere we have write access to.", "duplicate by [~adamhooper] in PDFBOX-3039:", "FileSystemFontProvider: java.lang.IllegalArgumentException: Key too long: /usr/local/share/fonts/chromeos/notofonts-20140815/NotoSansGujaratiUI-Regular.ttf", "{{FileSystemFontProvider}} calls {{Preferences.putByteArray()}}, which crashes if the key is longer than 80 characters.", "Font filenames are often longer than 80 characters.", "So FileSystemFontProvider often crashes.", "This happens even if I try to use {{PDType1Font.HELVETICA}} ... meaning PDFBox can't read or write PDFs on my system.", "Re paths only - how about using an MD5 hash for the path?", "Use SHA1 hashes instead of full filenames", "Attached a patch that fixes the issue for me.", "Patch that compiles for Java 6", "patch for MD5 hash", "Oops... you did the same.", "(I took MD5 because this isn't a security application)", "Hehe, I take no offence.", "Really, I only wrote the patch so I could get on with my testing.", "I like the BigInteger trick :)", "http://stackoverflow.com/questions/415953/how-can-i-generate-an-md5-hash :-)", "Yes, we could hash the path to make it shorter.", "But we're also seeing Windows users on the mailing list with this exception:", "{code}", "\"java.util.prefs.WindowsPreferences <init> - WARNING: Could not open/create prefs root node Software\\JavaSoft\\Prefs at root 0x80000002.", "Windows RegCreateKeyEx(...) returned error code 5.\"", "{code}", "A quick Google search suggests that the only workaround is for an administrator to create that registry key and assign it user permissions.", "That's going to be a problem for server deployments.", "Adding in the fact that Java Serialization is pretty slow, the current implementation of the cache isn't looking like it's good enough for production right now.", "I'm thinking that I just need to bite the bullet and implement a custom file serialisation to $HOME/.pdfbox.cache.", "I'd tried to avoid that extra effort but it's clearly the right technical choice.", "Thoughts?", "I'd think that's the way to go.", "Apache FOP is doing the same I guess {{org.apache.fop.fonts}}.", "Would this work in a tomcat servlet with security restrictions?", "http://serverfault.com/questions/156759/where-to-write-files-form-a-web-application-running-on-tomcat-on-ubuntu", "http://tomcat.10.x6.nabble.com/Reading-and-writing-files-outside-tomcat-directory-td2161788.html", "and in an applet?", "I haven't looked at the detailed implementation of Apache FOP but they have font detection and caching for much longer than we have so it might be worth looking at how they do it.", "quickly looked it up.", "for a 'regular' app we can write to the users directory", "for containers we can write to System.getProperty(\"java.io.tmpdir\");", "if that's not possible for an applet we can create a temp file and look up it's path to get the directory we can write to.", "What's their reasoning for writing to /tmp?", "I understand the homedir approach; but I can't envision use cases in which writing to a tempdir is better than just keeping the cache in memory.", "That goes doubly for applets.", "My /tmp uses tmpfs so it costs RAM anyway; and like many /tmp directories, it's wiped every reboot.", "Moreover, reading from a predictable tempfile name is one step closer to a security vulnerability, since anybody can plant a file in /tmp.", "Obviously, writing to /tmp would make some invocations faster.", "But it wouldn't make them faster in a deterministic manner, and it might create a security vulnerabilty.", "As an end-user, I'd prefer a default `$HOME/.something`, configurable via system property.", "I agree, writing to writing to /tmp is probably not that useful, especially as on some systems each process is siloed into its own tmp subdir, which would prevent the cache from being shared or re-loaded.", "Containers are doomed anyway, as the entire point is that they're ephemeral so the cache won't be persisted between runs.", "{quote}", "As an end-user, I'd prefer a default `$HOME/.something`, configurable via system property.", "{quote}", "Yes.", "In their implementation they first try to establish the cache at the users home directory and then on java.io.tmpdir which may or may not be /tmp.", "Adding the capability to overwrite that using a system property would be a very good addition.", "{quote}", "which may or may not be /tmp", "{quote}", "It _could_ be a stable path, in which case the cache would work.", "So it's not predictable but still better than nothing.", "System property is also wise.", "Note that the current cache does not handle TTC files correctly, see PDFBOX-3014.", "The font metadata cache is now saved to a file using a simple custom format.", "This avoids problems with the Preferences API and restores TTC caching.", "It also avoids the slowness of Java's Serializable.", "An added benefit is that the font cache is now plain-text and can be read by a human, the format is simple, one font per line:", "{code}", "Arial-Black|TTF||384|805|2000009f|dfd70000|0|020b0a04020102020204|/Library/Fonts/Arial Black.ttf", "{code}", "By default the cache is written to {{user.home}}/{{.pdfbox.cache}}, but a custom path can be set using the system property {{pdfbox.fontcache}}.", "Could we also add {{System.getProperty(\"java.io.tmpdir\")}} if {{user.home}} is empty?", "Should deal with app servers."], "SplitGT": [" Saves the font metadata cache to disk."], "issueString": "FileSystemFontProvider cache instability\nFileSystemFontProvider uses Java's Preferences API to cache font metadata, however it doesn't seem to work out of the box on Windows (due to file permissions) and one user on the mailing list has complained that on Linux file paths with more than 80 characters can't be handed. Serializable is also slow.\n\nIt looks like Preferences wasn't a good choice here. We're going to need to roll our own cache file format and save it somewhere we have write access to.\nduplicate by [~adamhooper] in PDFBOX-3039:\n\nFileSystemFontProvider: java.lang.IllegalArgumentException: Key too long: /usr/local/share/fonts/chromeos/notofonts-20140815/NotoSansGujaratiUI-Regular.ttf\n\n{{FileSystemFontProvider}} calls {{Preferences.putByteArray()}}, which crashes if the key is longer than 80 characters.\n\nFont filenames are often longer than 80 characters.\n\nSo FileSystemFontProvider often crashes. This happens even if I try to use {{PDType1Font.HELVETICA}} ... meaning PDFBox can't read or write PDFs on my system.\nRe paths only - how about using an MD5 hash for the path?\nUse SHA1 hashes instead of full filenames\nAttached a patch that fixes the issue for me.\nPatch that compiles for Java 6\npatch for MD5 hash\nOops... you did the same. (I took MD5 because this isn't a security application)\nHehe, I take no offence. Really, I only wrote the patch so I could get on with my testing.\n\nI like the BigInteger trick :)\nhttp://stackoverflow.com/questions/415953/how-can-i-generate-an-md5-hash :-)\nYes, we could hash the path to make it shorter. But we're also seeing Windows users on the mailing list with this exception:\n\n{code}\n\"java.util.prefs.WindowsPreferences <init> - WARNING: Could not open/create prefs root node Software\\JavaSoft\\Prefs at root 0x80000002. Windows RegCreateKeyEx(...) returned error code 5.\"\n{code}\n\nA quick Google search suggests that the only workaround is for an administrator to create that registry key and assign it user permissions. That's going to be a problem for server deployments.\n\nAdding in the fact that Java Serialization is pretty slow, the current implementation of the cache isn't looking like it's good enough for production right now. I'm thinking that I just need to bite the bullet and implement a custom file serialisation to $HOME/.pdfbox.cache. I'd tried to avoid that extra effort but it's clearly the right technical choice. Thoughts?\nI'd think that's the way to go. Apache FOP is doing the same I guess {{org.apache.fop.fonts}}.\nWould this work in a tomcat servlet with security restrictions?\nhttp://serverfault.com/questions/156759/where-to-write-files-form-a-web-application-running-on-tomcat-on-ubuntu\nhttp://tomcat.10.x6.nabble.com/Reading-and-writing-files-outside-tomcat-directory-td2161788.html\n\nand in an applet?\nI haven't looked at the detailed implementation of Apache FOP but they have font detection and caching for much longer than we have so it might be worth looking at how they do it.\nquickly looked it up.\n\n- for a 'regular' app we can write to the users directory\n- for containers we can write to System.getProperty(\"java.io.tmpdir\");\n- if that's not possible for an applet we can create a temp file and look up it's path to get the directory we can write to.\nWhat's their reasoning for writing to /tmp? I understand the homedir approach; but I can't envision use cases in which writing to a tempdir is better than just keeping the cache in memory. That goes doubly for applets.\n\nMy /tmp uses tmpfs so it costs RAM anyway; and like many /tmp directories, it's wiped every reboot. Moreover, reading from a predictable tempfile name is one step closer to a security vulnerability, since anybody can plant a file in /tmp.\n\nObviously, writing to /tmp would make some invocations faster. But it wouldn't make them faster in a deterministic manner, and it might create a security vulnerabilty.\n\nAs an end-user, I'd prefer a default `$HOME/.something`, configurable via system property.\nI agree, writing to writing to /tmp is probably not that useful, especially as on some systems each process is siloed into its own tmp subdir, which would prevent the cache from being shared or re-loaded. Containers are doomed anyway, as the entire point is that they're ephemeral so the cache won't be persisted between runs.\n\n{quote}\nAs an end-user, I'd prefer a default `$HOME/.something`, configurable via system property.\n{quote}\n\nYes.\nIn their implementation they first try to establish the cache at the users home directory and then on java.io.tmpdir which may or may not be /tmp. Adding the capability to overwrite that using a system property would be a very good addition.\n{quote}\nwhich may or may not be /tmp\n{quote}\n\nIt _could_ be a stable path, in which case the cache would work. So it's not predictable but still better than nothing. System property is also wise.\nNote that the current cache does not handle TTC files correctly, see PDFBOX-3014.\nThe font metadata cache is now saved to a file using a simple custom format. This avoids problems with the Preferences API and restores TTC caching. It also avoids the slowness of Java's Serializable. An added benefit is that the font cache is now plain-text and can be read by a human, the format is simple, one font per line:\n\n{code}\nArial-Black|TTF||384|805|2000009f|dfd70000|0|020b0a04020102020204|/Library/Fonts/Arial Black.ttf\n{code}\n\nBy default the cache is written to {{user.home}}/{{.pdfbox.cache}}, but a custom path can be set using the system property {{pdfbox.fontcache}}.\nCould we also add {{System.getProperty(\"java.io.tmpdir\")}} if {{user.home}} is empty? Should deal with app servers.\n"}
{"aId": 62, "code": "public void setOpenInNewWindow(Boolean value)\n    {\n        if (value == null)\n        {\n            getCOSObject().removeItem(COSName.NEW_WINDOW);\n        }\n        else\n        {\n            getCOSObject().setBoolean(COSName.NEW_WINDOW, value);\n        }\n    }", "comment": " If this flag is false, the destination document will replace the current document in the same window.", "issueId": "PDFBOX-4117", "issueStringList": ["Implement GoToE action-type", "One of the major Action Types is not implemented in any version of PDFBox, and I believe it should be.", "I'm referring to \"Embedded Go-To Actions\" (defined under 12.6.4.4 in PDF 32000-1:2008), which allows a link to open an attached file.", "Currently, such \"GoToE\" actions are interpreted as \"null\" by PDFBox, which is not ideal.", "Added a sample file with a GoToE link on the first page, for testing purposes.", "[~giladd] can you test whatever you want to do with the trunk?", "Is the API what you had in mind?", "It has all except /P and /A of the target directory.", "Wow, thanks a lot for the quick turnaround, Tilman!", "Is it available in any current snapshot I can download and integrate into my project?", "https://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/3.0.0-SNAPSHOT/", "Seems to be working great!", "Any chance of implementing it in the older versions as well?", "One thing that might be missing is the option to remove the NewWindow COS-key, so that it defaults to the preference set in the application.", "Here's the description in the ISO:", "{noformat}", "NewWindow \u2013 boolean", "\u2013 (Optional) If true, the destination document should be opened in a new window; if false, the destination document should replace the current document in the same window.", "If this entry is absent, the conforming reader should act according to its preference.", "{noformat}", "Yes this will be added a 2.", "* version.", "I just want to be sure that it is good to use because I wouldn't be able to change the 2.", "* API after release.", "Re the NewWindow, would it help you if I return & set not a boolean, but a Boolean?", "(Not sure if I will really do it, I suspect that it is a bad practice)", "I thought about that.", "The question is whether assigning null to it will have the same effect (in Acrobat) as removing it entirely.", "It can be tested, I'm sure.", "What I mean is that the parameter/result would be a (boxed) Boolean.", "If that is null in the setter, I would remove the item.", "In the getter, I would return null if the entry is missing.", "Ah, I see.", "Sounds good to me!", "Done; please test the snapshot again and give feedback.", "Note that target directory /P and /A are not yet implemented."], "SplitGT": [" If this flag is false, the destination document will replace the current document in the same window."], "issueString": "Implement GoToE action-type\nOne of the major Action Types is not implemented in any version of PDFBox, and I believe it should be. I'm referring to \"Embedded Go-To Actions\" (defined under 12.6.4.4 in PDF 32000-1:2008), which allows a link to open an attached file. Currently, such \"GoToE\" actions are interpreted as \"null\" by PDFBox, which is not ideal.\nAdded a sample file with a GoToE link on the first page, for testing purposes.\n[~giladd] can you test whatever you want to do with the trunk? Is the API what you had in mind? It has all except /P and /A of the target directory.\nWow, thanks a lot for the quick turnaround, Tilman!\r\n\r\nIs it available in any current snapshot I can download and integrate into my project?\nhttps://repository.apache.org/content/groups/snapshots/org/apache/pdfbox/pdfbox-app/3.0.0-SNAPSHOT/\nSeems to be working great! Any chance of implementing it in the older versions as well?\nOne thing that might be missing is the option to remove the NewWindow COS-key, so that it defaults to the preference set in the application.\r\n\r\nHere's the description in the ISO:\r\n{noformat}\r\nNewWindow \u2013 boolean \r\n\u2013 (Optional) If true, the destination document should be opened in a new window; if false, the destination document should replace the current document in the same window. If this entry is absent, the conforming reader should act according to its preference.{noformat}\nYes this will be added a 2.* version. I just want to be sure that it is good to use because I wouldn't be able to change the 2.* API after release.\r\n\r\nRe the NewWindow, would it help you if I return & set not a boolean, but a Boolean? (Not sure if I will really do it, I suspect that it is a bad practice)\nI thought about that. The question is whether assigning null to it will have the same effect (in Acrobat) as removing it entirely. It can be tested, I'm sure.\nWhat I mean is that the parameter/result would be a (boxed) Boolean. If that is null in the setter, I would remove the item. In the getter, I would return null if the entry is missing.\nAh, I see. Sounds good to me!\nDone; please test the snapshot again and give feedback. Note that target directory /P and /A are not yet implemented.\n"}
{"aId": 64, "code": "private int checkForMissingCloseParen(final int bracesParameter) throws IOException {\n\t\tint braces=bracesParameter;\n\t    byte[] nextThreeBytes = new byte[3];\n\t    int amountRead = pdfSource.read(nextThreeBytes);\n\t\n\t    //lets handle the special case seen in Bull  River Rules and Regulations.pdf\n\t    //The dictionary looks like this\n\t    //    2 0 obj\n\t    //    <<\n\t    //        /Type /Info\n\t    //        /Creator (PaperPort http://www.scansoft.com)\n\t    //        /Producer (sspdflib 1.0 http://www.scansoft.com)\n\t    //        /Title ( (5)\n\t    //        /Author ()\n\t    //        /Subject ()\n\t    //\n\t    // Notice the /Title, the braces are not even but they should\n\t    // be.  So lets assume that if we encounter an this scenario\n\t    //   <end_brace><new_line><opening_slash> then that\n\t    // means that there is an error in the pdf and assume that\n\t    // was the end of the document.\n\t    //\n\t    if( amountRead == 3 )\n\t    {\n\t        if(( nextThreeBytes[0] == 0x0d &&  // Look for a carriage return\n\t             nextThreeBytes[1] == 0x0a &&  // Look for a new line\n\t             nextThreeBytes[2] == 0x2f ) || // Look for a slash / \n\t                                           // Add a second case without a new line\n\t            (nextThreeBytes[0] == 0x0d &&  // Look for a carriage return\n\t             nextThreeBytes[1] == 0x2f ))  // Look for a slash /\n\t        {\n\t            braces = 0;\n\t        }\n\t    }\n\t    if (amountRead > 0) \n        {\n            pdfSource.unread( nextThreeBytes, 0, amountRead );\n        }\n\t    return braces;\n\t}", "comment": " This is really a bug in the Document creators code, but it caused a crash in PDFBox, the first bug was in this format: /Title ( (5) /Creator which was patched in 1 place. However it missed the case where the Close Paren was escaped The second bug was in this format /Title (c:\\) /Producer This patch moves this code out of the parseCOSString method, so it can be used twice.", "issueId": "PDFBOX-276", "issueStringList": ["IOException on parsing a PDF file", "[imported from SourceForge]", "http://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1722594", "Originally submitted by doublep-enw on 2007-05-21 05:10.", "When parsing the attached file, PDFBox throws the following exception:", "java.io.IOException: expected='/' actual='?'", "--1 org.pdfbox.io.PushBackInputStream@159f498", "at org.pdfbox.pdfparser.BaseParser.parseCOSName(BaseParser.java:774)", "at org.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:217)", "at org.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:910)", "at org.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:432)", "at org.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:176)", "The file does look strange inside, but PDF viewers don't seem to care.", "[attachment on SourceForge]", "http://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1722594&file_id=229983", "NotIndexedDocument.pdf (application/pdf), 8728 bytes", "unparseable file", "Attached the file from sf so that it can't get lost", "The current trunk version produces an other error:", "05.12.2009 15:49:53 org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary", "WARNUNG: Invalid dictionary, found:\ufffd\ufffd\ufffd but expected:''", "Exception in thread \"main\" java.lang.NullPointerException", "at org.apache.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:180)", "at org.apache.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:168)", "at org.apache.pdfbox.pdmodel.PDDocumentCatalog.getAllPages(PDDocumentCatalog.java:212)", "at org.apache.pdfbox.PDFReader.openPDFFile(PDFReader.java:287)", "at org.apache.pdfbox.PDFReader.main(PDFReader.java:270)", "This describe a fix to the file: org.apache.pdfbox.pdfparser.BaseParser.java", "I did not debug this in the trunk version, I have code from a few months ago.", "I debugged this problem, because I was hitting the same issue with a document I had.", "The issue is not with PDFBox incorrectly parsing the document.", "The real problem is the document creator", "Amyuni PDF Converter Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245", "incorrectly generated the name in the Title.", "The name was generated as  (c:\\)", "However the PDF specification states that the backslash PARENTHESIS   \"\\)\" is used to create the string literal character ')\" within a string literal.", "The String is required to have an open parentheses and a close parentheses", "However because the \\ eats the close parentheses, PDF box cannot find the correct closing character,", "it goes and eats several lines until it reaches the end of file.", "I opened this document with the Adobe Reader,", "I looked in", "File -> Properties", "Adobe reader cannot identify the title or the other attributes either, however it does not crash when reading the document.", "The documentation for the behavior is described in http://www.adobe.com/devnet/acrobat/pdfs/PDF32000_2008.pdf", "7.3.4.2 Literal Strings of the PDF Specification.", "(This is a string)", "This is how to escape a PARENTHESIS within a string.    \"", "\\)  RIGHT PARENTHESIS (29h) \"", "The document contains this syntax \" /Title (c:\\) \" which incorrectly fails to encode the backslash character", "The correct encoding should be   \" /Title (c:\\\\) \"", "Here is the text from the PDF file that was attached to this bug.", "Title (c:\\)", "Producer (Amyuni PDF Converter)", "Version (Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245)", "CreationDate (1/8/2003 12:18:53)", "I don't think this can be fixed without compromising the content of the document.", "We could just discard the information  the way Adobe PDF Reader does when we reach the >> or \"endobj\" line", "However, I came up with a work around.", "<<", "Title (c:\\)", "Producer (Amyuni PDF Converter)", "Version (Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245)", "CreationDate (1/8/2003 12:18:53)", ">>", "endobj", "Looking at the code in more depth, there seems to be another patch for a similar issue.", "In this case another vendor made a similar mistake in the title generation.", "In the file, org.apache.pdfbox.pdfparser.BaseParser.java", "lets handle the special case seen in Bull  River Rules and Regulations.pdf", "The dictionary looks like this", "2 0 obj", "<<", "/Type /Info", "/Creator (PaperPort http://www.scansoft.com)", "/Producer (sspdflib 1.0 http://www.scansoft.com)", "/Title ( (5)", "/Author ()", "/Subject ()", "I noticed this a little later and realized that I needed the same code in a different place,", "So I clipped it and made it into a method, which is now called from 2 places.", "================================ Change 1", "This is really a bug in the Document creators code, but it caused a crash", "in PDFBox, the first bug was in this format:", "Title ( (5)", "Creator which was patched in 1 place.", "However it missed the case where the Close Paren was escaped", "The second bug was in this format", "Title (c:\\)", "Producer", "This patch  moves this code out of the parseCOSString method, so it can be used twice.", "@param bracesParameter the number of braces currently open.", "@return the corrected value of the brace counter", "@throws IOException", "private int checkForMissingCloseParen(final int bracesParameter) throws IOException {", "int braces=bracesParameter-1;", "byte[] nextThreeBytes = new byte[3];", "int amountRead = pdfSource.read(nextThreeBytes);", "lets handle the special case seen in Bull  River Rules and Regulations.pdf", "The dictionary looks like this", "2 0 obj", "<<", "/Type /Info", "/Creator (PaperPort http://www.scansoft.com)", "/Producer (sspdflib 1.0 http://www.scansoft.com)", "/Title ( (5)", "/Author ()", "/Subject ()", "Notice the /Title, the braces are not even but they should", "be.", "So lets assume that if we encounter an this scenario", "<end_brace><new_line><opening_slash> then that", "means that there is an error in the pdf and assume that", "was the end of the document.", "if( amountRead == 3 )", "{", "if( nextThreeBytes[0] == 0x0d &&", "nextThreeBytes[1] == 0x0a &&", "nextThreeBytes[2] == 0x2f )", "{", "braces = 0;", "}", "}", "pdfSource.unread( nextThreeBytes, 0, amountRead );", "return braces;", "}", "=================================End of Change 1", "Now in the method where it was originally defined, I removed the code and called the new method.", "=============================== Change 2", "if(ch == closeBrace)", "{", "braces=checkForMissingCloseParen(braces);", "if( braces != 0 )", "{", "retval.append( ch );", "}", "==============================End of Change 2", "Then where there was a test for a \\( I added another method call to check for the same case.", "============================== Change 3", "case ')':", "PDFBox 276 /Title (c:\\)", "braces=checkForMissingCloseParen(braces);", "if( braces != 0 )", "{", "retval.append( ch );", "}", "else {", "retval.append('\\\\');", "}", "break;", "case '(':", "case '\\\\':", "retval.append( next );", "break;", "================================ End of Change 3.", "Peter Lenahan", "This is a version of the file  from the fall I didn't update my code to the code from the trunk version.", "But it seems to fix the problem I described above.", "Peter", "I forgot to remove the debugging code from the first version which I uploaded,", "This just contains the fixes, the extra print statements have been removed.", "Peter Lenahan,", "I updated my code to the \"Trunk version\", and ran it in the debugger.", "The Eclipse expression window correctly displays the values in the document.", "Peter Lenahan", "COSDictionary{(COSName{Title}:COSString{c:\\}) (COSName{Producer}:COSString{Amyuni PDF Converter}) (COSName{Version}:COSString{Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245}) (COSName{CreationDate}:COSString{1/8/2003 12:18:53}) }", "<<", "Title (c:\\)", "Producer (Amyuni PDF Converter)", "Version (Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245)", "CreationDate (1/8/2003 12:18:53)", ">>", "endobj", "Andreas,", "I checked out the Trunk version, applied the changes needed to make it work, and tested it with the file", "that was in the project.", "There was another small change that I needed to make to get it to compile in Eclipse.", "For some reason eclipse  didn't like new String( int ) So I shoved an empty string in 4 places.", "This was not to fix the bug, this was to get it to compile in my version of Eclipse.", "String falseString = new String( pdfSource.readFully(5) );", "+            String falseString = new String( pdfSource.readFully(5)+\"\" );", "I also replace the BaseParser.java file with the version I tested with.", "Peter", "Another attempt at fixing this issue", "I realized that I goofed with the earlier patch, after I built the entire project from the trunk version.", "I didn't realize that   ( Carriage Return Newline slash) \" 0d 0a / \" may sometimes omit the 0a new line", "I added another test to check for this case.", "Would you give it another try?", "Thanks,", "Peter", "The second try was even better.", ":-) I've applied the pathc with version 939013.", "Thanks to Peter for the contribution"], "SplitGT": [" This is really a bug in the Document creators code, but it caused a crash in PDFBox, the first bug was in this format: /Title ( (5) /Creator which was patched in 1 place.", "However it missed the case where the Close Paren was escaped The second bug was in this format /Title (c:\\) /Producer This patch moves this code out of the parseCOSString method, so it can be used twice."], "issueString": "IOException on parsing a PDF file\n[imported from SourceForge]\nhttp://sourceforge.net/tracker/index.php?group_id=78314&atid=552832&aid=1722594\nOriginally submitted by doublep-enw on 2007-05-21 05:10.\n\nWhen parsing the attached file, PDFBox throws the following exception:\n\njava.io.IOException: expected='/' actual='?'--1 org.pdfbox.io.PushBackInputStream@159f498\n    at org.pdfbox.pdfparser.BaseParser.parseCOSName(BaseParser.java:774)\n    at org.pdfbox.pdfparser.BaseParser.parseCOSDictionary(BaseParser.java:217)\n    at org.pdfbox.pdfparser.BaseParser.parseDirObject(BaseParser.java:910)\n    at org.pdfbox.pdfparser.PDFParser.parseObject(PDFParser.java:432)\n    at org.pdfbox.pdfparser.PDFParser.parse(PDFParser.java:176)\n\nThe file does look strange inside, but PDF viewers don't seem to care.\n\n[attachment on SourceForge]\nhttp://sourceforge.net/tracker/download.php?group_id=78314&atid=552832&aid=1722594&file_id=229983\nNotIndexedDocument.pdf (application/pdf), 8728 bytes\nunparseable file\nAttached the file from sf so that it can't get lost\nThe current trunk version produces an other error:\n\n05.12.2009 15:49:53 org.apache.pdfbox.pdfparser.BaseParser parseCOSDictionary\nWARNUNG: Invalid dictionary, found:\ufffd\ufffd\ufffd but expected:''\nException in thread \"main\" java.lang.NullPointerException\n\tat org.apache.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:180)\n\tat org.apache.pdfbox.pdmodel.PDPageNode.getAllKids(PDPageNode.java:168)\n\tat org.apache.pdfbox.pdmodel.PDDocumentCatalog.getAllPages(PDDocumentCatalog.java:212)\n\tat org.apache.pdfbox.PDFReader.openPDFFile(PDFReader.java:287)\n\tat org.apache.pdfbox.PDFReader.main(PDFReader.java:270)\n\nThis describe a fix to the file: org.apache.pdfbox.pdfparser.BaseParser.java\nI did not debug this in the trunk version, I have code from a few months ago.\n\n\nI debugged this problem, because I was hitting the same issue with a document I had.\nThe issue is not with PDFBox incorrectly parsing the document. \nThe real problem is the document creator \n        Amyuni PDF Converter Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245\nincorrectly generated the name in the Title. \nThe name was generated as  (c:\\)\nHowever the PDF specification states that the backslash PARENTHESIS   \"\\)\" is used to create the string literal character ')\" within a string literal.\nThe String is required to have an open parentheses and a close parentheses\nHowever because the \\ eats the close parentheses, PDF box cannot find the correct closing character,\nit goes and eats several lines until it reaches the end of file.\nI opened this document with the Adobe Reader, \nI looked in \n       File -> Properties\nAdobe reader cannot identify the title or the other attributes either, however it does not crash when reading the document.\n\n\nThe documentation for the behavior is described in http://www.adobe.com/devnet/acrobat/pdfs/PDF32000_2008.pdf\n7.3.4.2 Literal Strings of the PDF Specification.\n\n\n(This is a string) \nThis is how to escape a PARENTHESIS within a string.    \" \\)  RIGHT PARENTHESIS (29h) \"\n\nThe document contains this syntax \" /Title (c:\\) \" which incorrectly fails to encode the backslash character \nThe correct encoding should be   \" /Title (c:\\\\) \" \n\n\nHere is the text from the PDF file that was attached to this bug.\n\n/Title (c:\\)\n/Producer (Amyuni PDF Converter)\n/Version (Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245)\n/CreationDate (1/8/2003 12:18:53)\n\nI don't think this can be fixed without compromising the content of the document.\nWe could just discard the information  the way Adobe PDF Reader does when we reach the >> or \"endobj\" line\nHowever, I came up with a work around.\n\n<<\n/Title (c:\\)\n/Producer (Amyuni PDF Converter)\n/Version (Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245)\n/CreationDate (1/8/2003 12:18:53)\n>>\nendobj\n\n\nLooking at the code in more depth, there seems to be another patch for a similar issue.\nIn this case another vendor made a similar mistake in the title generation.\n\nIn the file, org.apache.pdfbox.pdfparser.BaseParser.java\n\n                //lets handle the special case seen in Bull  River Rules and Regulations.pdf\n                //The dictionary looks like this\n                //    2 0 obj\n                //    <<\n                //        /Type /Info\n                //        /Creator (PaperPort http://www.scansoft.com)\n                //        /Producer (sspdflib 1.0 http://www.scansoft.com)\n                //        /Title ( (5)\n                //        /Author ()\n                //        /Subject ()\n\n\nI noticed this a little later and realized that I needed the same code in a different place,\n\nSo I clipped it and made it into a method, which is now called from 2 places.\n\n\n//================================ Change 1\n\n    /**\n     * This is really a bug in the Document creators code, but it caused a crash\n     * in PDFBox, the first bug was in this format:\n     * /Title ( (5)\n     * /Creator which was patched in 1 place.\n     * However it missed the case where the Close Paren was escaped\n     * \n     * The second bug was in this format \n     * /Title (c:\\)\n     * /Producer \n     * \n     * This patch  moves this code out of the parseCOSString method, so it can be used twice.\n     * \n     * \n     * @param bracesParameter the number of braces currently open.\n     * \n     * @return the corrected value of the brace counter\n     * @throws IOException\n     */\n\tprivate int checkForMissingCloseParen(final int bracesParameter) throws IOException {\n\t\tint braces=bracesParameter-1;\n\t    byte[] nextThreeBytes = new byte[3];\n\t    int amountRead = pdfSource.read(nextThreeBytes);\n\t\n\t    //lets handle the special case seen in Bull  River Rules and Regulations.pdf\n\t    //The dictionary looks like this\n\t    //    2 0 obj\n\t    //    <<\n\t    //        /Type /Info\n\t    //        /Creator (PaperPort http://www.scansoft.com)\n\t    //        /Producer (sspdflib 1.0 http://www.scansoft.com)\n\t    //        /Title ( (5)\n\t    //        /Author ()\n\t    //        /Subject ()\n\t    //\n\t    // Notice the /Title, the braces are not even but they should\n\t    // be.  So lets assume that if we encounter an this scenario\n\t    //   <end_brace><new_line><opening_slash> then that\n\t    // means that there is an error in the pdf and assume that\n\t    // was the end of the document.\n\t    if( amountRead == 3 )\n\t    {\n\t        if( nextThreeBytes[0] == 0x0d &&\n\t            nextThreeBytes[1] == 0x0a &&\n\t            nextThreeBytes[2] == 0x2f )\n\t        {\n\t            braces = 0;\n\t        }\n\t    }\n\t    pdfSource.unread( nextThreeBytes, 0, amountRead );\n\t    return braces;\n\t}\n// =================================End of Change 1\n\n\n\nNow in the method where it was originally defined, I removed the code and called the new method.\n=============================== Change 2 \n\n            if(ch == closeBrace)\n            {\n            \tbraces=checkForMissingCloseParen(braces);\n                if( braces != 0 )\n                {\n                    retval.append( ch );\n                }\n\n==============================End of Change 2\n\nThen where there was a test for a \\( I added another method call to check for the same case.\n\n\n============================== Change 3\n\n                    case ')':\n                    \t// PDFBox 276 /Title (c:\\)\n                    \tbraces=checkForMissingCloseParen(braces);\n                        if( braces != 0 )\n                        {\n                            retval.append( ch );\n                        }\n                        else {\n                        \tretval.append('\\\\');\n                        }\n                        break;\n                    case '(':\n                    case '\\\\':\n                        retval.append( next );\n                        break;\n \n\n\n================================ End of Change 3.\n\n\nPeter Lenahan\n\nThis is a version of the file  from the fall I didn't update my code to the code from the trunk version.\nBut it seems to fix the problem I described above.\n\nPeter\n\n\nI forgot to remove the debugging code from the first version which I uploaded,\nThis just contains the fixes, the extra print statements have been removed.\n\nPeter Lenahan,\nI updated my code to the \"Trunk version\", and ran it in the debugger.\nThe Eclipse expression window correctly displays the values in the document.\n\nPeter Lenahan\n\n\n\nCOSDictionary{(COSName{Title}:COSString{c:\\}) (COSName{Producer}:COSString{Amyuni PDF Converter}) (COSName{Version}:COSString{Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245}) (COSName{CreationDate}:COSString{1/8/2003 12:18:53}) }\n\n<<\n/Title (c:\\)\n/Producer (Amyuni PDF Converter)\n/Version (Version 1.58 - Developer Licence N\u00b0 9B7449F2-8245)\n/CreationDate (1/8/2003 12:18:53)\n>>\nendobj\n\nAndreas,\n\nI checked out the Trunk version, applied the changes needed to make it work, and tested it with the file\nthat was in the project.\n\nThere was another small change that I needed to make to get it to compile in Eclipse.\n\nFor some reason eclipse  didn't like new String( int ) So I shoved an empty string in 4 places.\nThis was not to fix the bug, this was to get it to compile in my version of Eclipse.\n\n-            String falseString = new String( pdfSource.readFully(5) );\n+            String falseString = new String( pdfSource.readFully(5)+\"\" );\n\nI also replace the BaseParser.java file with the version I tested with.\n\nPeter\nAnother attempt at fixing this issue\nI realized that I goofed with the earlier patch, after I built the entire project from the trunk version.\n\nI didn't realize that   ( Carriage Return Newline slash) \" 0d 0a / \" may sometimes omit the 0a new line\nI added another test to check for this case.\n\nWould you give it another try?\n\nThanks,\nPeter\n\nThe second try was even better. :-) I've applied the pathc with version 939013.\n\nThanks to Peter for the contribution\n"}
{"aId": 67, "code": "private int repairLength2(byte[] bytes, int length1, int length2)\n    {\n        // repair Length2 if necessary\n        if (length2 < 0 || length2 > bytes.length - length1)\n        {\n            LOG.warn(\"Ignored invalid Length2 \" + length2 + \" for Type 1 font \" + getName());\n            length2 = bytes.length - length1;\n        }\n        return length2;\n    }", "comment": " A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange, a huge value eats up memory because of padding.", "issueId": "PDFBOX-3475", "issueStringList": ["IllegalArgumentException: 2058 > -49861164 in PDType1Font.java", "{code}", "java.lang.IllegalArgumentException: 2058 > -49861164", "java.util.Arrays.copyOfRange(Unknown Source)", "org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:223)", "org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)", "{code}", "This is because the /Fontfile /Length2 values are bogus.", "A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding.", "So I'm doing a repair for the /Length2 as well."], "SplitGT": [" A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange, a huge value eats up memory because of padding."], "issueString": "IllegalArgumentException: 2058 > -49861164 in PDType1Font.java\n{code}\njava.lang.IllegalArgumentException: 2058 > -49861164\n    java.util.Arrays.copyOfRange(Unknown Source)\n    org.apache.pdfbox.pdmodel.font.PDType1Font.<init>(PDType1Font.java:223)\n    org.apache.pdfbox.pdmodel.font.PDFontFactory.createFont(PDFontFactory.java:62)\n{code}\nThis is because the /Fontfile /Length2 values are bogus. A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding. So I'm doing a repair for the /Length2 as well.\n"}
{"aId": 70, "code": "private boolean shallComb()\n    {\n        return field instanceof PDTextField &&\n                ((PDTextField) field).isComb() &&\n                !((PDTextField) field).isMultiline() &&\n                !((PDTextField) field).isPassword() &&\n                !((PDTextField) field).isFileSelect();           \n    }", "comment": " May be set only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs.", "issueId": "PDFBOX-2863", "issueStringList": ["Support the comb flag for PDF forms", "Support the comb flag for PDF forms:", "{quote}May be set only if the MaxLen entry is present in the text field dictionary (see Table 229) and if the Multiline, Password, and FileSelect flags are clear.", "If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs.", "{quote}", "Attached file shows the effect as it is now by setting \"IBAN Antragsteller\" with \"12345678901234567890\".", "[~tilman] the code is available in 1.8.9 but hasn't been brought over.", "With the latests changes it will be a little more work as single line fields are now also handled like multilines.", "I can look adding that in if you are not.", "It isn't for me, I just suspect that Roberto needs it based on mails I exchanged with him last night.", "Comb box as created with revision r1690050", "Thanks!"], "SplitGT": [" May be set only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect flags are clear.", "If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs."], "issueString": "Support the comb flag for PDF forms\nSupport the comb flag for PDF forms:\n{quote}May be set only if the MaxLen entry is present in the text field dictionary (see Table 229) and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs.{quote}\nAttached file shows the effect as it is now by setting \"IBAN Antragsteller\" with \"12345678901234567890\".\n[~tilman] the code is available in 1.8.9 but hasn't been brought over. With the latests changes it will be a little more work as single line fields are now also handled like multilines. I can look adding that in if you are not.\nIt isn't for me, I just suspect that Roberto needs it based on mails I exchanged with him last night.\nComb box as created with revision r1690050\nThanks!\n"}
{"aId": 76, "code": "public void removeV45filters()\n    {\n        dictionary.setItem(COSName.CF, null);\n        dictionary.setItem(COSName.STM_F, null);\n        dictionary.setItem(COSName.STR_F, null);\n    }", "comment": " remove CF, StmF, and StrF entries. This is to be called if V is not 4 or 5.", "issueId": "PDFBOX-2781", "issueStringList": ["Opening pdf document after encrypting it with PDFBox throws IllegalBlockSizeException", "I'm trying to encrypt pdf document as per [1] like this:", "{code:java}", "PDDocument doc = PDDocument.loadNonSeq(getClass().getResourceAsStream(\"/testform_protected.pdf\"), null);", "int keyLength = 128; // 40 or 128; 256 will be available in version 2.0", "AccessPermission ap = doc.getCurrentAccessPermission();", "StandardProtectionPolicy spp = new StandardProtectionPolicy(\"12345\", \"\", ap);", "spp.setEncryptionKeyLength(keyLength);", "spp.setPermissions(ap);", "doc.protect(spp);", "File outFile = new File(\"./target/testform_saved.pdf\");", "doc.save(outFile);", "doc.close();", "PDDocument loaded = PDDocument.loadNonSeq(outFile, null);", "{code}", "It works fine but opening the encrypted document with PDFBox (last line of above code) throws:", "{noformat}", "org.apache.pdfbox.exceptions.WrappedIOException", "at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:371)", "at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptString(SecurityHandler.java:577)", "at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decryptString(NonSequentialPDFParser.java:1571)", "at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decryptDictionary(NonSequentialPDFParser.java:1535)", "at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decrypt(NonSequentialPDFParser.java:1596)", "at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1460)", "at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1343)", "at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:383)", "at org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:886)", "at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1273)", "at org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1256)", "at com.remion.bronto.proex.pdf.PDFBoxEncryptionTest.testEncryptDecrypt(PDFBoxEncryptionTest.java:30)", "at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)", "at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)", "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)", "at java.lang.reflect.Method.invoke(Method.java:606)", "at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)", "at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)", "at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)", "at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)", "at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)", "at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)", "at org.testng.TestRunner.privateRun(TestRunner.java:767)", "at org.testng.TestRunner.run(TestRunner.java:617)", "at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)", "at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)", "at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)", "at org.testng.SuiteRunner.run(SuiteRunner.java:240)", "at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)", "at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)", "at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)", "at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)", "at org.testng.TestNG.run(TestNG.java:1057)", "at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)", "at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)", "at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)", "Caused by: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher", "at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:750)", "at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)", "at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:313)", "at javax.crypto.Cipher.doFinal(Cipher.java:1970)", "at org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:351)", "... 35 more", "{noformat}", "Opening the saved document with Acrobat works fine.", "[1] http://pdfbox.apache.org/1.8/cookbook/encryption.html", "the PDF file used in the test", "You have encovered two bugs, which have popped up because you re-encrypted a file that was already encrypted, and in a different strength.", "1) You encrypted the file with a non-AES method, but the encryption dictionary keeps old values that point to AES.", "From the spec about V = 4 or 5:", "{quote}", "The security handler defines the use of encryption and decryption in the document, using the rules specified by the CF, StmF, and StrF entries.", "{quote}", "It also tells this about the CF, StmF, and StrF entries:", "{quote}", "meaningful only when the value of V is 4 or 5", "{quote}", "By itself, this is harmless, but not useful.", "So we need to remove the CF, StmF, and StrF entries if V is not 4 or 5.", "2) The file is then decrypted with AES, despite that it wasn't encrypted with AES, and this fails.", "This happens because it finds \"AESV2\" from the previous encryption.", "It shouldn't have looked at that one at all, because your encryption has set V to be 2, so the CF dictionary should have been ignored anyway.", "So we MUST ignore the CF, StmF, and StrF entries if V is not 4 or 5."], "SplitGT": [" remove CF, StmF, and StrF entries.", "This is to be called if V is not 4 or 5."], "issueString": "Opening pdf document after encrypting it with PDFBox throws IllegalBlockSizeException\nI'm trying to encrypt pdf document as per [1] like this:\n{code:java}\nPDDocument doc = PDDocument.loadNonSeq(getClass().getResourceAsStream(\"/testform_protected.pdf\"), null);\n\nint keyLength = 128; // 40 or 128; 256 will be available in version 2.0\nAccessPermission ap = doc.getCurrentAccessPermission();\n\nStandardProtectionPolicy spp = new StandardProtectionPolicy(\"12345\", \"\", ap);\nspp.setEncryptionKeyLength(keyLength);\nspp.setPermissions(ap);\ndoc.protect(spp);\n\nFile outFile = new File(\"./target/testform_saved.pdf\");\n\ndoc.save(outFile);\ndoc.close();\n\nPDDocument loaded = PDDocument.loadNonSeq(outFile, null);\n{code}\n\nIt works fine but opening the encrypted document with PDFBox (last line of above code) throws:\n{noformat}\norg.apache.pdfbox.exceptions.WrappedIOException\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:371)\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptString(SecurityHandler.java:577)\n\tat org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decryptString(NonSequentialPDFParser.java:1571)\n\tat org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decryptDictionary(NonSequentialPDFParser.java:1535)\n\tat org.apache.pdfbox.pdfparser.NonSequentialPDFParser.decrypt(NonSequentialPDFParser.java:1596)\n\tat org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1460)\n\tat org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parseObjectDynamically(NonSequentialPDFParser.java:1343)\n\tat org.apache.pdfbox.pdfparser.NonSequentialPDFParser.initialParse(NonSequentialPDFParser.java:383)\n\tat org.apache.pdfbox.pdfparser.NonSequentialPDFParser.parse(NonSequentialPDFParser.java:886)\n\tat org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1273)\n\tat org.apache.pdfbox.pdmodel.PDDocument.loadNonSeq(PDDocument.java:1256)\n\tat com.remion.bronto.proex.pdf.PDFBoxEncryptionTest.testEncryptDecrypt(PDFBoxEncryptionTest.java:30)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:714)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:767)\n\tat org.testng.TestRunner.run(TestRunner.java:617)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:334)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:240)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1149)\n\tat org.testng.TestNG.run(TestNG.java:1057)\n\tat org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)\n\tat org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)\n\tat org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)\nCaused by: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher\n\tat com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:750)\n\tat com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)\n\tat com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:313)\n\tat javax.crypto.Cipher.doFinal(Cipher.java:1970)\n\tat org.apache.pdfbox.pdmodel.encryption.SecurityHandler.encryptData(SecurityHandler.java:351)\n\t... 35 more\n{noformat}\n\nOpening the saved document with Acrobat works fine.\n\n[1] http://pdfbox.apache.org/1.8/cookbook/encryption.html\nthe PDF file used in the test\nYou have encovered two bugs, which have popped up because you re-encrypted a file that was already encrypted, and in a different strength.\n\n1) You encrypted the file with a non-AES method, but the encryption dictionary keeps old values that point to AES. From the spec about V = 4 or 5:\n{quote}\nThe security handler defines the use of encryption and decryption in the document, using the rules specified by the CF, StmF, and StrF entries.\n{quote}\nIt also tells this about the CF, StmF, and StrF entries:\n{quote}\nmeaningful only when the value of V is 4 or 5\n{quote}\nBy itself, this is harmless, but not useful. So we need to remove the CF, StmF, and StrF entries if V is not 4 or 5.\n\n2) The file is then decrypted with AES, despite that it wasn't encrypted with AES, and this fails. This happens because it finds \"AESV2\" from the previous encryption. It shouldn't have looked at that one at all, because your encryption has set V to be 2, so the CF dictionary should have been ignored anyway.\n\nSo we MUST ignore the CF, StmF, and StrF entries if V is not 4 or 5.\n"}
{"aId": 83, "code": "public CodespaceRange(byte[] startBytes, byte[] endBytes)\n    {\n        if (startBytes.length != endBytes.length)\n        {\n            throw new IllegalArgumentException(\n                    \"The start and the end values must not have different lengths.\");\n        }\n        start = new int[startBytes.length];\n        end = new int[endBytes.length];\n        for (int i = 0; i < startBytes.length; i++)\n        {\n            start[i] = startBytes[i] & 0xFF;\n            end[i] = endBytes[i] & 0xFF;\n        }\n        codeLength = endBytes.length;\n    }", "comment": " Double byte values define a rectangular range not a linear range. Examples: <br> <00> <20> defines a linear range from 0x00 up to 0x20.<br> <8140> to <9FFC> defines a rectangular range. The high byte has to be within 0x81 and 0x9F and the low byte has to be within 0x40 and 0xFC", "issueId": "PDFBOX-4810", "issueStringList": ["Improve CodespaceRange to be in line with the spec", "While working on PDFBOX-4749 I've realized that the implementation of a CodespaceRange from a CMap isn't correct.", "For one byte ranges startBytes and endBytes define a linear range of values.", "Double byte values define a rectangular range +not+ a linear range.", "Examples:", "<00> <20> defines a linear range from 0x00 up to 0x20", "<8140> to <9FFC> defines a rectangular range.", "The high byte has to be within 0x81 and 0x9F and the low byte has to be within 0x40 and 0xFC.", "The old implementation assumes the codespacerange ranges from <8140> to <9FFC>", "Wow, good find.", "Small problem: the \"<\" and \">\" in the javadoc needs to be replaced with \"& l t ;\" and \"& g t ;\".", "[~tilman] Thanks for the hint!", "Should be fixed"], "SplitGT": [" Double byte values define a rectangular range not a linear range.", "Examples: <br> <00> <20> defines a linear range from 0x00 up to 0x20.<br> <8140> to <9FFC> defines a rectangular range.", "The high byte has to be within 0x81 and 0x9F and the low byte has to be within 0x40 and 0xFC"], "issueString": "Improve CodespaceRange to be in line with the spec\nWhile working on PDFBOX-4749 I've realized that the implementation of a CodespaceRange from a CMap isn't correct.\r\n\r\nFor one byte ranges startBytes and endBytes define a linear range of values. Double byte values define a rectangular range +not+ a linear range. \r\nExamples:\r\n* <00> <20> defines a linear range from 0x00 up to 0x20\r\n* <8140> to <9FFC> defines a rectangular range. The high byte has to be within 0x81 and 0x9F and the low byte has to be within 0x40 and 0xFC. The old implementation assumes the codespacerange ranges from <8140> to <9FFC>\r\n\nWow, good find.\r\n\r\nSmall problem: the \"<\" and \">\" in the javadoc needs to be replaced with \"& l t ;\" and \"& g t ;\".\n[~tilman] Thanks for the hint! Should be fixed\n"}
{"aId": 84, "code": "public PDComplexFileSpecification( COSDictionary dict )\n    {\n        if (dict == null)\n        {\n            fs = new COSDictionary();\n            fs.setItem( COSName.TYPE, COSName.FILESPEC );\n        }\n        else\n        {\n            fs = dict;\n        }\n    }", "comment": " Creates empty COSDictionary if dict is null.", "issueId": "PDFBOX-1884", "issueStringList": ["Avoid NPE when encountering null PDComplexFileSpecification", "In some pdfs in the wild, PDComplexFileSpecification can be null.", "It would be great if we could skip those files that don't have any contents and not throw an NPE.", "Test file attached, unit tests and patch to follow.", "Patch with unit tests and test file attached.", "Place test file in: src/test/resources/org/apache/pdfbox/pdmodel, and you should be good to go.", "The strategy I chose for the fix was to initialize an empty COSDictionary if the dict that was passed in to PDComplexFileSpecification was null.", "A fix that would be truer to the underlying PDF objects would be to set the PDComplexFileSpecification = COSNull or null instead of building an object with a null dict, but that would require many more changes throughout.", "Happy to draft alternate solution if that is preferred.", "Thank you.", "Anyone willing to take a look?", "I'm happy to modify the patch as requested.", "Thank you!", "Sure thing, I added this to the trunk in revision 1575069 and 1.8 in revision 1575070.", "Thanks for the unit test!", "Thank you!"], "SplitGT": [" Creates empty COSDictionary if dict is null."], "issueString": "Avoid NPE when encountering null PDComplexFileSpecification\nIn some pdfs in the wild, PDComplexFileSpecification can be null. It would be great if we could skip those files that don't have any contents and not throw an NPE.\nTest file attached, unit tests and patch to follow.\nPatch with unit tests and test file attached.\n\nPlace test file in: src/test/resources/org/apache/pdfbox/pdmodel, and you should be good to go.\n\nThe strategy I chose for the fix was to initialize an empty COSDictionary if the dict that was passed in to PDComplexFileSpecification was null.  \n\nA fix that would be truer to the underlying PDF objects would be to set the PDComplexFileSpecification = COSNull or null instead of building an object with a null dict, but that would require many more changes throughout.\n\nHappy to draft alternate solution if that is preferred.  Thank you.\nAnyone willing to take a look?  I'm happy to modify the patch as requested.  Thank you!\nSure thing, I added this to the trunk in revision 1575069 and 1.8 in revision 1575070. Thanks for the unit test!\nThank you!\n"}
