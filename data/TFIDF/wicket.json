{"aId": 1, "code": "public final void untouch(Page page)\n\t{\n\t\tList lst = (List)touchedPages.get();\n\t\tif (lst != null)\n\t\t{\n\t\t\tlst.remove(page);\n\t\t}\n\t}", "comment": " THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL IT. This method will remove a page that was previously added via touch", "issueId": "WICKET-942", "issueStringList": ["PageMap.remove(Page) throws ClassCastException", "When I try to expire a page by calling PageMap.remove(Page) I get the following exception", "java.lang.ClassCastException: java.lang.Integer cannot be cast to org.apache.wicket.protocol.http.pagestore.PageWindowManager$PageWindowInternal", "at org.apache.wicket.protocol.http.pagestore.PageWindowManager.removePage(PageWindowManager.java:544)", "at org.apache.wicket.protocol.http.pagestore.DiskPageStore$SessionEntry.removePage(DiskPageStore.java:255)", "at org.apache.wicket.protocol.http.pagestore.DiskPageStore.removePage(DiskPageStore.java:623)", "at org.apache.wicket.protocol.http.pagestore.DiskPageStore.removePage(DiskPageStore.java:652)", "at org.apache.wicket.protocol.http.SecondLevelCacheSessionStore$SecondLevelCachePageMap.removeEntry(SecondLevelCacheSessionStore.java:368)", "at org.apache.wicket.PageMap.remove(PageMap.java:289)", "The problem in removePage() of the PageWindowManager class was that it wasn't getting the PageWindowInternal from the windows list.", "There is also a problem though in that it attempts to iterate through the window indexes and at the same time calls removePage() which removes them so you get a ConcurrentModificationException.", "I've tested the following and it works", "public void removePage(int pageId)", "{", "if (idToWindowIndices == null)", "{", "rebuildIndices();", "}", "List indicesList = (List) idToWindowIndices.get(pageId);", "if (indicesList == null)", "{", "return; // Return if page was already removed", "}", "Object[] indices = indicesList.toArray();", "for (int i=0; i < indices.length; i++)", "{", "PageWindowInternal window = (PageWindowInternal)windows.get((Integer)indices[i]);", "removePage(window.pageId, window.versionNumber, window.ajaxVersionNumber);", "}", "}", "However I ran into another problem.", "When my page removes itself it then gets immediately added back in at the end of the request cycle in Session.requestDetached().", "So its impossible for a page to expire itself.", "To fix this I would recommend changing the PageMap.remove(Page) method to", "public final void remove(final Page page)", "{", "Remove the pagemap entry from session", "removeEntry(page.getPageMapEntry());", "Make sure it doesn't get added again at the end of the request cycle", "Session.get().untouch(page);", "}", "and then add the untouch() method to Session", "THIS METHOD IS NOT PART OF THE WICKET PUBLIC API.", "DO NOT CALL IT.", "<p>", "This method will remove a page that was previously added via touch()", "@param page", "public final void untouch(Page page)", "{", "List lst = (List)touchedPages.get();", "if (lst != null)", "{", "lst.remove(page);", "}", "}", "With the above changes my code works as it did under version 1.2.6", "Hi, thanks for the bug report.", "I wish we had more reports like this.", "I've attempted to fix the issue, can you plese test if the current trunk works for you?", "In the removePage() method you removed the indicesList.toArray() so I now get a ConcurrentModificationException because the code tries to iterate through a list at the same time it's removing items.", "You could use something like this", "public void removePage(int pageId)", "{", "if (idToWindowIndices == null)", "{", "rebuildIndices();", "}", "List indices = (List)idToWindowIndices.get(pageId);", "if (indices != null)", "{", "Object[] indicesArray = indices.toArray(); // Make a copy of the list so we don't get a ConcurrentModificationException", "for (int i=0; i < indicesArray.length; i++)", "{", "int index = ((Integer)indicesArray[i]).intValue();", "PageWindowInternal window = (PageWindowInternal)windows.get(index);", "if (window.pageId == pageId)", "{", "removePage(window.pageId, window.versionNumber, window.ajaxVersionNumber);", "}", "}", "}", "}", "The other alternative would be to pass the iterator through to the removePage() method so it can call Iterator.remove() but this seems a lot more complicated.", "Also the list should never really be that big so copying it to an array shouldn't impact performance."], "SplitGT": [" THIS METHOD IS NOT PART OF THE WICKET PUBLIC API.", "DO NOT CALL IT.", "This method will remove a page that was previously added via touch"], "issueString": "PageMap.remove(Page) throws ClassCastException\nWhen I try to expire a page by calling PageMap.remove(Page) I get the following exception\n\njava.lang.ClassCastException: java.lang.Integer cannot be cast to org.apache.wicket.protocol.http.pagestore.PageWindowManager$PageWindowInternal\n     at org.apache.wicket.protocol.http.pagestore.PageWindowManager.removePage(PageWindowManager.java:544)\n     at org.apache.wicket.protocol.http.pagestore.DiskPageStore$SessionEntry.removePage(DiskPageStore.java:255)\n     at org.apache.wicket.protocol.http.pagestore.DiskPageStore.removePage(DiskPageStore.java:623)\n     at org.apache.wicket.protocol.http.pagestore.DiskPageStore.removePage(DiskPageStore.java:652)\n     at org.apache.wicket.protocol.http.SecondLevelCacheSessionStore$SecondLevelCachePageMap.removeEntry(SecondLevelCacheSessionStore.java:368)\n     at org.apache.wicket.PageMap.remove(PageMap.java:289)\n\nThe problem in removePage() of the PageWindowManager class was that it wasn't getting the PageWindowInternal from the windows list. There is also a problem though in that it attempts to iterate through the window indexes and at the same time calls removePage() which removes them so you get a ConcurrentModificationException. I've tested the following and it works\n\n\tpublic void removePage(int pageId)\n\t{\n\t\tif (idToWindowIndices == null)\n\t\t{\n\t\t\trebuildIndices();\n\t\t}\n\n\t\tList indicesList = (List) idToWindowIndices.get(pageId);\n\t\tif (indicesList == null)\n\t\t{\n\t\t\treturn; // Return if page was already removed\n\t\t}\n\n\t        Object[] indices = indicesList.toArray();\n        \tfor (int i=0; i < indices.length; i++)\n\t\t{\n\t\t\tPageWindowInternal window = (PageWindowInternal)windows.get((Integer)indices[i]);\n\t\t\tremovePage(window.pageId, window.versionNumber, window.ajaxVersionNumber);\n\t\t}\n\t}\n\nHowever I ran into another problem. When my page removes itself it then gets immediately added back in at the end of the request cycle in Session.requestDetached(). So its impossible for a page to expire itself. To fix this I would recommend changing the PageMap.remove(Page) method to\n\n\tpublic final void remove(final Page page)\n\t{\n\t\t// Remove the pagemap entry from session\n\t\tremoveEntry(page.getPageMapEntry());\n\t        // Make sure it doesn't get added again at the end of the request cycle\n        \tSession.get().untouch(page);\n\t}\n\nand then add the untouch() method to Session\n\n\t/**\n\t* THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT CALL IT.\n\t* <p>\n\t* This method will remove a page that was previously added via touch()\n\t* @param page\n\t*/\n\tpublic final void untouch(Page page)\n\t{\n\t\tList lst = (List)touchedPages.get();\n\t\tif (lst != null)\n\t\t{\n\t\t\tlst.remove(page);\n\t\t}\n\t}\n\nWith the above changes my code works as it did under version 1.2.6\nHi, thanks for the bug report. I wish we had more reports like this. I've attempted to fix the issue, can you plese test if the current trunk works for you?\nIn the removePage() method you removed the indicesList.toArray() so I now get a ConcurrentModificationException because the code tries to iterate through a list at the same time it's removing items. You could use something like this\n\n\tpublic void removePage(int pageId)\n\t{\n\t\tif (idToWindowIndices == null)\n\t\t{\n\t\t\trebuildIndices();\n\t\t}\n\t\tList indices = (List)idToWindowIndices.get(pageId);\n\n\t\tif (indices != null)\n\t\t{\n\t\t\tObject[] indicesArray = indices.toArray(); // Make a copy of the list so we don't get a ConcurrentModificationException\n\t\t\tfor (int i=0; i < indicesArray.length; i++)\n\t\t\t{\n\t\t\t\tint index = ((Integer)indicesArray[i]).intValue();\n\t\t\t\tPageWindowInternal window = (PageWindowInternal)windows.get(index);\n\t\t\t\tif (window.pageId == pageId)\n\t\t\t\t{\n\t\t\t\t\tremovePage(window.pageId, window.versionNumber, window.ajaxVersionNumber);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\nThe other alternative would be to pass the iterator through to the removePage() method so it can call Iterator.remove() but this seems a lot more complicated. Also the list should never really be that big so copying it to an array shouldn't impact performance.\n", "issueSearchSentences": ["{", "{", "@param page", "List lst = (List)touchedPages.get();", "To fix this I would recommend changing the PageMap.remove(Page) method to"], "issueSearchIndexes": [52, 49, 47, 50, 34]}
{"aId": 2, "code": "public void setCssClassName(final String cssClassName)\r\n    {\r\n        this.cssClassName = cssClassName;\r\n    }", "comment": " Sets an CSS class name to add to the autocompleter markup container This makes it easier to have multiple autocompleters in your application with different style and layout.", "issueId": "WICKET-1716", "issueStringList": ["make autocompleter more customizable", "disclaimer: Excuse this somehow large explanation :-(", "Problems in current wicket autocompleter implementation (including patch)", "Wicket will by default make the width of the autocompleter the same as the width of the related input field.", "This is often useful but also can be really nasty sometimes.", "Imagine you have a text input field to enter the ISBN of a book (size: 13 digits).", "While typing any parts of the book's title, author, genre, year or ISBN the autocompleter should pop up a list of book entries which contain the matching input string:", "autocompleter output (structure)", "item 1 ---", "ISBN 1", "AUTHOR 1", "TITLE 1", "GENRE 1", "YEAR 1", "item 2 ---", "ISBN 2", "AUTHOR 2", "TITLE 2", "GENRE 2", "YEAR 2", "...", "item n ---", "When pressing enter the input field will be set to the ISBN of the currently selected book.", "BTW since WICKET-488 is resolved the other read-only fields of the form will contain title, author, etc.", "(Thanks, Igor!!", ":-)", "Now the problem: Typically the width of the autocompleter entry shown in the popup (especially the book title) will be a lot longer than the 13 digit ISBN number.", "The only chance to grow the wicket autocompleter window to the required size is to make the input field ridiculously long so the windows will adjust to that size.", "This is really ugly and wastes a lot of space in the user interface for no reason.", "Also it will confuse the user who thinks the input really needs to be that long.", "Typically wicket's autocompleter markup looks like this:", "HTML", "<div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px; width: 155px;\" class=\"wicket-aa-container\">", "<div class=\"wicket-aa\" id=\"text1-autocomplete\">", "<ul>", "<li class=\"selected\" textvalue=\"978-1932394986\">.....</li>", "<li textvalue=\"978-1932394222\">.....</li>", "....", "<li textvalue=\"978-1932311186\">.....</li>", "</ul>", "</div>", "</div>", "The 'style' attribute in the <div> contains 'width:155px' and is impossible to override from CSS because 'style' is \"stronger\" (the 'cascading' in css).", "So I attached a patch to enable / disable the adjustment of the width to the input field.", "JAVA", "final AutoCompleteSettings opts = new AutoCompleteSettings();", "opts.setAdjustInputWidth(false);", "field.add(new AutoCompleteBehavior(renderer, opts)", "...", "The markup will now look like this:", "HTML", "<div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container\">", "Notice the lack of the 'width' attribute...", "Now to resolve the problem you could write:", "MYSTYLE.CSS", ".wicket-aa-container {", "width: 300px;", "}", "However this will not only grow the great book autocompleter to the desired width but also all other autocompleters ever being used on the same page (or the scope of the CSS).", "Also you can _NOT_ do this:", "MYSTYLE.CSS", "#isbn1-autocomplete-container {", "width: 300px;", "}", "Because a linked stylesheet is typically static (and cached by the browser) and the DOM id of the autocompleter is generated dynamically.", "And, no: I don't consider generating dynamic CSS an option for such a simple problem.", "So what would be just great is the possibility to add an extra css class to the container tag:", "JAVA", "final AutoCompleteSettings opts = new AutoCompleteSettings();", "opts.setCssClassName(\"book-autocompleter\");", "opts.setAdjustInputWidth(false);", "field.add(new AutoCompleteBehavior(renderer, opts)", "...", "HTML", "<div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container book-autocompleter\">", "You will immediately notice the additional class name 'book-autocompleter'", "MYSTYLE.CSS", ".book-autocompleter {", "width: 300px;", "}", "To summarize my patch:", "Two extra methods in org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings", "Sets an CSS class name to add to the autocompleter markup container", "<p/>", "This makes it easier to have multiple autocompleters in your application", "with different style and layout.", "@param cssClassName valid CSS class name", "public void setCssClassName(final String cssClassName)", "Adjust the width of the autocompleter selection window to the width of the related input field.", "<p/>", "Otherwise the size will depend on the default browser behavior and CSS.", "@param adjustInputWidth  <code>true</code> if the autocompleter should have the same size  as", "the input field, <code>false</code> for default browser behavior", "public void setAdjustInputWidth(final boolean adjustInputWidth)", "Unless you call these methods the autocompleter will behave exactly as before so this will not break previous code.", "Would be just great to see this patch applied :-)", "Wow, that was quick!", "Thank you :-)"], "SplitGT": [" Sets an CSS class name to add to the autocompleter markup container This makes it easier to have multiple autocompleters in your application with different style and layout."], "issueString": "make autocompleter more customizable\ndisclaimer: Excuse this somehow large explanation :-(\n\nProblems in current wicket autocompleter implementation (including patch)\n\nWicket will by default make the width of the autocompleter the same as the width of the related input field. This is often useful but also can be really nasty sometimes. Imagine you have a text input field to enter the ISBN of a book (size: 13 digits). While typing any parts of the book's title, author, genre, year or ISBN the autocompleter should pop up a list of book entries which contain the matching input string:\n\n  autocompleter output (structure)\n\n  --- item 1 ---\n  ISBN 1\n  AUTHOR 1\n  TITLE 1\n  GENRE 1\n  YEAR 1 \n  --- item 2 ---\n  ISBN 2\n  AUTHOR 2\n  TITLE 2\n  GENRE 2\n  YEAR 2\n  --------------\n  ...\n  --- item n ---\n\nWhen pressing enter the input field will be set to the ISBN of the currently selected book.\n\nBTW since WICKET-488 is resolved the other read-only fields of the form will contain title, author, etc. (Thanks, Igor!! :-)\n\nNow the problem: Typically the width of the autocompleter entry shown in the popup (especially the book title) will be a lot longer than the 13 digit ISBN number. The only chance to grow the wicket autocompleter window to the required size is to make the input field ridiculously long so the windows will adjust to that size. This is really ugly and wastes a lot of space in the user interface for no reason. Also it will confuse the user who thinks the input really needs to be that long.\n\nTypically wicket's autocompleter markup looks like this:\n\n HTML\n\n  <div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px; width: 155px;\" class=\"wicket-aa-container\">\n  \t  <div class=\"wicket-aa\" id=\"text1-autocomplete\">\n\t\t  <ul>\n  \t\t      <li class=\"selected\" textvalue=\"978-1932394986\">.....</li>\n\t\t      <li textvalue=\"978-1932394222\">.....</li>\n\t\t      ....\n\t\t      <li textvalue=\"978-1932311186\">.....</li>\n\t\t  </ul>\n\t  </div>\n  </div>\n\nThe 'style' attribute in the <div> contains 'width:155px' and is impossible to override from CSS because 'style' is \"stronger\" (the 'cascading' in css).\n\nSo I attached a patch to enable / disable the adjustment of the width to the input field.\n\n  JAVA\n\n    final AutoCompleteSettings opts = new AutoCompleteSettings();\n    opts.setAdjustInputWidth(false);\n    field.add(new AutoCompleteBehavior(renderer, opts)\n    ...\n\nThe markup will now look like this:\n\n  HTML\n\n    <div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container\">\n\nNotice the lack of the 'width' attribute...\n\nNow to resolve the problem you could write:\n\n  MYSTYLE.CSS\n\n    .wicket-aa-container {\n      width: 300px; \n    }\n\nHowever this will not only grow the great book autocompleter to the desired width but also all other autocompleters ever being used on the same page (or the scope of the CSS). Also you can _NOT_ do this:\n\n  MYSTYLE.CSS\n\n    #isbn1-autocomplete-container {\n      width: 300px;\n    }\n\nBecause a linked stylesheet is typically static (and cached by the browser) and the DOM id of the autocompleter is generated dynamically. And, no: I don't consider generating dynamic CSS an option for such a simple problem.\n\nSo what would be just great is the possibility to add an extra css class to the container tag:\n\n  JAVA\n\n    final AutoCompleteSettings opts = new AutoCompleteSettings();\n    opts.setCssClassName(\"book-autocompleter\");\n    opts.setAdjustInputWidth(false);\n    field.add(new AutoCompleteBehavior(renderer, opts)\n    ...\n\n  HTML\n\n    <div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container book-autocompleter\">\n\nYou will immediately notice the additional class name 'book-autocompleter'\n\n  MYSTYLE.CSS\n\n    .book-autocompleter {\n      width: 300px;\n    }\n\n\nTo summarize my patch:\n\n\nTwo extra methods in org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings\n\n\n  /**\n   * Sets an CSS class name to add to the autocompleter markup container\n   * <p/>\n   * This makes it easier to have multiple autocompleters in your application\n   * with different style and layout.\n   *\n   * @param cssClassName valid CSS class name\n   */\n  public void setCssClassName(final String cssClassName)\n\n\n  /**\n   * Adjust the width of the autocompleter selection window to the width of the related input field.\n   * <p/>\n   * Otherwise the size will depend on the default browser behavior and CSS.\n   *\n    * @param adjustInputWidth  <code>true</code> if the autocompleter should have the same size  as\n   *                           the input field, <code>false</code> for default browser behavior\n   */\n    public void setAdjustInputWidth(final boolean adjustInputWidth)\n\n\nUnless you call these methods the autocompleter will behave exactly as before so this will not break previous code.\n\n\nWould be just great to see this patch applied :-)\nWow, that was quick! Thank you :-)\n", "issueSearchSentences": ["@param cssClassName valid CSS class name", "with different style and layout.", "the input field, <code>false</code> for default browser behavior", "final AutoCompleteSettings opts = new AutoCompleteSettings();", "JAVA"], "issueSearchIndexes": [87, 86, 93, 69, 45]}
{"aId": 4, "code": "public void post(Object event, String resourceUuid)\n\t{\n\t\tAtmosphereResource resource = AtmosphereResourceFactory.getDefault().find(resourceUuid);\n\t\tif (resource != null)\n\t\t{\n\t\t\tpost(event, resource);\n\t\t}\n\t}", "comment": " Post an event to a single resource.", "issueId": "WICKET-4879", "issueStringList": ["Implementing channels in wicket-atmosphere", "Good evening,", "Now that both Tomcat & Jetty support native WebSockets, it would be a killer-feature to implement Comet / WebSockets channels.", "i.e.", "being able to have a channel id and to post a message to one client only or to all the clients who subscribed to a certain channel.", "For the moment, it is possible to do it, but to the (expensive) price of having a PerRequestBroadcastFilter and tweaking it if we manage to do it.", "But it would be great to have a link to the Broadcaster API from Atmosphere, which I think, supports this kind of things.That would probably be way more efficient than PerRequestBroadcastFilter tweaking.", "As of today, when posting a message to the event bus, all pages who have the @Subscribed-decorated method suitable to process this message will do it, which is not always desirable.", "I'm looking forward to hear from you.", "Regards", "I've attached a quickstart demonstrating the fact that when posting to the event bus, all clients registered to that resource receive the message.", "But, it is visually obvious in this example that it is not desired behaviour.", "FYI, it's based on Emond's own quickstart.", "doesn't adding custom predicate in @Subscribe  solves the problem?", "Not really, because if you post on the event bus with two clients registered, if I understand things correctly, the predicate which returns true sends the response to both clients, even if the other one returns false.", "Let me explain a little more what is the current behaviour.", "Let's say that two clients A & B have the right @Subscribe method.", "Let's say that you send an event e to the event bus for that method.", "Then A processes e and sends the same response to both A & B.", "Then B processes the same event and sends a response to both A & B, too.", "So we have two responses received by both A & B. I have an app where it's visually obvious: I send a small notification in my @Subscribe method.", "The notification displays two times in each browser A & B.", "Which is what make me think it works like that.", "Plus, it looks consistent with what I know from Atmosphere's Meteor API (which is called under the hood).", "Hence the request for a Broadcaster-based solution.", "If I use a predicate which returns true for A and false for B, here is what apparently occurs: A sends its response to both A & B since the predicate returns true.", "And B doesn't send anything since the predicate returns false.", "But the * same * response returns to both A & B since it comes from A.", "What I would like to be able to do is to have a response computed by B's AtmosphereBehavior instance sent to B and a response computed by A's AtmosphereBehavior instance sent to A.", "Because those 2 responses can potentially be a little bit different from each other.", "Does it make sense?", "Am I doing assumptions that I should not?", "One more thing.", "Quoting wicket-atmosphere's JavaDoc: \"The filter cannot rely on any context.", "For example, the RequestCycle may not be available\".", "This seems to me a little bit limited.", "I fully understand why this is like this for the predicate.", "But if we have a way to dispatch the right event to the right @Subscribe method (or a channel implementation of any sort), maybe we will be able to filter things with more context, so that would be potentially easier.", "OK, any thoughts about that?", "Kind regards,", "Pierre", "see code below,i mean something like this,you can change/improve according to your usecase", "public class InputWrapper<T> {", "@param input", "@param id  id is sessionid of sender", "public InputWrapper(T input, String  id){", "this.input=input;", "this.sender=id;", "}", "public T getInput() {", "return input;", "}", "public String getSender() {", "return sender;", "}", "T input;", "String sender;", "}", "compare sessionid and return true if session id of sender is same as receiver", "public  class SomePredicate implements Predicate<InputWrapper>{", "@Override", "public boolean apply(@Nullable InputWrapper wrapper) {", "return wrapper.getSender().equals(Session.get().getId());", "}", "}", "Yes, that's totally it!", "But unfortunately, my arguments below still apply.", "Plus, it gives me strange exceptions to use this kind of things: UnknwonBehaviorIdException, NullPointerException because the appended component can't be found, etc.", "I tried using this kind of code but was forced to strip it because of these exceptions.", "afaik what wicket-atmosphere does is it filters the overall subscribers based on if their corresponding predicate returns true or not when event is posted ,if a predicate of subscriber returns true then the method/subscriber gets invoked else not so in above case with \"SomePredicate\" if client A has sent response then predicate returns true only if A is receiver and hence only A gets response.", "i can't reproduce your exception...", "Unfortunately, my experience is that if a predicate matches for a client and doesn't matches for the others, the matching predicate sends the response to all clients.", "So in our case the message is sent only once, and not as many times as there are connected clients, but to all the connected clients.", "Which I find pretty annoying.", "Regarding my exception, it only happens when using complex HTML, in one of my projects, it is totally absent.", "But in another one, it happens on a regular basis.", "I agree that the filter construction is a bit weak.", "It can only be used to filter on properties of the event itself, not on properties of the receiver.", "The reason for this is that it is expensive to setup the entire context, such as the session and a request cycle.", "I think it should be possible to add a second filter that runs inside the AtmosphereRequestHandler, at which point the session, request cylcle and even the page are available.", "I've just pushed the implementation of a context aware filter.", "I've also updated the example to show how this works.", "Be advised though that filtering within the context of a Wicket request cyle is expensive.", "If you can implement the desired behavior via the Atmosphere API, I suggest you do so, because that should be much less expensive.", "Wrapping the Atmosphere api is not what Wicket-Atmosphere is for, it is a bridge not a wrapper.", "Good evening,", "I've just tried it.", "The behaviour is the same: if three clients are connected and that only one's filter returns true, then the same message goes to all the three clients.", "If two of them return true, then those two send the message to the three clients, and so on.", "Personally, I'd like to be able to have the message sent by one client broadcasted to only this client.", "Of course, the use case of \"one client sends to all\" is useful, I just wish it was not the only one possible.", "Anyway, your \"contextAwareFilter\" is useful, thanks for that !", "I've tried myself to implement a Broadcaster-based message-sending in your code, but for the moment, I failed.", "Too bad.", "The one thing I miss is how to provide an AtmosphereResource to my Broadcaster.", "Anyway, keep up the good work!", ":-)", "I don't see how you could return true for one client and false for another (other than using something like random).", "filter() is used with no receiver context at all.", "It is meant to be used to filter certain types of events (other than the actual instance type).", "For example, if you have an event that contains progress of a job and you only want your component to receive the events if the progress is 80% or higher, that's when you use filter().", "The same filter should always return true for the same events.", "Can you take a look at commit a5421ec488020a3835d49962e1f772dc1435e230?", "I've added methods to post an event to a single resource, either with a resource instance or via its uuid (which I think makes more sense).", "You can get the UUID with AtmosphereResource.getUUID(page).", "Thanks again!", "I've tried this new code, but unfortunately the situation is the same: all the connected resources are refreshed when issuing: Application.get().getEventBus().post(MyObject, pageUuid), not just the one that I'm expecting.", "Sorry about that, I don't know what could be wrong."], "SplitGT": [" Post an event to a single resource."], "issueString": "Implementing channels in wicket-atmosphere\nGood evening,\n\nNow that both Tomcat & Jetty support native WebSockets, it would be a killer-feature to implement Comet / WebSockets channels. i.e. being able to have a channel id and to post a message to one client only or to all the clients who subscribed to a certain channel.\n\nFor the moment, it is possible to do it, but to the (expensive) price of having a PerRequestBroadcastFilter and tweaking it if we manage to do it. But it would be great to have a link to the Broadcaster API from Atmosphere, which I think, supports this kind of things.That would probably be way more efficient than PerRequestBroadcastFilter tweaking.\n\nAs of today, when posting a message to the event bus, all pages who have the @Subscribed-decorated method suitable to process this message will do it, which is not always desirable.\n\nI'm looking forward to hear from you.\n\nRegards\nI've attached a quickstart demonstrating the fact that when posting to the event bus, all clients registered to that resource receive the message. But, it is visually obvious in this example that it is not desired behaviour.\n\nFYI, it's based on Emond's own quickstart.\ndoesn't adding custom predicate in @Subscribe  solves the problem? \n\n\n\nNot really, because if you post on the event bus with two clients registered, if I understand things correctly, the predicate which returns true sends the response to both clients, even if the other one returns false.\n\nLet me explain a little more what is the current behaviour. Let's say that two clients A & B have the right @Subscribe method. Let's say that you send an event e to the event bus for that method. Then A processes e and sends the same response to both A & B. Then B processes the same event and sends a response to both A & B, too. So we have two responses received by both A & B. I have an app where it's visually obvious: I send a small notification in my @Subscribe method. The notification displays two times in each browser A & B. Which is what make me think it works like that. Plus, it looks consistent with what I know from Atmosphere's Meteor API (which is called under the hood). Hence the request for a Broadcaster-based solution.\n\nIf I use a predicate which returns true for A and false for B, here is what apparently occurs: A sends its response to both A & B since the predicate returns true. And B doesn't send anything since the predicate returns false. But the * same * response returns to both A & B since it comes from A.\n\nWhat I would like to be able to do is to have a response computed by B's AtmosphereBehavior instance sent to B and a response computed by A's AtmosphereBehavior instance sent to A. Because those 2 responses can potentially be a little bit different from each other.\n\nDoes it make sense? Am I doing assumptions that I should not?\n\nOne more thing. Quoting wicket-atmosphere's JavaDoc: \"The filter cannot rely on any context. For example, the RequestCycle may not be available\". This seems to me a little bit limited. I fully understand why this is like this for the predicate. But if we have a way to dispatch the right event to the right @Subscribe method (or a channel implementation of any sort), maybe we will be able to filter things with more context, so that would be potentially easier.\n\nOK, any thoughts about that?\n\nKind regards,\n\nPierre\nsee code below,i mean something like this,you can change/improve according to your usecase\n\n public class InputWrapper<T> {\n        /**\n         *\n         * @param input\n         * @param id  id is sessionid of sender\n         */\n        public InputWrapper(T input, String  id){\n            this.input=input;\n            this.sender=id;\n        }\n\n        public T getInput() {\n            return input;\n        }\n\n        public String getSender() {\n            return sender;\n        }\n\n        T input;\n        String sender;\n    }\n\n    /**\n     * compare sessionid and return true if session id of sender is same as receiver\n     */\n    public  class SomePredicate implements Predicate<InputWrapper>{\n        @Override\n        public boolean apply(@Nullable InputWrapper wrapper) {\n            return wrapper.getSender().equals(Session.get().getId());\n        }\n    }\n\n\nYes, that's totally it! But unfortunately, my arguments below still apply.\n\nPlus, it gives me strange exceptions to use this kind of things: UnknwonBehaviorIdException, NullPointerException because the appended component can't be found, etc. I tried using this kind of code but was forced to strip it because of these exceptions.\nafaik what wicket-atmosphere does is it filters the overall subscribers based on if their corresponding predicate returns true or not when event is posted ,if a predicate of subscriber returns true then the method/subscriber gets invoked else not so in above case with \"SomePredicate\" if client A has sent response then predicate returns true only if A is receiver and hence only A gets response.\ni can't reproduce your exception...\nUnfortunately, my experience is that if a predicate matches for a client and doesn't matches for the others, the matching predicate sends the response to all clients. So in our case the message is sent only once, and not as many times as there are connected clients, but to all the connected clients. Which I find pretty annoying.\n\nRegarding my exception, it only happens when using complex HTML, in one of my projects, it is totally absent. But in another one, it happens on a regular basis.\nI agree that the filter construction is a bit weak. It can only be used to filter on properties of the event itself, not on properties of the receiver. The reason for this is that it is expensive to setup the entire context, such as the session and a request cycle. I think it should be possible to add a second filter that runs inside the AtmosphereRequestHandler, at which point the session, request cylcle and even the page are available.\nI've just pushed the implementation of a context aware filter. I've also updated the example to show how this works. Be advised though that filtering within the context of a Wicket request cyle is expensive. If you can implement the desired behavior via the Atmosphere API, I suggest you do so, because that should be much less expensive.\n\nWrapping the Atmosphere api is not what Wicket-Atmosphere is for, it is a bridge not a wrapper.\nGood evening,\n\nI've just tried it. The behaviour is the same: if three clients are connected and that only one's filter returns true, then the same message goes to all the three clients. If two of them return true, then those two send the message to the three clients, and so on.\n\nPersonally, I'd like to be able to have the message sent by one client broadcasted to only this client. Of course, the use case of \"one client sends to all\" is useful, I just wish it was not the only one possible.\n\nAnyway, your \"contextAwareFilter\" is useful, thanks for that !\n\nI've tried myself to implement a Broadcaster-based message-sending in your code, but for the moment, I failed. Too bad. The one thing I miss is how to provide an AtmosphereResource to my Broadcaster.\n\nAnyway, keep up the good work! :-)\nI don't see how you could return true for one client and false for another (other than using something like random). filter() is used with no receiver context at all. It is meant to be used to filter certain types of events (other than the actual instance type). For example, if you have an event that contains progress of a job and you only want your component to receive the events if the progress is 80% or higher, that's when you use filter(). The same filter should always return true for the same events.\n\nCan you take a look at commit a5421ec488020a3835d49962e1f772dc1435e230? I've added methods to post an event to a single resource, either with a resource instance or via its uuid (which I think makes more sense). You can get the UUID with AtmosphereResource.getUUID(page).\nThanks again! I've tried this new code, but unfortunately the situation is the same: all the connected resources are refreshed when issuing: Application.get().getEventBus().post(MyObject, pageUuid), not just the one that I'm expecting.\n\nSorry about that, I don't know what could be wrong.\n", "issueSearchSentences": ["Can you take a look at commit a5421ec488020a3835d49962e1f772dc1435e230?", "}", "Regards", "@param id  id is sessionid of sender", "doesn't adding custom predicate in @Subscribe  solves the problem?"], "issueSearchIndexes": [103, 52, 10, 45, 14]}
{"aId": 6, "code": "public void wait(Object object)\n\t{\n\t\ttry\n\t\t{\n\t\t\tobject.wait(getMilliseconds());\n\t\t}\n\t\tcatch (InterruptedException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}", "comment": " Wait for this duration on the given monitor", "issueId": "WICKET-2285", "issueStringList": ["Add Duration.wait(Object)", "This is handy so you don't have to do object.wait(duration.getMilliseconds()) and have an ugly catch block in your code as well.", "Wait for this duration on the given monitor", "@param object", "The monitor to wait on", "private void wait(Object object)", "{", "try", "{", "object.wait(getMilliseconds());", "}", "catch (InterruptedException e)", "{", "throw new RuntimeException(e);", "}", "}", "This is in trunk now."], "SplitGT": [" Wait for this duration on the given monitor"], "issueString": "Add Duration.wait(Object)\nThis is handy so you don't have to do object.wait(duration.getMilliseconds()) and have an ugly catch block in your code as well.\n\n\t/**\n\t * Wait for this duration on the given monitor\n\t * \n\t * @param object\n\t *            The monitor to wait on\n\t */\n\tprivate void wait(Object object)\n\t{\n\t\ttry\n\t\t{\n\t\t\tobject.wait(getMilliseconds());\n\t\t}\n\t\tcatch (InterruptedException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\nThis is in trunk now.\n", "issueSearchSentences": ["{", "The monitor to wait on", "{", "}", "public void wait(Object object)\n\t{\n\t\ttry\n\t\t{\n\t\t\tobject.wait(getMilliseconds());\n\t\t}\n\t\tcatch (InterruptedException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}"], "issueSearchIndexes": [9, 5, 13, 11, 0]}
{"aId": 7, "code": "private void exact(ComponentEvent<?> event)\n\t{\n\t\tIEventSink sink = event.getSink();\n\n\t\tif (sink instanceof Component)\n\t\t{\n\t\t\tdispatchToComponent(dispatcher, (Component) sink, event);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdispatcher.dispatchEvent(sink, event, null);\n\t\t}\n\t}", "comment": " In case the sink is a Component then all its behaviors are notified as well.", "issueId": "WICKET-5339", "issueStringList": ["Broadcast.EXACT does not notify Behaviors of target Component", "As described in IRC I want to \"answer\" an event by sending an event back to events source using broadcast exact.", "But that answer should be handled by a Behavior on the component.", "When using any other broadcast type behaviors will be notified too.", "But not when using exact.", "Since Behavior does not implement IEventSink I cannot address the behavior directly instead of the component.", "Even if that works I think it wont be a good practice.", "I'm not sure if this is a bug, since it's a philosophic question if exact broadcast should include behaviors of a component.", "Quick start that doesn\"t work for me.", "Here is a modified quickstart that workarounds the problem", "The main problem is that Behavior is I*ComponentAware*EventSink, and there is no Component to pass to #onEvent(Component, IEvent).", "So I made your Behavior implementing IEventSink.", "A patch that allows to send events to specific IComponentAwareEventSink", "The patch seems to be ok.", "I would like it more if my answering component must not know the behaviors implementation or class.", "Otherwise I could do:", "((Component)event.getSource()).getBehaviors(MagicBehavior.class).get( ?", ").doMagicStuff(...)", "So maybe Behavior needs to implement IEventSource so that I can send the answer directly to the Behavior which I will get from event.getSource() ... ?", "I can pass the Behavior - thats waiting for answer - as payload or attribute of my payload to ...", "From now on if the sink is a Component instance then all its behaviors are notified as well.", "Application.get().getFrameworkSettings().add(new IEventDispatcher() {", "@Override", "public void dispatchEvent(Object sink, IEvent<?> event, Component component) {", "if (sink instanceof Component && Broadcast.EXACT.equals(event.getType())){", "Component componentSink = (Component) sink;", "List<?", "extends Behavior> behaviors = componentSink.getBehaviors();", "for (Behavior behavior : behaviors) {", "behavior.onEvent(componentSink, event);", "}", "}", "}", "});", "Did it for me as workaround until release."], "SplitGT": [" In case the sink is a Component then all its behaviors are notified as well."], "issueString": "Broadcast.EXACT does not notify Behaviors of target Component\nAs described in IRC I want to \"answer\" an event by sending an event back to events source using broadcast exact. But that answer should be handled by a Behavior on the component.\n\nWhen using any other broadcast type behaviors will be notified too. But not when using exact. Since Behavior does not implement IEventSink I cannot address the behavior directly instead of the component. Even if that works I think it wont be a good practice.\n\nI'm not sure if this is a bug, since it's a philosophic question if exact broadcast should include behaviors of a component. \nQuick start that doesn\"t work for me.\nHere is a modified quickstart that workarounds the problem\n\nThe main problem is that Behavior is I*ComponentAware*EventSink, and there is no Component to pass to #onEvent(Component, IEvent).\nSo I made your Behavior implementing IEventSink.\nA patch that allows to send events to specific IComponentAwareEventSink\nThe patch seems to be ok. I would like it more if my answering component must not know the behaviors implementation or class. Otherwise I could do: \n\n((Component)event.getSource()).getBehaviors(MagicBehavior.class).get( ? ).doMagicStuff(...)\n\nSo maybe Behavior needs to implement IEventSource so that I can send the answer directly to the Behavior which I will get from event.getSource() ... ?\nI can pass the Behavior - thats waiting for answer - as payload or attribute of my payload to ... \nFrom now on if the sink is a Component instance then all its behaviors are notified as well.\n Application.get().getFrameworkSettings().add(new IEventDispatcher() {\n            @Override\n            public void dispatchEvent(Object sink, IEvent<?> event, Component component) {\n                if (sink instanceof Component && Broadcast.EXACT.equals(event.getType())){\n                    Component componentSink = (Component) sink;\n                    List<? extends Behavior> behaviors = componentSink.getBehaviors();\n                    for (Behavior behavior : behaviors) {\n                        behavior.onEvent(componentSink, event);\n                    }\n                }\n            }\n        });\n\nDid it for me as workaround until release.\n", "issueSearchSentences": ["public void dispatchEvent(Object sink, IEvent<?> event, Component component) {", "@Override", "if (sink instanceof Component && Broadcast.EXACT.equals(event.getType())){", "for (Behavior behavior : behaviors) {", "Otherwise I could do:"], "issueSearchIndexes": [24, 23, 25, 29, 16]}
{"aId": 13, "code": "public void post(Object event, AtmosphereResource resource)\n\t{\n\t\tThreadContext oldContext = ThreadContext.get(false);\n\t\ttry\n\t\t{\n\t\t\tpostToSingleResource(event, resource);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tThreadContext.restore(oldContext);\n\t\t}\n\t}", "comment": " Post an event to a single resource.", "issueId": "WICKET-4879", "issueStringList": ["Implementing channels in wicket-atmosphere", "Good evening,", "Now that both Tomcat & Jetty support native WebSockets, it would be a killer-feature to implement Comet / WebSockets channels.", "i.e.", "being able to have a channel id and to post a message to one client only or to all the clients who subscribed to a certain channel.", "For the moment, it is possible to do it, but to the (expensive) price of having a PerRequestBroadcastFilter and tweaking it if we manage to do it.", "But it would be great to have a link to the Broadcaster API from Atmosphere, which I think, supports this kind of things.That would probably be way more efficient than PerRequestBroadcastFilter tweaking.", "As of today, when posting a message to the event bus, all pages who have the @Subscribed-decorated method suitable to process this message will do it, which is not always desirable.", "I'm looking forward to hear from you.", "Regards", "I've attached a quickstart demonstrating the fact that when posting to the event bus, all clients registered to that resource receive the message.", "But, it is visually obvious in this example that it is not desired behaviour.", "FYI, it's based on Emond's own quickstart.", "doesn't adding custom predicate in @Subscribe  solves the problem?", "Not really, because if you post on the event bus with two clients registered, if I understand things correctly, the predicate which returns true sends the response to both clients, even if the other one returns false.", "Let me explain a little more what is the current behaviour.", "Let's say that two clients A & B have the right @Subscribe method.", "Let's say that you send an event e to the event bus for that method.", "Then A processes e and sends the same response to both A & B.", "Then B processes the same event and sends a response to both A & B, too.", "So we have two responses received by both A & B. I have an app where it's visually obvious: I send a small notification in my @Subscribe method.", "The notification displays two times in each browser A & B.", "Which is what make me think it works like that.", "Plus, it looks consistent with what I know from Atmosphere's Meteor API (which is called under the hood).", "Hence the request for a Broadcaster-based solution.", "If I use a predicate which returns true for A and false for B, here is what apparently occurs: A sends its response to both A & B since the predicate returns true.", "And B doesn't send anything since the predicate returns false.", "But the * same * response returns to both A & B since it comes from A.", "What I would like to be able to do is to have a response computed by B's AtmosphereBehavior instance sent to B and a response computed by A's AtmosphereBehavior instance sent to A.", "Because those 2 responses can potentially be a little bit different from each other.", "Does it make sense?", "Am I doing assumptions that I should not?", "One more thing.", "Quoting wicket-atmosphere's JavaDoc: \"The filter cannot rely on any context.", "For example, the RequestCycle may not be available\".", "This seems to me a little bit limited.", "I fully understand why this is like this for the predicate.", "But if we have a way to dispatch the right event to the right @Subscribe method (or a channel implementation of any sort), maybe we will be able to filter things with more context, so that would be potentially easier.", "OK, any thoughts about that?", "Kind regards,", "Pierre", "see code below,i mean something like this,you can change/improve according to your usecase", "public class InputWrapper<T> {", "@param input", "@param id  id is sessionid of sender", "public InputWrapper(T input, String  id){", "this.input=input;", "this.sender=id;", "}", "public T getInput() {", "return input;", "}", "public String getSender() {", "return sender;", "}", "T input;", "String sender;", "}", "compare sessionid and return true if session id of sender is same as receiver", "public  class SomePredicate implements Predicate<InputWrapper>{", "@Override", "public boolean apply(@Nullable InputWrapper wrapper) {", "return wrapper.getSender().equals(Session.get().getId());", "}", "}", "Yes, that's totally it!", "But unfortunately, my arguments below still apply.", "Plus, it gives me strange exceptions to use this kind of things: UnknwonBehaviorIdException, NullPointerException because the appended component can't be found, etc.", "I tried using this kind of code but was forced to strip it because of these exceptions.", "afaik what wicket-atmosphere does is it filters the overall subscribers based on if their corresponding predicate returns true or not when event is posted ,if a predicate of subscriber returns true then the method/subscriber gets invoked else not so in above case with \"SomePredicate\" if client A has sent response then predicate returns true only if A is receiver and hence only A gets response.", "i can't reproduce your exception...", "Unfortunately, my experience is that if a predicate matches for a client and doesn't matches for the others, the matching predicate sends the response to all clients.", "So in our case the message is sent only once, and not as many times as there are connected clients, but to all the connected clients.", "Which I find pretty annoying.", "Regarding my exception, it only happens when using complex HTML, in one of my projects, it is totally absent.", "But in another one, it happens on a regular basis.", "I agree that the filter construction is a bit weak.", "It can only be used to filter on properties of the event itself, not on properties of the receiver.", "The reason for this is that it is expensive to setup the entire context, such as the session and a request cycle.", "I think it should be possible to add a second filter that runs inside the AtmosphereRequestHandler, at which point the session, request cylcle and even the page are available.", "I've just pushed the implementation of a context aware filter.", "I've also updated the example to show how this works.", "Be advised though that filtering within the context of a Wicket request cyle is expensive.", "If you can implement the desired behavior via the Atmosphere API, I suggest you do so, because that should be much less expensive.", "Wrapping the Atmosphere api is not what Wicket-Atmosphere is for, it is a bridge not a wrapper.", "Good evening,", "I've just tried it.", "The behaviour is the same: if three clients are connected and that only one's filter returns true, then the same message goes to all the three clients.", "If two of them return true, then those two send the message to the three clients, and so on.", "Personally, I'd like to be able to have the message sent by one client broadcasted to only this client.", "Of course, the use case of \"one client sends to all\" is useful, I just wish it was not the only one possible.", "Anyway, your \"contextAwareFilter\" is useful, thanks for that !", "I've tried myself to implement a Broadcaster-based message-sending in your code, but for the moment, I failed.", "Too bad.", "The one thing I miss is how to provide an AtmosphereResource to my Broadcaster.", "Anyway, keep up the good work!", ":-)", "I don't see how you could return true for one client and false for another (other than using something like random).", "filter() is used with no receiver context at all.", "It is meant to be used to filter certain types of events (other than the actual instance type).", "For example, if you have an event that contains progress of a job and you only want your component to receive the events if the progress is 80% or higher, that's when you use filter().", "The same filter should always return true for the same events.", "Can you take a look at commit a5421ec488020a3835d49962e1f772dc1435e230?", "I've added methods to post an event to a single resource, either with a resource instance or via its uuid (which I think makes more sense).", "You can get the UUID with AtmosphereResource.getUUID(page).", "Thanks again!", "I've tried this new code, but unfortunately the situation is the same: all the connected resources are refreshed when issuing: Application.get().getEventBus().post(MyObject, pageUuid), not just the one that I'm expecting.", "Sorry about that, I don't know what could be wrong."], "SplitGT": [" Post an event to a single resource."], "issueString": "Implementing channels in wicket-atmosphere\nGood evening,\n\nNow that both Tomcat & Jetty support native WebSockets, it would be a killer-feature to implement Comet / WebSockets channels. i.e. being able to have a channel id and to post a message to one client only or to all the clients who subscribed to a certain channel.\n\nFor the moment, it is possible to do it, but to the (expensive) price of having a PerRequestBroadcastFilter and tweaking it if we manage to do it. But it would be great to have a link to the Broadcaster API from Atmosphere, which I think, supports this kind of things.That would probably be way more efficient than PerRequestBroadcastFilter tweaking.\n\nAs of today, when posting a message to the event bus, all pages who have the @Subscribed-decorated method suitable to process this message will do it, which is not always desirable.\n\nI'm looking forward to hear from you.\n\nRegards\nI've attached a quickstart demonstrating the fact that when posting to the event bus, all clients registered to that resource receive the message. But, it is visually obvious in this example that it is not desired behaviour.\n\nFYI, it's based on Emond's own quickstart.\ndoesn't adding custom predicate in @Subscribe  solves the problem? \n\n\n\nNot really, because if you post on the event bus with two clients registered, if I understand things correctly, the predicate which returns true sends the response to both clients, even if the other one returns false.\n\nLet me explain a little more what is the current behaviour. Let's say that two clients A & B have the right @Subscribe method. Let's say that you send an event e to the event bus for that method. Then A processes e and sends the same response to both A & B. Then B processes the same event and sends a response to both A & B, too. So we have two responses received by both A & B. I have an app where it's visually obvious: I send a small notification in my @Subscribe method. The notification displays two times in each browser A & B. Which is what make me think it works like that. Plus, it looks consistent with what I know from Atmosphere's Meteor API (which is called under the hood). Hence the request for a Broadcaster-based solution.\n\nIf I use a predicate which returns true for A and false for B, here is what apparently occurs: A sends its response to both A & B since the predicate returns true. And B doesn't send anything since the predicate returns false. But the * same * response returns to both A & B since it comes from A.\n\nWhat I would like to be able to do is to have a response computed by B's AtmosphereBehavior instance sent to B and a response computed by A's AtmosphereBehavior instance sent to A. Because those 2 responses can potentially be a little bit different from each other.\n\nDoes it make sense? Am I doing assumptions that I should not?\n\nOne more thing. Quoting wicket-atmosphere's JavaDoc: \"The filter cannot rely on any context. For example, the RequestCycle may not be available\". This seems to me a little bit limited. I fully understand why this is like this for the predicate. But if we have a way to dispatch the right event to the right @Subscribe method (or a channel implementation of any sort), maybe we will be able to filter things with more context, so that would be potentially easier.\n\nOK, any thoughts about that?\n\nKind regards,\n\nPierre\nsee code below,i mean something like this,you can change/improve according to your usecase\n\n public class InputWrapper<T> {\n        /**\n         *\n         * @param input\n         * @param id  id is sessionid of sender\n         */\n        public InputWrapper(T input, String  id){\n            this.input=input;\n            this.sender=id;\n        }\n\n        public T getInput() {\n            return input;\n        }\n\n        public String getSender() {\n            return sender;\n        }\n\n        T input;\n        String sender;\n    }\n\n    /**\n     * compare sessionid and return true if session id of sender is same as receiver\n     */\n    public  class SomePredicate implements Predicate<InputWrapper>{\n        @Override\n        public boolean apply(@Nullable InputWrapper wrapper) {\n            return wrapper.getSender().equals(Session.get().getId());\n        }\n    }\n\n\nYes, that's totally it! But unfortunately, my arguments below still apply.\n\nPlus, it gives me strange exceptions to use this kind of things: UnknwonBehaviorIdException, NullPointerException because the appended component can't be found, etc. I tried using this kind of code but was forced to strip it because of these exceptions.\nafaik what wicket-atmosphere does is it filters the overall subscribers based on if their corresponding predicate returns true or not when event is posted ,if a predicate of subscriber returns true then the method/subscriber gets invoked else not so in above case with \"SomePredicate\" if client A has sent response then predicate returns true only if A is receiver and hence only A gets response.\ni can't reproduce your exception...\nUnfortunately, my experience is that if a predicate matches for a client and doesn't matches for the others, the matching predicate sends the response to all clients. So in our case the message is sent only once, and not as many times as there are connected clients, but to all the connected clients. Which I find pretty annoying.\n\nRegarding my exception, it only happens when using complex HTML, in one of my projects, it is totally absent. But in another one, it happens on a regular basis.\nI agree that the filter construction is a bit weak. It can only be used to filter on properties of the event itself, not on properties of the receiver. The reason for this is that it is expensive to setup the entire context, such as the session and a request cycle. I think it should be possible to add a second filter that runs inside the AtmosphereRequestHandler, at which point the session, request cylcle and even the page are available.\nI've just pushed the implementation of a context aware filter. I've also updated the example to show how this works. Be advised though that filtering within the context of a Wicket request cyle is expensive. If you can implement the desired behavior via the Atmosphere API, I suggest you do so, because that should be much less expensive.\n\nWrapping the Atmosphere api is not what Wicket-Atmosphere is for, it is a bridge not a wrapper.\nGood evening,\n\nI've just tried it. The behaviour is the same: if three clients are connected and that only one's filter returns true, then the same message goes to all the three clients. If two of them return true, then those two send the message to the three clients, and so on.\n\nPersonally, I'd like to be able to have the message sent by one client broadcasted to only this client. Of course, the use case of \"one client sends to all\" is useful, I just wish it was not the only one possible.\n\nAnyway, your \"contextAwareFilter\" is useful, thanks for that !\n\nI've tried myself to implement a Broadcaster-based message-sending in your code, but for the moment, I failed. Too bad. The one thing I miss is how to provide an AtmosphereResource to my Broadcaster.\n\nAnyway, keep up the good work! :-)\nI don't see how you could return true for one client and false for another (other than using something like random). filter() is used with no receiver context at all. It is meant to be used to filter certain types of events (other than the actual instance type). For example, if you have an event that contains progress of a job and you only want your component to receive the events if the progress is 80% or higher, that's when you use filter(). The same filter should always return true for the same events.\n\nCan you take a look at commit a5421ec488020a3835d49962e1f772dc1435e230? I've added methods to post an event to a single resource, either with a resource instance or via its uuid (which I think makes more sense). You can get the UUID with AtmosphereResource.getUUID(page).\nThanks again! I've tried this new code, but unfortunately the situation is the same: all the connected resources are refreshed when issuing: Application.get().getEventBus().post(MyObject, pageUuid), not just the one that I'm expecting.\n\nSorry about that, I don't know what could be wrong.\n", "issueSearchSentences": ["Can you take a look at commit a5421ec488020a3835d49962e1f772dc1435e230?", "Regards", "I've added methods to post an event to a single resource, either with a resource instance or via its uuid (which I think makes more sense).", "Let's say that two clients A & B have the right @Subscribe method.", "}"], "issueSearchIndexes": [103, 10, 104, 17, 49]}
{"aId": 15, "code": "protected ResourceReference newCssResource()\n\t{\n\t\treturn CSS;\n\t}", "comment": " Allows to override CSS contribution. Returning null means the CSS will be contributed via other sources, e.g. a global CSS resource.", "issueId": "WICKET-3607", "issueStringList": ["make ModalWindow CSS contibution more configurable", "Right now if you want to modify the CSS of ModalWindow you still get added to page the original CSS as it is included in", "Initialize", "private void init()", "{", "setVersioned(false);", "cookieName = null;", "add(empty = new WebMarkupContainer(getContentId()));", "add(newCloseButtonBehavior());", "add(new WindowClosedBehavior());", "add(JavascriptPackageResource.getHeaderContribution(JAVASCRIPT));", "add(CSSPackageResource.getHeaderContribution(CSS));", "}", "I propose to do this as", "Initialize", "private void init()", "{", "setVersioned(false);", "cookieName = null;", "add(empty = new WebMarkupContainer(getContentId()));", "add(newCloseButtonBehavior());", "add(new WindowClosedBehavior());", "add(JavascriptPackageResource.getHeaderContribution(JAVASCRIPT));", "ResourceReference CSS = newCssResource();", "if (CSS != null)", "add(CSSPackageResource.getHeaderContribution(CSS));", "}", "Allows to override CSS contribution.", "Returning null means the CSS will be contributed via", "other sources, e.g.", "a global CSS resource.", "@return The CSS resource reference or null if CSS is contributed via other means.", "protected ResourceReference newCssResource()", "{", "return CSS;", "}", "This will allow to easily override the CSS file.... or avoid including one (returning null)... in case the CSS is part of a \"global\" page CSS...", "Existing applications will not be affected", "patch to FIX the issue"], "SplitGT": [" Allows to override CSS contribution.", "Returning null means the CSS will be contributed via other sources, e.g.", "a global CSS resource."], "issueString": "make ModalWindow CSS contibution more configurable\nRight now if you want to modify the CSS of ModalWindow you still get added to page the original CSS as it is included in\n\n/**\n\t * Initialize\n\t */\n\tprivate void init()\n\t{\n\t\tsetVersioned(false);\n\t\tcookieName = null;\n\n\t\tadd(empty = new WebMarkupContainer(getContentId()));\n\n\t\tadd(newCloseButtonBehavior());\n\t\tadd(new WindowClosedBehavior());\n\n\t\tadd(JavascriptPackageResource.getHeaderContribution(JAVASCRIPT));\n\t\tadd(CSSPackageResource.getHeaderContribution(CSS));\n\t}\n\n\nI propose to do this as\n\n/**\n\t * Initialize\n\t */\n\tprivate void init()\n\t{\n\t\tsetVersioned(false);\n\t\tcookieName = null;\n\n\t\tadd(empty = new WebMarkupContainer(getContentId()));\n\n\t\tadd(newCloseButtonBehavior());\n\t\tadd(new WindowClosedBehavior());\n\n\t\tadd(JavascriptPackageResource.getHeaderContribution(JAVASCRIPT));\n\t\tResourceReference CSS = newCssResource();\n\t\tif (CSS != null)\n\t\t\tadd(CSSPackageResource.getHeaderContribution(CSS));\n\t}\n\n\t/**\n\t * Allows to override CSS contribution. Returning null means the CSS will be contributed via\n\t * other sources, e.g. a global CSS resource.\n\t * \n\t * @return The CSS resource reference or null if CSS is contributed via other means.\n\t */\n\tprotected ResourceReference newCssResource()\n\t{\n\t\treturn CSS;\n\t}\n\nThis will allow to easily override the CSS file.... or avoid including one (returning null)... in case the CSS is part of a \"global\" page CSS... Existing applications will not be affected \n\n\n\npatch to FIX the issue\n", "issueSearchSentences": ["@return The CSS resource reference or null if CSS is contributed via other means.", "add(JavascriptPackageResource.getHeaderContribution(JAVASCRIPT));", "{", "a global CSS resource.", "ResourceReference CSS = newCssResource();"], "issueSearchIndexes": [32, 23, 34, 31, 24]}
{"aId": 16, "code": "protected void flushResponseAfterHeaders(final WebResponse response)\n\t{\n\t\tresponse.flush();\n\t}", "comment": " Flushes the response after setting the headers. This is necessary for Firefox if this resource is an image, otherwise it messes up other images on page.", "issueId": "WICKET-4342", "issueStringList": ["Allow resources disable the flushing of the response after setting the headers", "Currently org.apache.wicket.request.resource.AbstractResource#setResponseHeaders() flushes the response after setting the headers.", "Matej added this with revision da1077e12e690fda9a7f47a745308a156df738bd because:", "This is necessary for Firefox if this resource is an image, otherwise it messes up other images on page.", "In some cases this flush causes troubles because it doesn't allow to reset the response in #onWriteCallback().", "It will be better if the flushing is configurable."], "SplitGT": [" Flushes the response after setting the headers.", "This is necessary for Firefox if this resource is an image, otherwise it messes up other images on page."], "issueString": "Allow resources disable the flushing of the response after setting the headers\nCurrently org.apache.wicket.request.resource.AbstractResource#setResponseHeaders() flushes the response after setting the headers.\nMatej added this with revision da1077e12e690fda9a7f47a745308a156df738bd because:\nThis is necessary for Firefox if this resource is an image, otherwise it messes up other images on page.\n\nIn some cases this flush causes troubles because it doesn't allow to reset the response in #onWriteCallback().\nIt will be better if the flushing is configurable.\n", "issueSearchSentences": ["This is necessary for Firefox if this resource is an image, otherwise it messes up other images on page.", "protected void flushResponseAfterHeaders(final WebResponse response)\n\t{\n\t\tresponse.flush();\n\t}", "Allow resources disable the flushing of the response after setting the headers", "Currently org.apache.wicket.request.resource.AbstractResource#setResponseHeaders() flushes the response after setting the headers.", "Matej added this with revision da1077e12e690fda9a7f47a745308a156df738bd because:"], "issueSearchIndexes": [4, 0, 1, 2, 3]}
{"aId": 17, "code": "@Override\n\tprotected IRequestCycleProcessor newRequestCycleProcessor()\n\t{\n\t\tWebRequestCodingStrategy.Settings stratSettings = new WebRequestCodingStrategy.Settings();\n\t\tstratSettings.setMountsCaseSensitive(false);\n\n\t\tWebRequestCodingStrategy strat = new WebRequestCodingStrategy(stratSettings);\n\t\treturn new CompoundRequestCycleProcessor(strat);\n\t}", "comment": " Sets up a request coding strategy that uses case-insensitive mounts", "issueId": "WICKET-82", "issueStringList": ["Support case insensitive mount paths", "http://www.nabble.com/Non-case-sensitive-nice-URL-tf2643746.html", "I use nice URL to mount some page in the usual way :", "mountBookmarkablePage(\"/Organization\", Organization.class);", "That is great, but it will make an error if a user enter the url by hand and decide to not use case sensitive.", "I mean, I can mount organization without the capital letter, but it would make the same error if the user use Capital after that.", "Is there a way of using Nice URL that is not case sensitive?", "Thanks", "Marc", "for demo see NiceUrlApplication, namely", "class NiceUrlApplication extends WicketExampleApplication {", "...", "Sets up a request coding strategy that uses case-insensitive mounts", "@see wicket.protocol.http.WebApplication#newRequestCycleProcessor()", "protected IRequestCycleProcessor newRequestCycleProcessor()", "{", "WebRequestCodingStrategy.Settings stratSettings = new WebRequestCodingStrategy.Settings();", "stratSettings.setMountsCaseSensitive(false);", "WebRequestCodingStrategy strat = new WebRequestCodingStrategy(stratSettings);", "return new CompoundRequestCycleProcessor(strat);", "}", "...", "}"], "SplitGT": [" Sets up a request coding strategy that uses case-insensitive mounts"], "issueString": "Support case insensitive mount paths\nhttp://www.nabble.com/Non-case-sensitive-nice-URL-tf2643746.html\n\nI use nice URL to mount some page in the usual way :\nmountBookmarkablePage(\"/Organization\", Organization.class);\n\nThat is great, but it will make an error if a user enter the url by hand and decide to not use case sensitive.  I mean, I can mount organization without the capital letter, but it would make the same error if the user use Capital after that.\n\nIs there a way of using Nice URL that is not case sensitive?\n\nThanks\n\nMarc\n\nfor demo see NiceUrlApplication, namely\n\nclass NiceUrlApplication extends WicketExampleApplication {\n...\n/**\n\t * Sets up a request coding strategy that uses case-insensitive mounts\n\t * \n\t * @see wicket.protocol.http.WebApplication#newRequestCycleProcessor()\n\t */\n\tprotected IRequestCycleProcessor newRequestCycleProcessor()\n\t{\n\t\tWebRequestCodingStrategy.Settings stratSettings = new WebRequestCodingStrategy.Settings();\n\t\tstratSettings.setMountsCaseSensitive(false);\n\n\t\tWebRequestCodingStrategy strat = new WebRequestCodingStrategy(stratSettings);\n\t\treturn new CompoundRequestCycleProcessor(strat);\n\t}\n\n...\n}\n", "issueSearchSentences": ["stratSettings.setMountsCaseSensitive(false);", "{", "WebRequestCodingStrategy strat = new WebRequestCodingStrategy(stratSettings);", "WebRequestCodingStrategy.Settings stratSettings = new WebRequestCodingStrategy.Settings();", "@see wicket.protocol.http.WebApplication#newRequestCycleProcessor()"], "issueSearchIndexes": [18, 16, 19, 17, 14]}
{"aId": 18, "code": "public Object getConvertedInput()\n\t{\n\t\tMutableDateTime date = new MutableDateTime(dateField.getConvertedInput());\n\t\tInteger hours = (Integer)hoursField.getConvertedInput();\n\t\tInteger minutes = (Integer)minutesField.getConvertedInput();\n\t\tAM_PM amOrPm = (AM_PM)amOrPmChoice.getConvertedInput();\n\n\t\tif (date != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tTimeZone zone = getClientTimeZone();\n\t\t\t\tif (zone != null)\n\t\t\t\t{\n\t\t\t\t\tdate.setZone(DateTimeZone.forTimeZone(zone));\n\t\t\t\t}\n\n\t\t\t\tif (hours != null)\n\t\t\t\t{\n\t\t\t\t\tdate.set(DateTimeFieldType.hourOfHalfday(), hours.intValue() % 12);\n\t\t\t\t\tdate.setMinuteOfHour((minutes != null) ? minutes.intValue() : 0);\n\t\t\t\t}\n\t\t\t\tif (amOrPm == AM_PM.PM)\n\t\t\t\t{\n\t\t\t\t\tdate.set(DateTimeFieldType.halfdayOfDay(), 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdate.set(DateTimeFieldType.halfdayOfDay(), 0);\n\t\t\t\t}\n\n\t\t\t\t// the date will be in the server's timezone\n\t\t\t\treturn date.toDate();\n\t\t\t}\n\t\t\tcatch (RuntimeException e)\n\t\t\t{\n\t\t\t\tDateTimeField.this.error(e.getMessage());\n\t\t\t\tinvalid();\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\t}", "comment": " Note that overriding this method is a better option than overriding #updateModel like the first versions of this class did. Thereason for that is that this method can be used by form validators without having to depend on the actual model being updated, and this method is called by the default implementation of #updateModelanyway (so we don't have to override that anymore).", "issueId": "WICKET-500", "issueStringList": ["org.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation.", "org.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation.", "The situation:", "markup:", "<span wicket:id=\"arrivalDateProperty\" id=\"arrivalDateProperty\"", "type=\"text\" size=\"15\"></span>", "the code:", "final DateField arrivalDatePropertyTextField = new DateField(", "\"arrivalDateProperty\");", "arrivalDatePropertyTextField.add(DateValidator", ".minimum(new DateMidnight().toDate()));", "add(arrivalDatePropertyTextField);", "the generated markup:", "<span id=\"arrivalDateProperty\" name=\"arrivalDateProperty\" type=\"text\" size=\"15\">", "<span style=\"white-space: nowrap;\">", "<input id=\"date0\" name=\"arrivalDateProperty:date\" value=\"25.04.07\" type=\"text\" size=\"8\"/>", "<span>&nbsp;<div style=\"display:none;z-index: 99999;position:absolute;\" id=\"date0Dp\"></div><img style=\"cursor: pointer; border: none;\" id=\"date0Icon\" src=\"resources/org.apache.wicket.extensions.yui.calendar.DatePicker/icon1.gif\" /></span><input type=\"hidden\"/>", "</span>", "</span>", "The stacktrace", "DateConverter.convertToObject(String, Locale) line: 37", "DateField(FormComponent).convert() line: 803", "Form$13.validate(FormComponent) line: 1051", "[...]", "shows that DateField 's convert() is called, which in this situation is looking for the parameter \"arrivalDateProperty\" whereas it probably should look for the parameter \"arrivalDateProperty:date\"", "Probably its DateTextField value should be validated.", "My first shot would be delegating the the DateField 's convert() method to its DateTextField ' s convert() method,", "but maybe the wicket way is different.", "mf", "The stack trace doesn't make sense to me.", "Could you please update to the latest sources and paste in the full stack trace?", "Thanks.", "I'm sorry, probably I missed a relevant detail, there is a validator added to the form.", "It might be that DateField.getConvertedInput() is missing the right input.", "add(new AbstractFormValidator() {", "public void validate(Form form) {", "if (!new DateMidnight(arrivalDatePropertyTextField", ".getConvertedInput())", ".isBefore(new DateMidnight(", "departureDatePropertyTextField", ".getConvertedInput()))) {", "final String key = resourceKey();", "departureDatePropertyTextField.error(key);", "}", "}", "public FormComponent[] getDependentFormComponents() {", "return new FormComponent[] { arrivalDatePropertyTextField,", "departureDatePropertyTextField };", "}", "});", "I solved it by removing final from FormComponent#getConvertedInput and implementing that method appropriately in DateField and DateTimeField.", "This replaces the implementation of updateModel.", "Comment from DateField's and DateTimeField's getConvertedInput Javadoc:", "Note that overriding this method is a better option than overriding", "{@link #updateModel()} like the first versions of this class did.", "The", "reason for that is that this method can be used by form validators", "without having to depend on the actual model being updated, and this", "method is called by the default implementation of {@link #updateModel()}", "anyway (so we don't have to override that anymore)."], "SplitGT": [" Note that overriding this method is a better option than overriding #updateModel like the first versions of this class did.", "Thereason for that is that this method can be used by form validators without having to depend on the actual model being updated, and this method is called by the default implementation of #updateModelanyway (so we don't have to override that anymore)."], "issueString": "org.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation.\norg.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation.\n\nThe situation:\nmarkup:\n<span wicket:id=\"arrivalDateProperty\" id=\"arrivalDateProperty\"\n\t\t\t\t\ttype=\"text\" size=\"15\"></span>\n\nthe code:\n\t\t\tfinal DateField arrivalDatePropertyTextField = new DateField(\n\t\t\t\t\t\"arrivalDateProperty\");\n\t\t\tarrivalDatePropertyTextField.add(DateValidator\n\t\t\t\t\t.minimum(new DateMidnight().toDate()));\n\t\t\tadd(arrivalDatePropertyTextField);\n\nthe generated markup:\n<span id=\"arrivalDateProperty\" name=\"arrivalDateProperty\" type=\"text\" size=\"15\">\n  <span style=\"white-space: nowrap;\">\n    <input id=\"date0\" name=\"arrivalDateProperty:date\" value=\"25.04.07\" type=\"text\" size=\"8\"/>\n<span>&nbsp;<div style=\"display:none;z-index: 99999;position:absolute;\" id=\"date0Dp\"></div><img style=\"cursor: pointer; border: none;\" id=\"date0Icon\" src=\"resources/org.apache.wicket.extensions.yui.calendar.DatePicker/icon1.gif\" /></span><input type=\"hidden\"/>\n  </span>\n</span>\n\n\nThe stacktrace\nDateConverter.convertToObject(String, Locale) line: 37\t\nDateField(FormComponent).convert() line: 803\t\nForm$13.validate(FormComponent) line: 1051\t\n[...]\nshows that DateField 's convert() is called, which in this situation is looking for the parameter \"arrivalDateProperty\" whereas it probably should look for the parameter \"arrivalDateProperty:date\"\n\nProbably its DateTextField value should be validated.\n\nMy first shot would be delegating the the DateField 's convert() method to its DateTextField ' s convert() method,\nbut maybe the wicket way is different.\n\nmf\nThe stack trace doesn't make sense to me. Could you please update to the latest sources and paste in the full stack trace? Thanks.\nI'm sorry, probably I missed a relevant detail, there is a validator added to the form.\nIt might be that DateField.getConvertedInput() is missing the right input.\n\n    \t\tadd(new AbstractFormValidator() {\n\t\t\t\tpublic void validate(Form form) {\n\t\t\t\t\tif (!new DateMidnight(arrivalDatePropertyTextField\n\t\t\t\t\t\t\t.getConvertedInput())\n\t\t\t\t\t\t\t.isBefore(new DateMidnight(\n\t\t\t\t\t\t\t\t\tdepartureDatePropertyTextField\n\t\t\t\t\t\t\t\t\t\t\t.getConvertedInput()))) {\n\t\t\t\t\t\tfinal String key = resourceKey();\n\t\t\t\t\t\tdepartureDatePropertyTextField.error(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic FormComponent[] getDependentFormComponents() {\n\t\t\t\t\treturn new FormComponent[] { arrivalDatePropertyTextField,\n\t\t\t\t\t\t\tdepartureDatePropertyTextField };\n\t\t\t\t}\n\n\t\t\t});\nI solved it by removing final from FormComponent#getConvertedInput and implementing that method appropriately in DateField and DateTimeField. This replaces the implementation of updateModel.\n\nComment from DateField's and DateTimeField's getConvertedInput Javadoc:\n\n\t * Note that overriding this method is a better option than overriding\n\t * {@link #updateModel()} like the first versions of this class did. The\n\t * reason for that is that this method can be used by form validators\n\t * without having to depend on the actual model being updated, and this\n\t * method is called by the default implementation of {@link #updateModel()}\n\t * anyway (so we don't have to override that anymore).\n\n\n\n\n", "issueSearchSentences": ["if (!new DateMidnight(arrivalDatePropertyTextField", "departureDatePropertyTextField", "public void validate(Form form) {", "<span style=\"white-space: nowrap;\">", "[...]"], "issueSearchIndexes": [37, 40, 36, 15, 24]}
{"aId": 19, "code": "public void setAdjustInputWidth(final boolean adjustInputWidth)\r\n    {\r\n        this.adjustInputWidth = adjustInputWidth;\r\n    }", "comment": " Adjust the width of the autocompleter selection window to the width of the related input field. Otherwise the size will depend on the default browser behavior and CSS.", "issueId": "WICKET-1716", "issueStringList": ["make autocompleter more customizable", "disclaimer: Excuse this somehow large explanation :-(", "Problems in current wicket autocompleter implementation (including patch)", "Wicket will by default make the width of the autocompleter the same as the width of the related input field.", "This is often useful but also can be really nasty sometimes.", "Imagine you have a text input field to enter the ISBN of a book (size: 13 digits).", "While typing any parts of the book's title, author, genre, year or ISBN the autocompleter should pop up a list of book entries which contain the matching input string:", "autocompleter output (structure)", "item 1 ---", "ISBN 1", "AUTHOR 1", "TITLE 1", "GENRE 1", "YEAR 1", "item 2 ---", "ISBN 2", "AUTHOR 2", "TITLE 2", "GENRE 2", "YEAR 2", "...", "item n ---", "When pressing enter the input field will be set to the ISBN of the currently selected book.", "BTW since WICKET-488 is resolved the other read-only fields of the form will contain title, author, etc.", "(Thanks, Igor!!", ":-)", "Now the problem: Typically the width of the autocompleter entry shown in the popup (especially the book title) will be a lot longer than the 13 digit ISBN number.", "The only chance to grow the wicket autocompleter window to the required size is to make the input field ridiculously long so the windows will adjust to that size.", "This is really ugly and wastes a lot of space in the user interface for no reason.", "Also it will confuse the user who thinks the input really needs to be that long.", "Typically wicket's autocompleter markup looks like this:", "HTML", "<div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px; width: 155px;\" class=\"wicket-aa-container\">", "<div class=\"wicket-aa\" id=\"text1-autocomplete\">", "<ul>", "<li class=\"selected\" textvalue=\"978-1932394986\">.....</li>", "<li textvalue=\"978-1932394222\">.....</li>", "....", "<li textvalue=\"978-1932311186\">.....</li>", "</ul>", "</div>", "</div>", "The 'style' attribute in the <div> contains 'width:155px' and is impossible to override from CSS because 'style' is \"stronger\" (the 'cascading' in css).", "So I attached a patch to enable / disable the adjustment of the width to the input field.", "JAVA", "final AutoCompleteSettings opts = new AutoCompleteSettings();", "opts.setAdjustInputWidth(false);", "field.add(new AutoCompleteBehavior(renderer, opts)", "...", "The markup will now look like this:", "HTML", "<div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container\">", "Notice the lack of the 'width' attribute...", "Now to resolve the problem you could write:", "MYSTYLE.CSS", ".wicket-aa-container {", "width: 300px;", "}", "However this will not only grow the great book autocompleter to the desired width but also all other autocompleters ever being used on the same page (or the scope of the CSS).", "Also you can _NOT_ do this:", "MYSTYLE.CSS", "#isbn1-autocomplete-container {", "width: 300px;", "}", "Because a linked stylesheet is typically static (and cached by the browser) and the DOM id of the autocompleter is generated dynamically.", "And, no: I don't consider generating dynamic CSS an option for such a simple problem.", "So what would be just great is the possibility to add an extra css class to the container tag:", "JAVA", "final AutoCompleteSettings opts = new AutoCompleteSettings();", "opts.setCssClassName(\"book-autocompleter\");", "opts.setAdjustInputWidth(false);", "field.add(new AutoCompleteBehavior(renderer, opts)", "...", "HTML", "<div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container book-autocompleter\">", "You will immediately notice the additional class name 'book-autocompleter'", "MYSTYLE.CSS", ".book-autocompleter {", "width: 300px;", "}", "To summarize my patch:", "Two extra methods in org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings", "Sets an CSS class name to add to the autocompleter markup container", "<p/>", "This makes it easier to have multiple autocompleters in your application", "with different style and layout.", "@param cssClassName valid CSS class name", "public void setCssClassName(final String cssClassName)", "Adjust the width of the autocompleter selection window to the width of the related input field.", "<p/>", "Otherwise the size will depend on the default browser behavior and CSS.", "@param adjustInputWidth  <code>true</code> if the autocompleter should have the same size  as", "the input field, <code>false</code> for default browser behavior", "public void setAdjustInputWidth(final boolean adjustInputWidth)", "Unless you call these methods the autocompleter will behave exactly as before so this will not break previous code.", "Would be just great to see this patch applied :-)", "Wow, that was quick!", "Thank you :-)"], "SplitGT": [" Adjust the width of the autocompleter selection window to the width of the related input field.", "Otherwise the size will depend on the default browser behavior and CSS."], "issueString": "make autocompleter more customizable\ndisclaimer: Excuse this somehow large explanation :-(\n\nProblems in current wicket autocompleter implementation (including patch)\n\nWicket will by default make the width of the autocompleter the same as the width of the related input field. This is often useful but also can be really nasty sometimes. Imagine you have a text input field to enter the ISBN of a book (size: 13 digits). While typing any parts of the book's title, author, genre, year or ISBN the autocompleter should pop up a list of book entries which contain the matching input string:\n\n  autocompleter output (structure)\n\n  --- item 1 ---\n  ISBN 1\n  AUTHOR 1\n  TITLE 1\n  GENRE 1\n  YEAR 1 \n  --- item 2 ---\n  ISBN 2\n  AUTHOR 2\n  TITLE 2\n  GENRE 2\n  YEAR 2\n  --------------\n  ...\n  --- item n ---\n\nWhen pressing enter the input field will be set to the ISBN of the currently selected book.\n\nBTW since WICKET-488 is resolved the other read-only fields of the form will contain title, author, etc. (Thanks, Igor!! :-)\n\nNow the problem: Typically the width of the autocompleter entry shown in the popup (especially the book title) will be a lot longer than the 13 digit ISBN number. The only chance to grow the wicket autocompleter window to the required size is to make the input field ridiculously long so the windows will adjust to that size. This is really ugly and wastes a lot of space in the user interface for no reason. Also it will confuse the user who thinks the input really needs to be that long.\n\nTypically wicket's autocompleter markup looks like this:\n\n HTML\n\n  <div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px; width: 155px;\" class=\"wicket-aa-container\">\n  \t  <div class=\"wicket-aa\" id=\"text1-autocomplete\">\n\t\t  <ul>\n  \t\t      <li class=\"selected\" textvalue=\"978-1932394986\">.....</li>\n\t\t      <li textvalue=\"978-1932394222\">.....</li>\n\t\t      ....\n\t\t      <li textvalue=\"978-1932311186\">.....</li>\n\t\t  </ul>\n\t  </div>\n  </div>\n\nThe 'style' attribute in the <div> contains 'width:155px' and is impossible to override from CSS because 'style' is \"stronger\" (the 'cascading' in css).\n\nSo I attached a patch to enable / disable the adjustment of the width to the input field.\n\n  JAVA\n\n    final AutoCompleteSettings opts = new AutoCompleteSettings();\n    opts.setAdjustInputWidth(false);\n    field.add(new AutoCompleteBehavior(renderer, opts)\n    ...\n\nThe markup will now look like this:\n\n  HTML\n\n    <div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container\">\n\nNotice the lack of the 'width' attribute...\n\nNow to resolve the problem you could write:\n\n  MYSTYLE.CSS\n\n    .wicket-aa-container {\n      width: 300px; \n    }\n\nHowever this will not only grow the great book autocompleter to the desired width but also all other autocompleters ever being used on the same page (or the scope of the CSS). Also you can _NOT_ do this:\n\n  MYSTYLE.CSS\n\n    #isbn1-autocomplete-container {\n      width: 300px;\n    }\n\nBecause a linked stylesheet is typically static (and cached by the browser) and the DOM id of the autocompleter is generated dynamically. And, no: I don't consider generating dynamic CSS an option for such a simple problem.\n\nSo what would be just great is the possibility to add an extra css class to the container tag:\n\n  JAVA\n\n    final AutoCompleteSettings opts = new AutoCompleteSettings();\n    opts.setCssClassName(\"book-autocompleter\");\n    opts.setAdjustInputWidth(false);\n    field.add(new AutoCompleteBehavior(renderer, opts)\n    ...\n\n  HTML\n\n    <div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container book-autocompleter\">\n\nYou will immediately notice the additional class name 'book-autocompleter'\n\n  MYSTYLE.CSS\n\n    .book-autocompleter {\n      width: 300px;\n    }\n\n\nTo summarize my patch:\n\n\nTwo extra methods in org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings\n\n\n  /**\n   * Sets an CSS class name to add to the autocompleter markup container\n   * <p/>\n   * This makes it easier to have multiple autocompleters in your application\n   * with different style and layout.\n   *\n   * @param cssClassName valid CSS class name\n   */\n  public void setCssClassName(final String cssClassName)\n\n\n  /**\n   * Adjust the width of the autocompleter selection window to the width of the related input field.\n   * <p/>\n   * Otherwise the size will depend on the default browser behavior and CSS.\n   *\n    * @param adjustInputWidth  <code>true</code> if the autocompleter should have the same size  as\n   *                           the input field, <code>false</code> for default browser behavior\n   */\n    public void setAdjustInputWidth(final boolean adjustInputWidth)\n\n\nUnless you call these methods the autocompleter will behave exactly as before so this will not break previous code.\n\n\nWould be just great to see this patch applied :-)\nWow, that was quick! Thank you :-)\n", "issueSearchSentences": ["the input field, <code>false</code> for default browser behavior", "@param cssClassName valid CSS class name", "Otherwise the size will depend on the default browser behavior and CSS.", "final AutoCompleteSettings opts = new AutoCompleteSettings();", "opts.setCssClassName(\"book-autocompleter\");"], "issueSearchIndexes": [93, 87, 91, 46, 70]}
{"aId": 21, "code": "protected void setWicketSession(final Request request, final Session session)\n\t{\n\t\tsetAttribute(request, Session.SESSION_ATTRIBUTE_NAME, session);\n\t}", "comment": " Stores the Wicket Session in an attribute in the HttpSession", "issueId": "WICKET-6358", "issueStringList": ["Possibility for each browser tab to have independent wicket session", "Here are a couple of discussions on the topic:", "https://myfaces.apache.org/orchestra/myfaces-orchestra-core/multiwindow.html", "http://stackoverflow.com/questions/368653/how-to-differ-sessions-in-browser-tabs", "http://stackoverflow.com/questions/4970004/support-multiple-browser-tab-session-j2ee-web-application", "Currently in wicket if user wants to safely use two browser windows in the same application, they must login from different browsers (or use some suitable browser-specific private browsing mode).", "We would like to add functionality into wicket to allow:", "automatic detection of new browser tab", "configuration option which would keep independent wicketsession for each browser tab (initially clone from wicketsession of window that opened new tab)", "possible solution: pagemap and wicketsession could go hand in hand, each pagemap with its own wicketsession to keep them insulated", "We'll start working on this immediately, all suggestions welcome.", "[~mmakundi] Do you have any progress here ?", "Here is an idea how it may work:", "Wicket's Session is just an attribute in the Servlet HttpSession", "by using org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior you can assign different window.name to each tab", "you can use this unique window.name to store/load the current tab's Wicket Session to/from the http session.", "See org.apache.wicket.session.HttpSessionStore#bind() and org.apache.wicket.session.HttpSessionStore#lookup().", "By default those methods use org.apache.wicket.Session#SESSION_ATTRIBUTE_NAME as an attribute name.", "You could use SESSION_ATTRIBUTE_NAME + \":\" + windowName, for example.", "So you need custom ISessionStore and IComponentInstantiationListener that adds AjaxNewWindowNotifyingBehavior to all your pages.", "See https://github.com/martin-g/blogs/tree/master/session-per-tab for a demo app.", "It needs more testing and polishing but this simple version seems to work."], "SplitGT": [" Stores the Wicket Session in an attribute in the HttpSession"], "issueString": "Possibility for each browser tab to have independent wicket session\nHere are a couple of discussions on the topic:\n\nhttps://myfaces.apache.org/orchestra/myfaces-orchestra-core/multiwindow.html\nhttp://stackoverflow.com/questions/368653/how-to-differ-sessions-in-browser-tabs\nhttp://stackoverflow.com/questions/4970004/support-multiple-browser-tab-session-j2ee-web-application\n\nCurrently in wicket if user wants to safely use two browser windows in the same application, they must login from different browsers (or use some suitable browser-specific private browsing mode).\n\nWe would like to add functionality into wicket to allow:\n- automatic detection of new browser tab\n- configuration option which would keep independent wicketsession for each browser tab (initially clone from wicketsession of window that opened new tab)\n- possible solution: pagemap and wicketsession could go hand in hand, each pagemap with its own wicketsession to keep them insulated\n\nWe'll start working on this immediately, all suggestions welcome.\n[~mmakundi] Do you have any progress here ?\nHere is an idea how it may work:\n- Wicket's Session is just an attribute in the Servlet HttpSession\n- by using org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior you can assign different window.name to each tab\n- you can use this unique window.name to store/load the current tab's Wicket Session to/from the http session. See org.apache.wicket.session.HttpSessionStore#bind() and org.apache.wicket.session.HttpSessionStore#lookup(). By default those methods use org.apache.wicket.Session#SESSION_ATTRIBUTE_NAME as an attribute name. You could use SESSION_ATTRIBUTE_NAME + \":\" + windowName, for example.\n\nSo you need custom ISessionStore and IComponentInstantiationListener that adds AjaxNewWindowNotifyingBehavior to all your pages.\nSee https://github.com/martin-g/blogs/tree/master/session-per-tab for a demo app.\nIt needs more testing and polishing but this simple version seems to work.\n", "issueSearchSentences": ["you can use this unique window.name to store/load the current tab's Wicket Session to/from the http session.", "by using org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior you can assign different window.name to each tab", "See org.apache.wicket.session.HttpSessionStore#bind() and org.apache.wicket.session.HttpSessionStore#lookup().", "protected void setWicketSession(final Request request, final Session session)\n\t{\n\t\tsetAttribute(request, Session.SESSION_ATTRIBUTE_NAME, session);\n\t}", "Here is an idea how it may work:"], "issueSearchIndexes": [16, 15, 17, 0, 13]}
{"aId": 25, "code": "public boolean isAdjustInputWidth()\r\n    {\r\n        return adjustInputWidth;\r\n    }", "comment": " Tells if wicket should adjust the width of the autocompleter selection window to the width of the related input field.", "issueId": "WICKET-1716", "issueStringList": ["make autocompleter more customizable", "disclaimer: Excuse this somehow large explanation :-(", "Problems in current wicket autocompleter implementation (including patch)", "Wicket will by default make the width of the autocompleter the same as the width of the related input field.", "This is often useful but also can be really nasty sometimes.", "Imagine you have a text input field to enter the ISBN of a book (size: 13 digits).", "While typing any parts of the book's title, author, genre, year or ISBN the autocompleter should pop up a list of book entries which contain the matching input string:", "autocompleter output (structure)", "item 1 ---", "ISBN 1", "AUTHOR 1", "TITLE 1", "GENRE 1", "YEAR 1", "item 2 ---", "ISBN 2", "AUTHOR 2", "TITLE 2", "GENRE 2", "YEAR 2", "...", "item n ---", "When pressing enter the input field will be set to the ISBN of the currently selected book.", "BTW since WICKET-488 is resolved the other read-only fields of the form will contain title, author, etc.", "(Thanks, Igor!!", ":-)", "Now the problem: Typically the width of the autocompleter entry shown in the popup (especially the book title) will be a lot longer than the 13 digit ISBN number.", "The only chance to grow the wicket autocompleter window to the required size is to make the input field ridiculously long so the windows will adjust to that size.", "This is really ugly and wastes a lot of space in the user interface for no reason.", "Also it will confuse the user who thinks the input really needs to be that long.", "Typically wicket's autocompleter markup looks like this:", "HTML", "<div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px; width: 155px;\" class=\"wicket-aa-container\">", "<div class=\"wicket-aa\" id=\"text1-autocomplete\">", "<ul>", "<li class=\"selected\" textvalue=\"978-1932394986\">.....</li>", "<li textvalue=\"978-1932394222\">.....</li>", "....", "<li textvalue=\"978-1932311186\">.....</li>", "</ul>", "</div>", "</div>", "The 'style' attribute in the <div> contains 'width:155px' and is impossible to override from CSS because 'style' is \"stronger\" (the 'cascading' in css).", "So I attached a patch to enable / disable the adjustment of the width to the input field.", "JAVA", "final AutoCompleteSettings opts = new AutoCompleteSettings();", "opts.setAdjustInputWidth(false);", "field.add(new AutoCompleteBehavior(renderer, opts)", "...", "The markup will now look like this:", "HTML", "<div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container\">", "Notice the lack of the 'width' attribute...", "Now to resolve the problem you could write:", "MYSTYLE.CSS", ".wicket-aa-container {", "width: 300px;", "}", "However this will not only grow the great book autocompleter to the desired width but also all other autocompleters ever being used on the same page (or the scope of the CSS).", "Also you can _NOT_ do this:", "MYSTYLE.CSS", "#isbn1-autocomplete-container {", "width: 300px;", "}", "Because a linked stylesheet is typically static (and cached by the browser) and the DOM id of the autocompleter is generated dynamically.", "And, no: I don't consider generating dynamic CSS an option for such a simple problem.", "So what would be just great is the possibility to add an extra css class to the container tag:", "JAVA", "final AutoCompleteSettings opts = new AutoCompleteSettings();", "opts.setCssClassName(\"book-autocompleter\");", "opts.setAdjustInputWidth(false);", "field.add(new AutoCompleteBehavior(renderer, opts)", "...", "HTML", "<div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container book-autocompleter\">", "You will immediately notice the additional class name 'book-autocompleter'", "MYSTYLE.CSS", ".book-autocompleter {", "width: 300px;", "}", "To summarize my patch:", "Two extra methods in org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings", "Sets an CSS class name to add to the autocompleter markup container", "<p/>", "This makes it easier to have multiple autocompleters in your application", "with different style and layout.", "@param cssClassName valid CSS class name", "public void setCssClassName(final String cssClassName)", "Adjust the width of the autocompleter selection window to the width of the related input field.", "<p/>", "Otherwise the size will depend on the default browser behavior and CSS.", "@param adjustInputWidth  <code>true</code> if the autocompleter should have the same size  as", "the input field, <code>false</code> for default browser behavior", "public void setAdjustInputWidth(final boolean adjustInputWidth)", "Unless you call these methods the autocompleter will behave exactly as before so this will not break previous code.", "Would be just great to see this patch applied :-)", "Wow, that was quick!", "Thank you :-)"], "SplitGT": [" Tells if wicket should adjust the width of the autocompleter selection window to the width of the related input field."], "issueString": "make autocompleter more customizable\ndisclaimer: Excuse this somehow large explanation :-(\n\nProblems in current wicket autocompleter implementation (including patch)\n\nWicket will by default make the width of the autocompleter the same as the width of the related input field. This is often useful but also can be really nasty sometimes. Imagine you have a text input field to enter the ISBN of a book (size: 13 digits). While typing any parts of the book's title, author, genre, year or ISBN the autocompleter should pop up a list of book entries which contain the matching input string:\n\n  autocompleter output (structure)\n\n  --- item 1 ---\n  ISBN 1\n  AUTHOR 1\n  TITLE 1\n  GENRE 1\n  YEAR 1 \n  --- item 2 ---\n  ISBN 2\n  AUTHOR 2\n  TITLE 2\n  GENRE 2\n  YEAR 2\n  --------------\n  ...\n  --- item n ---\n\nWhen pressing enter the input field will be set to the ISBN of the currently selected book.\n\nBTW since WICKET-488 is resolved the other read-only fields of the form will contain title, author, etc. (Thanks, Igor!! :-)\n\nNow the problem: Typically the width of the autocompleter entry shown in the popup (especially the book title) will be a lot longer than the 13 digit ISBN number. The only chance to grow the wicket autocompleter window to the required size is to make the input field ridiculously long so the windows will adjust to that size. This is really ugly and wastes a lot of space in the user interface for no reason. Also it will confuse the user who thinks the input really needs to be that long.\n\nTypically wicket's autocompleter markup looks like this:\n\n HTML\n\n  <div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px; width: 155px;\" class=\"wicket-aa-container\">\n  \t  <div class=\"wicket-aa\" id=\"text1-autocomplete\">\n\t\t  <ul>\n  \t\t      <li class=\"selected\" textvalue=\"978-1932394986\">.....</li>\n\t\t      <li textvalue=\"978-1932394222\">.....</li>\n\t\t      ....\n\t\t      <li textvalue=\"978-1932311186\">.....</li>\n\t\t  </ul>\n\t  </div>\n  </div>\n\nThe 'style' attribute in the <div> contains 'width:155px' and is impossible to override from CSS because 'style' is \"stronger\" (the 'cascading' in css).\n\nSo I attached a patch to enable / disable the adjustment of the width to the input field.\n\n  JAVA\n\n    final AutoCompleteSettings opts = new AutoCompleteSettings();\n    opts.setAdjustInputWidth(false);\n    field.add(new AutoCompleteBehavior(renderer, opts)\n    ...\n\nThe markup will now look like this:\n\n  HTML\n\n    <div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container\">\n\nNotice the lack of the 'width' attribute...\n\nNow to resolve the problem you could write:\n\n  MYSTYLE.CSS\n\n    .wicket-aa-container {\n      width: 300px; \n    }\n\nHowever this will not only grow the great book autocompleter to the desired width but also all other autocompleters ever being used on the same page (or the scope of the CSS). Also you can _NOT_ do this:\n\n  MYSTYLE.CSS\n\n    #isbn1-autocomplete-container {\n      width: 300px;\n    }\n\nBecause a linked stylesheet is typically static (and cached by the browser) and the DOM id of the autocompleter is generated dynamically. And, no: I don't consider generating dynamic CSS an option for such a simple problem.\n\nSo what would be just great is the possibility to add an extra css class to the container tag:\n\n  JAVA\n\n    final AutoCompleteSettings opts = new AutoCompleteSettings();\n    opts.setCssClassName(\"book-autocompleter\");\n    opts.setAdjustInputWidth(false);\n    field.add(new AutoCompleteBehavior(renderer, opts)\n    ...\n\n  HTML\n\n    <div id=\"isbn1-autocomplete-container\" style=\"overflow: auto; position: absolute; left: 8px; top: 30px;\" class=\"wicket-aa-container book-autocompleter\">\n\nYou will immediately notice the additional class name 'book-autocompleter'\n\n  MYSTYLE.CSS\n\n    .book-autocompleter {\n      width: 300px;\n    }\n\n\nTo summarize my patch:\n\n\nTwo extra methods in org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings\n\n\n  /**\n   * Sets an CSS class name to add to the autocompleter markup container\n   * <p/>\n   * This makes it easier to have multiple autocompleters in your application\n   * with different style and layout.\n   *\n   * @param cssClassName valid CSS class name\n   */\n  public void setCssClassName(final String cssClassName)\n\n\n  /**\n   * Adjust the width of the autocompleter selection window to the width of the related input field.\n   * <p/>\n   * Otherwise the size will depend on the default browser behavior and CSS.\n   *\n    * @param adjustInputWidth  <code>true</code> if the autocompleter should have the same size  as\n   *                           the input field, <code>false</code> for default browser behavior\n   */\n    public void setAdjustInputWidth(final boolean adjustInputWidth)\n\n\nUnless you call these methods the autocompleter will behave exactly as before so this will not break previous code.\n\n\nWould be just great to see this patch applied :-)\nWow, that was quick! Thank you :-)\n", "issueSearchSentences": ["the input field, <code>false</code> for default browser behavior", "@param cssClassName valid CSS class name", "Otherwise the size will depend on the default browser behavior and CSS.", "public boolean isAdjustInputWidth()\r\n    {\r\n        return adjustInputWidth;\r\n    }", "make autocompleter more customizable"], "issueSearchIndexes": [93, 87, 91, 0, 1]}
{"aId": 26, "code": "@Override\n\tpublic List<HeaderItem> getDependencies() \n\t{\n\t\treturn getBundleReference().getDependencies();\n\t}", "comment": " Returns the dependencies of the replacing resource reference.", "issueId": "WICKET-5752", "issueStringList": ["ReplacementResourceBundleReference should return the dependencies for the replacing resource ref", "ReplacementResourceBundleReference uses parent getDependencies method while it should override it and return the dependencies of the replacing resource reference."], "SplitGT": [" Returns the dependencies of the replacing resource reference."], "issueString": "ReplacementResourceBundleReference should return the dependencies for the replacing resource ref\nReplacementResourceBundleReference uses parent getDependencies method while it should override it and return the dependencies of the replacing resource reference. \n", "issueSearchSentences": ["ReplacementResourceBundleReference should return the dependencies for the replacing resource ref", "@Override\n\tpublic List<HeaderItem> getDependencies() \n\t{\n\t\treturn getBundleReference().getDependencies();\n\t}"], "issueSearchIndexes": [1, 0]}
{"aId": 27, "code": "protected DataGridView<T> newDataGridView(String id, List<? extends IColumn<T, S>> columns, IDataProvider<T> dataProvider)\n\t{\n\t\treturn new DefaultDataGridView(id, columns, dataProvider);\n\t}", "comment": " Factory method for the DataGridView", "issueId": "WICKET-5520", "issueStringList": ["improve reusability of DataTable and AbstractPageableView", "I have a use case for the org.apache.wicket.extensions.markup.html.repeater.tree.TableTree that asks for some small modifications to the classes org.apache.wicket.extensions.markup.html.repeater.data.table.DataTable and org.apache.wicket.markup.repeater.AbstractPageableView.", "I would like to show a tree structure (only one level deep) in the TableTree where the number of items on a single page is not a fixed number of lines, but the number of top level nodes of the tree structure.", "For this the following changes are needed:", "In AbstractPageableView the method getPageCount should no longer be final.", "In DataTable the constructor creates a DataGridView and assigns is to the member datagrid.", "The creation of the DataGridView should be refactored to a factory method (for example newDataGrid).", "The anonymous inner class should be replaced by a named inner class (a good name would be DefaultDataGridView).", "This inner class should be protected, so it can be subclassed.", "It will be much easier if you just attach a patch!", ":-)"], "SplitGT": [" Factory method for the DataGridView"], "issueString": "improve reusability of DataTable and AbstractPageableView\nI have a use case for the org.apache.wicket.extensions.markup.html.repeater.tree.TableTree that asks for some small modifications to the classes org.apache.wicket.extensions.markup.html.repeater.data.table.DataTable and org.apache.wicket.markup.repeater.AbstractPageableView. I would like to show a tree structure (only one level deep) in the TableTree where the number of items on a single page is not a fixed number of lines, but the number of top level nodes of the tree structure.\nFor this the following changes are needed:\nIn AbstractPageableView the method getPageCount should no longer be final.\nIn DataTable the constructor creates a DataGridView and assigns is to the member datagrid. The creation of the DataGridView should be refactored to a factory method (for example newDataGrid). The anonymous inner class should be replaced by a named inner class (a good name would be DefaultDataGridView). This inner class should be protected, so it can be subclassed.\nIt will be much easier if you just attach a patch! :-)\n", "issueSearchSentences": ["The anonymous inner class should be replaced by a named inner class (a good name would be DefaultDataGridView).", "The creation of the DataGridView should be refactored to a factory method (for example newDataGrid).", "In AbstractPageableView the method getPageCount should no longer be final.", "In DataTable the constructor creates a DataGridView and assigns is to the member datagrid.", "protected DataGridView<T> newDataGridView(String id, List<? extends IColumn<T, S>> columns, IDataProvider<T> dataProvider)\n\t{\n\t\treturn new DefaultDataGridView(id, columns, dataProvider);\n\t}"], "issueSearchIndexes": [8, 7, 5, 6, 0]}
{"aId": 30, "code": "public Object getConvertedInput()\n\t{\n\t\treturn dateField.getConvertedInput();\n\t}", "comment": " Note that overriding this method is a better option than overriding #updateModel like the first versions of this class did. Thereason for that is that this method can be used by form validators without having to depend on the actual model being updated, and this method is called by the default implementation of #updateModelanyway (so we don't have to override that anymore).", "issueId": "WICKET-500", "issueStringList": ["org.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation.", "org.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation.", "The situation:", "markup:", "<span wicket:id=\"arrivalDateProperty\" id=\"arrivalDateProperty\"", "type=\"text\" size=\"15\"></span>", "the code:", "final DateField arrivalDatePropertyTextField = new DateField(", "\"arrivalDateProperty\");", "arrivalDatePropertyTextField.add(DateValidator", ".minimum(new DateMidnight().toDate()));", "add(arrivalDatePropertyTextField);", "the generated markup:", "<span id=\"arrivalDateProperty\" name=\"arrivalDateProperty\" type=\"text\" size=\"15\">", "<span style=\"white-space: nowrap;\">", "<input id=\"date0\" name=\"arrivalDateProperty:date\" value=\"25.04.07\" type=\"text\" size=\"8\"/>", "<span>&nbsp;<div style=\"display:none;z-index: 99999;position:absolute;\" id=\"date0Dp\"></div><img style=\"cursor: pointer; border: none;\" id=\"date0Icon\" src=\"resources/org.apache.wicket.extensions.yui.calendar.DatePicker/icon1.gif\" /></span><input type=\"hidden\"/>", "</span>", "</span>", "The stacktrace", "DateConverter.convertToObject(String, Locale) line: 37", "DateField(FormComponent).convert() line: 803", "Form$13.validate(FormComponent) line: 1051", "[...]", "shows that DateField 's convert() is called, which in this situation is looking for the parameter \"arrivalDateProperty\" whereas it probably should look for the parameter \"arrivalDateProperty:date\"", "Probably its DateTextField value should be validated.", "My first shot would be delegating the the DateField 's convert() method to its DateTextField ' s convert() method,", "but maybe the wicket way is different.", "mf", "The stack trace doesn't make sense to me.", "Could you please update to the latest sources and paste in the full stack trace?", "Thanks.", "I'm sorry, probably I missed a relevant detail, there is a validator added to the form.", "It might be that DateField.getConvertedInput() is missing the right input.", "add(new AbstractFormValidator() {", "public void validate(Form form) {", "if (!new DateMidnight(arrivalDatePropertyTextField", ".getConvertedInput())", ".isBefore(new DateMidnight(", "departureDatePropertyTextField", ".getConvertedInput()))) {", "final String key = resourceKey();", "departureDatePropertyTextField.error(key);", "}", "}", "public FormComponent[] getDependentFormComponents() {", "return new FormComponent[] { arrivalDatePropertyTextField,", "departureDatePropertyTextField };", "}", "});", "I solved it by removing final from FormComponent#getConvertedInput and implementing that method appropriately in DateField and DateTimeField.", "This replaces the implementation of updateModel.", "Comment from DateField's and DateTimeField's getConvertedInput Javadoc:", "Note that overriding this method is a better option than overriding", "{@link #updateModel()} like the first versions of this class did.", "The", "reason for that is that this method can be used by form validators", "without having to depend on the actual model being updated, and this", "method is called by the default implementation of {@link #updateModel()}", "anyway (so we don't have to override that anymore)."], "SplitGT": [" Note that overriding this method is a better option than overriding #updateModel like the first versions of this class did.", "Thereason for that is that this method can be used by form validators without having to depend on the actual model being updated, and this method is called by the default implementation of #updateModelanyway (so we don't have to override that anymore)."], "issueString": "org.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation.\norg.apache.wicket.extensions.yui.calendar.DateField; throws NPE upon validation.\n\nThe situation:\nmarkup:\n<span wicket:id=\"arrivalDateProperty\" id=\"arrivalDateProperty\"\n\t\t\t\t\ttype=\"text\" size=\"15\"></span>\n\nthe code:\n\t\t\tfinal DateField arrivalDatePropertyTextField = new DateField(\n\t\t\t\t\t\"arrivalDateProperty\");\n\t\t\tarrivalDatePropertyTextField.add(DateValidator\n\t\t\t\t\t.minimum(new DateMidnight().toDate()));\n\t\t\tadd(arrivalDatePropertyTextField);\n\nthe generated markup:\n<span id=\"arrivalDateProperty\" name=\"arrivalDateProperty\" type=\"text\" size=\"15\">\n  <span style=\"white-space: nowrap;\">\n    <input id=\"date0\" name=\"arrivalDateProperty:date\" value=\"25.04.07\" type=\"text\" size=\"8\"/>\n<span>&nbsp;<div style=\"display:none;z-index: 99999;position:absolute;\" id=\"date0Dp\"></div><img style=\"cursor: pointer; border: none;\" id=\"date0Icon\" src=\"resources/org.apache.wicket.extensions.yui.calendar.DatePicker/icon1.gif\" /></span><input type=\"hidden\"/>\n  </span>\n</span>\n\n\nThe stacktrace\nDateConverter.convertToObject(String, Locale) line: 37\t\nDateField(FormComponent).convert() line: 803\t\nForm$13.validate(FormComponent) line: 1051\t\n[...]\nshows that DateField 's convert() is called, which in this situation is looking for the parameter \"arrivalDateProperty\" whereas it probably should look for the parameter \"arrivalDateProperty:date\"\n\nProbably its DateTextField value should be validated.\n\nMy first shot would be delegating the the DateField 's convert() method to its DateTextField ' s convert() method,\nbut maybe the wicket way is different.\n\nmf\nThe stack trace doesn't make sense to me. Could you please update to the latest sources and paste in the full stack trace? Thanks.\nI'm sorry, probably I missed a relevant detail, there is a validator added to the form.\nIt might be that DateField.getConvertedInput() is missing the right input.\n\n    \t\tadd(new AbstractFormValidator() {\n\t\t\t\tpublic void validate(Form form) {\n\t\t\t\t\tif (!new DateMidnight(arrivalDatePropertyTextField\n\t\t\t\t\t\t\t.getConvertedInput())\n\t\t\t\t\t\t\t.isBefore(new DateMidnight(\n\t\t\t\t\t\t\t\t\tdepartureDatePropertyTextField\n\t\t\t\t\t\t\t\t\t\t\t.getConvertedInput()))) {\n\t\t\t\t\t\tfinal String key = resourceKey();\n\t\t\t\t\t\tdepartureDatePropertyTextField.error(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic FormComponent[] getDependentFormComponents() {\n\t\t\t\t\treturn new FormComponent[] { arrivalDatePropertyTextField,\n\t\t\t\t\t\t\tdepartureDatePropertyTextField };\n\t\t\t\t}\n\n\t\t\t});\nI solved it by removing final from FormComponent#getConvertedInput and implementing that method appropriately in DateField and DateTimeField. This replaces the implementation of updateModel.\n\nComment from DateField's and DateTimeField's getConvertedInput Javadoc:\n\n\t * Note that overriding this method is a better option than overriding\n\t * {@link #updateModel()} like the first versions of this class did. The\n\t * reason for that is that this method can be used by form validators\n\t * without having to depend on the actual model being updated, and this\n\t * method is called by the default implementation of {@link #updateModel()}\n\t * anyway (so we don't have to override that anymore).\n\n\n\n\n", "issueSearchSentences": ["if (!new DateMidnight(arrivalDatePropertyTextField", "departureDatePropertyTextField", "This replaces the implementation of updateModel.", "public FormComponent[] getDependentFormComponents() {", "I'm sorry, probably I missed a relevant detail, there is a validator added to the form."], "issueSearchIndexes": [37, 40, 52, 46, 33]}
{"aId": 31, "code": "protected Map<String, String> newCache()\n\t{\n\t\treturn new ConcurrentHashMap<String, String>();\n\t}", "comment": " Create a new cache, override this method if you want a different map to store the cache keys, for example a map that hold only the last X number of elements.. By default it uses the ConcurrentHashMap", "issueId": "WICKET-1618", "issueStringList": ["Localizer API should be enhanced so that the cache implementation can be overwritten", "Create a new cache, override this method if you want a different map to store the cache keys,", "for example a map that hold only the last X number of elements..", "By default it uses the {@link ConcurrentHashMap}", "@return cache", "protected Map newCache()", "{", "return new ConcurrentHashMap();", "}"], "SplitGT": [" Create a new cache, override this method if you want a different map to store the cache keys, for example a map that hold only the last X number of elements.. By default it uses the ConcurrentHashMap"], "issueString": "Localizer API should be enhanced so that the cache implementation can be overwritten\n\t/**\n\t * Create a new cache, override this method if you want a different map to store the cache keys,\n\t * for example a map that hold only the last X number of elements..\n\t * \n\t * By default it uses the {@link ConcurrentHashMap}\n\t * \n\t * @return cache\n\t */\n\tprotected Map newCache()\n\t{\n\t\treturn new ConcurrentHashMap();\n\t}\n", "issueSearchSentences": ["@return cache", "{", "By default it uses the {@link ConcurrentHashMap}", "Localizer API should be enhanced so that the cache implementation can be overwritten", "for example a map that hold only the last X number of elements.."], "issueSearchIndexes": [5, 7, 4, 1, 3]}
{"aId": 34, "code": "public void post(Object event, String resourceUuid)\n\t{\n\t\tpost(event, AtmosphereResourceFactory.getDefault().find(resourceUuid));\n\t}", "comment": " Post an event to a single resource.", "issueId": "WICKET-4879", "issueStringList": ["Implementing channels in wicket-atmosphere", "Good evening,", "Now that both Tomcat & Jetty support native WebSockets, it would be a killer-feature to implement Comet / WebSockets channels.", "i.e.", "being able to have a channel id and to post a message to one client only or to all the clients who subscribed to a certain channel.", "For the moment, it is possible to do it, but to the (expensive) price of having a PerRequestBroadcastFilter and tweaking it if we manage to do it.", "But it would be great to have a link to the Broadcaster API from Atmosphere, which I think, supports this kind of things.That would probably be way more efficient than PerRequestBroadcastFilter tweaking.", "As of today, when posting a message to the event bus, all pages who have the @Subscribed-decorated method suitable to process this message will do it, which is not always desirable.", "I'm looking forward to hear from you.", "Regards", "I've attached a quickstart demonstrating the fact that when posting to the event bus, all clients registered to that resource receive the message.", "But, it is visually obvious in this example that it is not desired behaviour.", "FYI, it's based on Emond's own quickstart.", "doesn't adding custom predicate in @Subscribe  solves the problem?", "Not really, because if you post on the event bus with two clients registered, if I understand things correctly, the predicate which returns true sends the response to both clients, even if the other one returns false.", "Let me explain a little more what is the current behaviour.", "Let's say that two clients A & B have the right @Subscribe method.", "Let's say that you send an event e to the event bus for that method.", "Then A processes e and sends the same response to both A & B.", "Then B processes the same event and sends a response to both A & B, too.", "So we have two responses received by both A & B. I have an app where it's visually obvious: I send a small notification in my @Subscribe method.", "The notification displays two times in each browser A & B.", "Which is what make me think it works like that.", "Plus, it looks consistent with what I know from Atmosphere's Meteor API (which is called under the hood).", "Hence the request for a Broadcaster-based solution.", "If I use a predicate which returns true for A and false for B, here is what apparently occurs: A sends its response to both A & B since the predicate returns true.", "And B doesn't send anything since the predicate returns false.", "But the * same * response returns to both A & B since it comes from A.", "What I would like to be able to do is to have a response computed by B's AtmosphereBehavior instance sent to B and a response computed by A's AtmosphereBehavior instance sent to A.", "Because those 2 responses can potentially be a little bit different from each other.", "Does it make sense?", "Am I doing assumptions that I should not?", "One more thing.", "Quoting wicket-atmosphere's JavaDoc: \"The filter cannot rely on any context.", "For example, the RequestCycle may not be available\".", "This seems to me a little bit limited.", "I fully understand why this is like this for the predicate.", "But if we have a way to dispatch the right event to the right @Subscribe method (or a channel implementation of any sort), maybe we will be able to filter things with more context, so that would be potentially easier.", "OK, any thoughts about that?", "Kind regards,", "Pierre", "see code below,i mean something like this,you can change/improve according to your usecase", "public class InputWrapper<T> {", "@param input", "@param id  id is sessionid of sender", "public InputWrapper(T input, String  id){", "this.input=input;", "this.sender=id;", "}", "public T getInput() {", "return input;", "}", "public String getSender() {", "return sender;", "}", "T input;", "String sender;", "}", "compare sessionid and return true if session id of sender is same as receiver", "public  class SomePredicate implements Predicate<InputWrapper>{", "@Override", "public boolean apply(@Nullable InputWrapper wrapper) {", "return wrapper.getSender().equals(Session.get().getId());", "}", "}", "Yes, that's totally it!", "But unfortunately, my arguments below still apply.", "Plus, it gives me strange exceptions to use this kind of things: UnknwonBehaviorIdException, NullPointerException because the appended component can't be found, etc.", "I tried using this kind of code but was forced to strip it because of these exceptions.", "afaik what wicket-atmosphere does is it filters the overall subscribers based on if their corresponding predicate returns true or not when event is posted ,if a predicate of subscriber returns true then the method/subscriber gets invoked else not so in above case with \"SomePredicate\" if client A has sent response then predicate returns true only if A is receiver and hence only A gets response.", "i can't reproduce your exception...", "Unfortunately, my experience is that if a predicate matches for a client and doesn't matches for the others, the matching predicate sends the response to all clients.", "So in our case the message is sent only once, and not as many times as there are connected clients, but to all the connected clients.", "Which I find pretty annoying.", "Regarding my exception, it only happens when using complex HTML, in one of my projects, it is totally absent.", "But in another one, it happens on a regular basis.", "I agree that the filter construction is a bit weak.", "It can only be used to filter on properties of the event itself, not on properties of the receiver.", "The reason for this is that it is expensive to setup the entire context, such as the session and a request cycle.", "I think it should be possible to add a second filter that runs inside the AtmosphereRequestHandler, at which point the session, request cylcle and even the page are available.", "I've just pushed the implementation of a context aware filter.", "I've also updated the example to show how this works.", "Be advised though that filtering within the context of a Wicket request cyle is expensive.", "If you can implement the desired behavior via the Atmosphere API, I suggest you do so, because that should be much less expensive.", "Wrapping the Atmosphere api is not what Wicket-Atmosphere is for, it is a bridge not a wrapper.", "Good evening,", "I've just tried it.", "The behaviour is the same: if three clients are connected and that only one's filter returns true, then the same message goes to all the three clients.", "If two of them return true, then those two send the message to the three clients, and so on.", "Personally, I'd like to be able to have the message sent by one client broadcasted to only this client.", "Of course, the use case of \"one client sends to all\" is useful, I just wish it was not the only one possible.", "Anyway, your \"contextAwareFilter\" is useful, thanks for that !", "I've tried myself to implement a Broadcaster-based message-sending in your code, but for the moment, I failed.", "Too bad.", "The one thing I miss is how to provide an AtmosphereResource to my Broadcaster.", "Anyway, keep up the good work!", ":-)", "I don't see how you could return true for one client and false for another (other than using something like random).", "filter() is used with no receiver context at all.", "It is meant to be used to filter certain types of events (other than the actual instance type).", "For example, if you have an event that contains progress of a job and you only want your component to receive the events if the progress is 80% or higher, that's when you use filter().", "The same filter should always return true for the same events.", "Can you take a look at commit a5421ec488020a3835d49962e1f772dc1435e230?", "I've added methods to post an event to a single resource, either with a resource instance or via its uuid (which I think makes more sense).", "You can get the UUID with AtmosphereResource.getUUID(page).", "Thanks again!", "I've tried this new code, but unfortunately the situation is the same: all the connected resources are refreshed when issuing: Application.get().getEventBus().post(MyObject, pageUuid), not just the one that I'm expecting.", "Sorry about that, I don't know what could be wrong."], "SplitGT": [" Post an event to a single resource."], "issueString": "Implementing channels in wicket-atmosphere\nGood evening,\n\nNow that both Tomcat & Jetty support native WebSockets, it would be a killer-feature to implement Comet / WebSockets channels. i.e. being able to have a channel id and to post a message to one client only or to all the clients who subscribed to a certain channel.\n\nFor the moment, it is possible to do it, but to the (expensive) price of having a PerRequestBroadcastFilter and tweaking it if we manage to do it. But it would be great to have a link to the Broadcaster API from Atmosphere, which I think, supports this kind of things.That would probably be way more efficient than PerRequestBroadcastFilter tweaking.\n\nAs of today, when posting a message to the event bus, all pages who have the @Subscribed-decorated method suitable to process this message will do it, which is not always desirable.\n\nI'm looking forward to hear from you.\n\nRegards\nI've attached a quickstart demonstrating the fact that when posting to the event bus, all clients registered to that resource receive the message. But, it is visually obvious in this example that it is not desired behaviour.\n\nFYI, it's based on Emond's own quickstart.\ndoesn't adding custom predicate in @Subscribe  solves the problem? \n\n\n\nNot really, because if you post on the event bus with two clients registered, if I understand things correctly, the predicate which returns true sends the response to both clients, even if the other one returns false.\n\nLet me explain a little more what is the current behaviour. Let's say that two clients A & B have the right @Subscribe method. Let's say that you send an event e to the event bus for that method. Then A processes e and sends the same response to both A & B. Then B processes the same event and sends a response to both A & B, too. So we have two responses received by both A & B. I have an app where it's visually obvious: I send a small notification in my @Subscribe method. The notification displays two times in each browser A & B. Which is what make me think it works like that. Plus, it looks consistent with what I know from Atmosphere's Meteor API (which is called under the hood). Hence the request for a Broadcaster-based solution.\n\nIf I use a predicate which returns true for A and false for B, here is what apparently occurs: A sends its response to both A & B since the predicate returns true. And B doesn't send anything since the predicate returns false. But the * same * response returns to both A & B since it comes from A.\n\nWhat I would like to be able to do is to have a response computed by B's AtmosphereBehavior instance sent to B and a response computed by A's AtmosphereBehavior instance sent to A. Because those 2 responses can potentially be a little bit different from each other.\n\nDoes it make sense? Am I doing assumptions that I should not?\n\nOne more thing. Quoting wicket-atmosphere's JavaDoc: \"The filter cannot rely on any context. For example, the RequestCycle may not be available\". This seems to me a little bit limited. I fully understand why this is like this for the predicate. But if we have a way to dispatch the right event to the right @Subscribe method (or a channel implementation of any sort), maybe we will be able to filter things with more context, so that would be potentially easier.\n\nOK, any thoughts about that?\n\nKind regards,\n\nPierre\nsee code below,i mean something like this,you can change/improve according to your usecase\n\n public class InputWrapper<T> {\n        /**\n         *\n         * @param input\n         * @param id  id is sessionid of sender\n         */\n        public InputWrapper(T input, String  id){\n            this.input=input;\n            this.sender=id;\n        }\n\n        public T getInput() {\n            return input;\n        }\n\n        public String getSender() {\n            return sender;\n        }\n\n        T input;\n        String sender;\n    }\n\n    /**\n     * compare sessionid and return true if session id of sender is same as receiver\n     */\n    public  class SomePredicate implements Predicate<InputWrapper>{\n        @Override\n        public boolean apply(@Nullable InputWrapper wrapper) {\n            return wrapper.getSender().equals(Session.get().getId());\n        }\n    }\n\n\nYes, that's totally it! But unfortunately, my arguments below still apply.\n\nPlus, it gives me strange exceptions to use this kind of things: UnknwonBehaviorIdException, NullPointerException because the appended component can't be found, etc. I tried using this kind of code but was forced to strip it because of these exceptions.\nafaik what wicket-atmosphere does is it filters the overall subscribers based on if their corresponding predicate returns true or not when event is posted ,if a predicate of subscriber returns true then the method/subscriber gets invoked else not so in above case with \"SomePredicate\" if client A has sent response then predicate returns true only if A is receiver and hence only A gets response.\ni can't reproduce your exception...\nUnfortunately, my experience is that if a predicate matches for a client and doesn't matches for the others, the matching predicate sends the response to all clients. So in our case the message is sent only once, and not as many times as there are connected clients, but to all the connected clients. Which I find pretty annoying.\n\nRegarding my exception, it only happens when using complex HTML, in one of my projects, it is totally absent. But in another one, it happens on a regular basis.\nI agree that the filter construction is a bit weak. It can only be used to filter on properties of the event itself, not on properties of the receiver. The reason for this is that it is expensive to setup the entire context, such as the session and a request cycle. I think it should be possible to add a second filter that runs inside the AtmosphereRequestHandler, at which point the session, request cylcle and even the page are available.\nI've just pushed the implementation of a context aware filter. I've also updated the example to show how this works. Be advised though that filtering within the context of a Wicket request cyle is expensive. If you can implement the desired behavior via the Atmosphere API, I suggest you do so, because that should be much less expensive.\n\nWrapping the Atmosphere api is not what Wicket-Atmosphere is for, it is a bridge not a wrapper.\nGood evening,\n\nI've just tried it. The behaviour is the same: if three clients are connected and that only one's filter returns true, then the same message goes to all the three clients. If two of them return true, then those two send the message to the three clients, and so on.\n\nPersonally, I'd like to be able to have the message sent by one client broadcasted to only this client. Of course, the use case of \"one client sends to all\" is useful, I just wish it was not the only one possible.\n\nAnyway, your \"contextAwareFilter\" is useful, thanks for that !\n\nI've tried myself to implement a Broadcaster-based message-sending in your code, but for the moment, I failed. Too bad. The one thing I miss is how to provide an AtmosphereResource to my Broadcaster.\n\nAnyway, keep up the good work! :-)\nI don't see how you could return true for one client and false for another (other than using something like random). filter() is used with no receiver context at all. It is meant to be used to filter certain types of events (other than the actual instance type). For example, if you have an event that contains progress of a job and you only want your component to receive the events if the progress is 80% or higher, that's when you use filter(). The same filter should always return true for the same events.\n\nCan you take a look at commit a5421ec488020a3835d49962e1f772dc1435e230? I've added methods to post an event to a single resource, either with a resource instance or via its uuid (which I think makes more sense). You can get the UUID with AtmosphereResource.getUUID(page).\nThanks again! I've tried this new code, but unfortunately the situation is the same: all the connected resources are refreshed when issuing: Application.get().getEventBus().post(MyObject, pageUuid), not just the one that I'm expecting.\n\nSorry about that, I don't know what could be wrong.\n", "issueSearchSentences": ["}", "@param id  id is sessionid of sender", "T input;", "Let's say that two clients A & B have the right @Subscribe method.", "Can you take a look at commit a5421ec488020a3835d49962e1f772dc1435e230?"], "issueSearchIndexes": [52, 45, 56, 17, 103]}
{"aId": 35, "code": "public PatternValidator setReverse(boolean reverse)\n\t{\n\t\tthis.reverse = reverse;\n\t\treturn this;\n\t}", "comment": " If set to true then input that matches the pattern is considered invalid.", "issueId": "WICKET-2186", "issueStringList": ["PatternValidator could allow reverse matches", "I need to define a pattern which is invalid as form field input.", "i.e.", "I have a user feed back from that receives a lot of spam but the names are normally something like \"xtrqkjitvxqoh\".", "Instead of having a capture I want to set names with 5 successive consonants as invalid.", "This patch does the trick...", "Index: src/main/java/org/apache/wicket/validation/validator/PatternValidator.java", "===================================================================", "src/main/java/org/apache/wicket/validation/validator/PatternValidator.java\t(revision 749072)", "+++ src/main/java/org/apache/wicket/validation/validator/PatternValidator.java\t(working copy)", "@@ -64,6 +64,9 @@", "private final Pattern pattern;", "+\t/** whether to exclude matching input **/", "+\tprivate boolean reverse;", "+", "Constructor that accepts a <code>String</code> regular expression pattern.", "@@ -111,6 +114,15 @@", "this(pattern.pattern());", "}", "+\t/**", "+\t * If set to true then input that matches the pattern is considered invalid.", "+\t *", "+\t * @param reverse", "+\t */", "+\tpublic void setReverse(boolean reverse)", "+\t{", "+\t\tthis.reverse = reverse;", "+\t}", "Gets the regexp pattern.", "@@ -155,7 +167,7 @@", "protected void onValidate(IValidatable<String> validatable)", "{", "Check value against pattern", "if (!pattern.matcher(validatable.getValue()).matches())", "+\t\tif (pattern.matcher(validatable.getValue()).matches() == reverse)", "{", "error(validatable);", "}", "applied thanks"], "SplitGT": [" If set to true then input that matches the pattern is considered invalid."], "issueString": "PatternValidator could allow reverse matches\nI need to define a pattern which is invalid as form field input.  i.e. I have a user feed back from that receives a lot of spam but the names are normally something like \"xtrqkjitvxqoh\".  Instead of having a capture I want to set names with 5 successive consonants as invalid.\n\nThis patch does the trick...\n\nIndex: src/main/java/org/apache/wicket/validation/validator/PatternValidator.java\n===================================================================\n--- src/main/java/org/apache/wicket/validation/validator/PatternValidator.java\t(revision 749072)\n+++ src/main/java/org/apache/wicket/validation/validator/PatternValidator.java\t(working copy)\n@@ -64,6 +64,9 @@\n \t/** the <code>java.util.regex.Pattern</code> */\n \tprivate final Pattern pattern;\n \n+\t/** whether to exclude matching input **/\n+\tprivate boolean reverse;\n+\n \t/**\n \t * Constructor that accepts a <code>String</code> regular expression pattern.\n \t * \n@@ -111,6 +114,15 @@\n \t\tthis(pattern.pattern());\n \t}\n \n+\t/**\n+\t * If set to true then input that matches the pattern is considered invalid.\n+\t * \n+\t * @param reverse\n+\t */\n+\tpublic void setReverse(boolean reverse)\n+\t{\n+\t\tthis.reverse = reverse;\n+\t}\n \n \t/**\n \t * Gets the regexp pattern.\n@@ -155,7 +167,7 @@\n \tprotected void onValidate(IValidatable<String> validatable)\n \t{\n \t\t// Check value against pattern\n-\t\tif (!pattern.matcher(validatable.getValue()).matches())\n+\t\tif (pattern.matcher(validatable.getValue()).matches() == reverse)\n \t\t{\n \t\t\terror(validatable);\n \t\t}\n\n\napplied thanks\n", "issueSearchSentences": ["+\t{", "+\t */", "+\t/** whether to exclude matching input **/", "+\t *", "public PatternValidator setReverse(boolean reverse)\n\t{\n\t\tthis.reverse = reverse;\n\t\treturn this;\n\t}"], "issueSearchIndexes": [26, 24, 13, 22, 0]}
{"aId": 37, "code": "public static CharSequence escapeQuotes(final CharSequence input)\n\t{\n\t\tCharSequence s = input;\n\t\tif (s != null)\n\t\t{\n\t\t\ts = Strings.replaceAll(s, \"'\", \"\\\\'\");\n\t\t\ts = Strings.replaceAll(s, \"\\\"\", \"\\\\\\\"\");\n\t\t}\n\t\treturn s;\n\t}", "comment": " Escape single and double quotes so that they can be part of e.g. an alert call.", "issueId": "WICKET-2458", "issueStringList": ["JavascriptUtils.escapeQuotes() misses escaping double quotes", "The JavaDoc for org.apache.wicket.util.string.JavascriptUtils.escapeQuotes(CharSequence) states:", "\"Escape quotes and double quotes so that they can be part of e.g.", "an alert call.\"", "But the actual implementation only escapes quotes:", "CharSequence s = input;", "if (s != null)", "{", "s = Strings.replaceAll(s, \"'\", \"\\\\'\");", "}", "return s;", "Either the javadoc must be amended or the implementation must also escape double quotes which probably would be the better choice as alerts can both specified using single or double quotes."], "SplitGT": [" Escape single and double quotes so that they can be part of e.g.", "an alert call."], "issueString": "JavascriptUtils.escapeQuotes() misses escaping double quotes\nThe JavaDoc for org.apache.wicket.util.string.JavascriptUtils.escapeQuotes(CharSequence) states:\n\"Escape quotes and double quotes so that they can be part of e.g. an alert call.\"\n\nBut the actual implementation only escapes quotes:\n\nCharSequence s = input;\nif (s != null)\n{\n\ts = Strings.replaceAll(s, \"'\", \"\\\\'\");\n}\nreturn s;\n\nEither the javadoc must be amended or the implementation must also escape double quotes which probably would be the better choice as alerts can both specified using single or double quotes.\n", "issueSearchSentences": ["But the actual implementation only escapes quotes:", "{", "CharSequence s = input;", "}", "JavascriptUtils.escapeQuotes() misses escaping double quotes"], "issueSearchIndexes": [5, 8, 6, 10, 1]}
{"aId": 38, "code": "public IConverter getConverter(Class type)\n\t{\n\t\treturn null;\n\t}", "comment": " Implementation that returns null by default (panels don't typically need converters anyway). This is used by the embedded default instances of label and form field to determine whether they should use a converter like they normally would (when this method returns null), or whether they should use a custom converter (when this method is overridden and returns not null).", "issueId": "WICKET-1219", "issueStringList": ["Make it easier to provide a custom converter for AjaxEditableLabel", "Currently, it is quite hard to provide a custom converter for the label and text field of AjaxEditableLabel.", "This is mainly because the only way to provide one per component is to override a method; there is no setter for it.", "As this could be a common case for the AjaxEditableLabel (as I found out while writing WIA), it would be nice if the component made this a bit easier.", "Now in AjaxEditableLabel:", "Implementation that returns null by default (panels don't typically need converters anyway).", "This is used by the embedded default instances of label and form field to determine whether", "they should use a converter like they normally would (when this method returns null), or", "whether they should use a custom converter (when this method is overridden and returns not", "null).", "@see org.apache.wicket.Component#getConverter(java.lang.Class)", "public IConverter getConverter(Class type)", "{", "return null;", "}"], "SplitGT": [" Implementation that returns null by default (panels don't typically need converters anyway).", "This is used by the embedded default instances of label and form field to determine whether they should use a converter like they normally would (when this method returns null), or whether they should use a custom converter (when this method is overridden and returns not null)."], "issueString": "Make it easier to provide a custom converter for AjaxEditableLabel\nCurrently, it is quite hard to provide a custom converter for the label and text field of AjaxEditableLabel. This is mainly because the only way to provide one per component is to override a method; there is no setter for it. As this could be a common case for the AjaxEditableLabel (as I found out while writing WIA), it would be nice if the component made this a bit easier.\nNow in AjaxEditableLabel:\n\n\t/**\n\t * Implementation that returns null by default (panels don't typically need converters anyway).\n\t * This is used by the embedded default instances of label and form field to determine whether\n\t * they should use a converter like they normally would (when this method returns null), or\n\t * whether they should use a custom converter (when this method is overridden and returns not\n\t * null).\n\t * \n\t * @see org.apache.wicket.Component#getConverter(java.lang.Class)\n\t */\n\tpublic IConverter getConverter(Class type)\n\t{\n\t\treturn null;\n\t}\n", "issueSearchSentences": ["@see org.apache.wicket.Component#getConverter(java.lang.Class)", "{", "whether they should use a custom converter (when this method is overridden and returns not", "null).", "Now in AjaxEditableLabel:"], "issueSearchIndexes": [11, 13, 9, 10, 5]}
{"aId": 39, "code": "protected static void set(RequestCycle cycle)\n\t{\n\t\tcurrent.set(cycle);\n\t}", "comment": " You typically DO NOT NEED to call this method, as the request cycle is set to current for you in the constructor. However, if you have a <a href=\"http://issues.apache.org/jira/browse/WICKET-366\">very special need</a> to set it to something else, you can expose this method.", "issueId": "WICKET-366", "issueStringList": ["Set Request Cycle in ThreadLocal", "I want to request a static set method on RequestCycle to set the cycle in the current ThreadLocal, so that Wicket can create components and such in a different thread than where the HTTP request entered.", "Without this a WicketRuntimeException(\"Can not set the attribute.", "No RequestCycle available\") is thrown from the Session.setAttribute method.", "Suggested implementation:", "public static void set(RequestCycle cycle)", "{", "current.set(cycle);", "}", "This is similar to the static set methods for Session and Application.", "This method can also be protected if desired.", "But what will you do with a RequestCycle,", "are you just really writing and reading from the request/response objects from another thread?", "Is that even legal in the servlet world?", "Well I have seen nothing that this would be illegal.", "Besides this, it works fine in Tapestry.", "Implemented as a protected method, so you need to expose it yourself.", "It has this warning:", "You typically DO NOT NEED to call this method, as the request cycle is set to current for you in the constructor.", "However, if you have a <a href=\"http://issues.apache.org/jira/browse/WICKET-366\">very special need</a> to set it to something else, you can expose this method."], "SplitGT": [" You typically DO NOT NEED to call this method, as the request cycle is set to current for you in the constructor.", "However, if you have a <a href=\"http://issues.apache.org/jira/browse/WICKET-366\">very special need</a> to set it to something else, you can expose this method."], "issueString": "Set Request Cycle in ThreadLocal\nI want to request a static set method on RequestCycle to set the cycle in the current ThreadLocal, so that Wicket can create components and such in a different thread than where the HTTP request entered.\nWithout this a WicketRuntimeException(\"Can not set the attribute. No RequestCycle available\") is thrown from the Session.setAttribute method.\n\nSuggested implementation:\n    public static void set(RequestCycle cycle)\n    {\n        current.set(cycle);\n    }\n\nThis is similar to the static set methods for Session and Application.\n\nThis method can also be protected if desired.\n\nBut what will you do with a RequestCycle,\nare you just really writing and reading from the request/response objects from another thread?\nIs that even legal in the servlet world?\nWell I have seen nothing that this would be illegal.\nBesides this, it works fine in Tapestry.\nImplemented as a protected method, so you need to expose it yourself. It has this warning:\n\nYou typically DO NOT NEED to call this method, as the request cycle is set to current for you in the constructor. However, if you have a <a href=\"http://issues.apache.org/jira/browse/WICKET-366\">very special need</a> to set it to something else, you can expose this method.\n", "issueSearchSentences": ["{", "Suggested implementation:", "protected static void set(RequestCycle cycle)\n\t{\n\t\tcurrent.set(cycle);\n\t}", "Set Request Cycle in ThreadLocal", "It has this warning:"], "issueSearchIndexes": [7, 5, 0, 1, 18]}
{"aId": 40, "code": "@Deprecated\n\tprotected IHeaderResponseFilter createHeaderFilter(String headerFilterName)\n\t{\n\t\treturn new CssAndPageAcceptingHeaderResponseFilter(HEADER_FILTER_NAME);\n\t}", "comment": " see WICKET-4736 JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic", "issueId": "WICKET-4736", "issueStringList": ["JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic", "JavaScriptFilteredIntoFooterHeaderResponse creates two buckets.", "One for CSS and one for JS.", "The current logic is that everything that isn't CSS must be JS and so gets put at the bottom of the page.", "This breaks if CssAcceptingHeaderResponseFilter mistakingly identifies something as non-CSS (eg a CSS file with another extension).", "Also everything else that isn't CSS gets put into the footer bucket (which should contain only JS).", "It would be better if it only puts things in the footer bucket if it can determine that it's JS and sort everything else into the header bucket.", "Fixed.", "Methods' signatures were broken but since the class is final there is no chance that someone has overridden it."], "SplitGT": [" see WICKET-4736 JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic"], "issueString": "JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic\nJavaScriptFilteredIntoFooterHeaderResponse creates two buckets. One for CSS and one for JS. The current logic is that everything that isn't CSS must be JS and so gets put at the bottom of the page. This breaks if CssAcceptingHeaderResponseFilter mistakingly identifies something as non-CSS (eg a CSS file with another extension). Also everything else that isn't CSS gets put into the footer bucket (which should contain only JS).\n\nIt would be better if it only puts things in the footer bucket if it can determine that it's JS and sort everything else into the header bucket.\nFixed.\n\nMethods' signatures were broken but since the class is final there is no chance that someone has overridden it.\n", "issueSearchSentences": ["@Deprecated\n\tprotected IHeaderResponseFilter createHeaderFilter(String headerFilterName)\n\t{\n\t\treturn new CssAndPageAcceptingHeaderResponseFilter(HEADER_FILTER_NAME);\n\t}", "JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic", "JavaScriptFilteredIntoFooterHeaderResponse creates two buckets.", "One for CSS and one for JS.", "The current logic is that everything that isn't CSS must be JS and so gets put at the bottom of the page."], "issueSearchIndexes": [0, 1, 2, 3, 4]}
{"aId": 41, "code": "public final String getInitParameter(String key)\n\t{\n\t\tif (wicketFilter != null)\n\t\t{\n\t\t\treturn wicketFilter.getFilterConfig().getInitParameter(key);\n\t\t}\n\t\tthrow new IllegalStateException(\"init parameter '\" + key +\n\t\t\t\"' is not set yet. Any code in your\" +\n\t\t\t\" Application object that uses the wicketServlet/Filter instance should be put\" +\n\t\t\t\" in the init() method instead of your constructor\");\n\t}", "comment": " Gets an init parameter of the filter, or null if the parameter does not exist.", "issueId": "WICKET-1626", "issueStringList": ["Typo in src/main/java/org/apache/wicket/protocol/http/WebApplication.java", "Index: src/main/java/org/apache/wicket/protocol/http/WebApplication.java", "===================================================================", "src/main/java/org/apache/wicket/protocol/http/WebApplication.java\t(revision 655812)", "+++ src/main/java/org/apache/wicket/protocol/http/WebApplication.java\t(working copy)", "@@ -167,7 +167,7 @@", "}", "* Gets an init parameter from the filter's context.", "+\t * Gets an init parameter of the filter, or null if the parameter does not exist.", "@param key", "the key to search for", "@@ -179,9 +179,10 @@", "{", "return wicketFilter.getFilterConfig().getInitParameter(key);", "}", "throw new IllegalStateException(\"servletContext is not set yet.", "Any code in your\"", "+ \" Application object that uses the wicketServlet/Filter instance should be put\"", "+ \" in the init() method instead of your constructor\");", "+\t\tthrow new IllegalStateException(\"init parameter '\" + key +", "+\t\t\t\"' is not set yet.", "Any code in your\" +", "+\t\t\t\" Application object that uses the wicketServlet/Filter instance should be put\" +", "+\t\t\t\" in the init() method instead of your constructor\");", "}", "@@ -202,7 +203,7 @@", "Gets the servlet context for this application.", "Use this to get references to absolute paths,", "* global web.xml parameters (<context-param>), etc.", "+\t * global web.xml parameters (&lt;context-param&gt;), etc.", "@return The servlet context for this application", "@@ -555,7 +556,7 @@", "namespaced param.", "see WICKET-1317", "// If no system parameter check filter/servert initparam and context param", "+\t\t// If no system parameter check filter/servlet <init-param> and <context-param>", "if (result == null)", "{", "result = getInitParameter(\"wicket.\"", "+ Application.CONFIGURATION);", "i think maurice can handle this one.", "Thanks Johan, it was a pickle but i think i nailed it.", "although you might want to check if i missed anything :P", "BTW Martin what on earth did you use to create this patch?", "it simply does not match anything on trunk or 1.3 branch.", "\"BTW Martin what on earth did you use to create this patch?", "it simply does not match anything on trunk or 1.3 branch. \"", "Ha!", "it was even a hard one to tackle!", "And i thought lets be gentle..", "Darn, and I thought I could keep a low profile,  by adding it to jira instead of the mailing list.", "And now you are making fun of me:-)", "Eclipse -> Context Menu of the Editor -> Team... -> Create Patch... -> hit Enter a couple of times", "then copy paste the clipboard to the jira issue."], "SplitGT": [" Gets an init parameter of the filter, or null if the parameter does not exist."], "issueString": "Typo in src/main/java/org/apache/wicket/protocol/http/WebApplication.java\nIndex: src/main/java/org/apache/wicket/protocol/http/WebApplication.java\n===================================================================\n--- src/main/java/org/apache/wicket/protocol/http/WebApplication.java\t(revision 655812)\n+++ src/main/java/org/apache/wicket/protocol/http/WebApplication.java\t(working copy)\n@@ -167,7 +167,7 @@\n \t}\n \n \t/**\n-\t * Gets an init parameter from the filter's context.\n+\t * Gets an init parameter of the filter, or null if the parameter does not exist.\n \t * \n \t * @param key\n \t *            the key to search for\n@@ -179,9 +179,10 @@\n \t\t{\n \t\t\treturn wicketFilter.getFilterConfig().getInitParameter(key);\n \t\t}\n-\t\tthrow new IllegalStateException(\"servletContext is not set yet. Any code in your\"\n-\t\t\t+ \" Application object that uses the wicketServlet/Filter instance should be put\"\n-\t\t\t+ \" in the init() method instead of your constructor\");\n+\t\tthrow new IllegalStateException(\"init parameter '\" + key +\n+\t\t\t\"' is not set yet. Any code in your\" +\n+\t\t\t\" Application object that uses the wicketServlet/Filter instance should be put\" +\n+\t\t\t\" in the init() method instead of your constructor\");\n \t}\n \n \t/**\n@@ -202,7 +203,7 @@\n \n \t/**\n \t * Gets the servlet context for this application. Use this to get references to absolute paths,\n-\t * global web.xml parameters (<context-param>), etc.\n+\t * global web.xml parameters (&lt;context-param&gt;), etc.\n \t * \n \t * @return The servlet context for this application\n \t */\n@@ -555,7 +556,7 @@\n \t\t * namespaced param. see WICKET-1317\n \t\t */\n \n-\t\t// If no system parameter check filter/servert initparam and context param\n+\t\t// If no system parameter check filter/servlet <init-param> and <context-param>\n \t\tif (result == null)\n \t\t{\n \t\t\tresult = getInitParameter(\"wicket.\" + Application.CONFIGURATION);\n\ni think maurice can handle this one.\nThanks Johan, it was a pickle but i think i nailed it.\nalthough you might want to check if i missed anything :P\n\nBTW Martin what on earth did you use to create this patch? it simply does not match anything on trunk or 1.3 branch.\n\"BTW Martin what on earth did you use to create this patch? it simply does not match anything on trunk or 1.3 branch. \"\n\nHa! it was even a hard one to tackle!\nAnd i thought lets be gentle..\nDarn, and I thought I could keep a low profile,  by adding it to jira instead of the mailing list.\nAnd now you are making fun of me:-)\n\nEclipse -> Context Menu of the Editor -> Team... -> Create Patch... -> hit Enter a couple of times\n\nthen copy paste the clipboard to the jira issue.\n\n", "issueSearchSentences": ["{", "+ \" Application object that uses the wicketServlet/Filter instance should be put\"", "+\t\t\t\" Application object that uses the wicketServlet/Filter instance should be put\" +", "+ \" in the init() method instead of your constructor\");", "Any code in your\""], "issueSearchIndexes": [13, 18, 23, 19, 17]}
{"aId": 42, "code": "protected int getCacheDuration()\n\t{\n\t\treturn 3600;\n\t}", "comment": " default implementation is to cache resources for 1 hour. can be overridden by extension classes.", "issueId": "WICKET-963", "issueStringList": ["add extension point to configure resource cache expiration time", "The current implementation of WebResource hardcodes the expiration time of cachable files to be 1 hour.", "There should be an extension point added to WebResource to allow for customizing this duration *without* needing to override the entire configureResponse() method.", "http://wicket.sourceforge.net/apidocs/wicket/markup/html/WebResource.html", "for example, add this to WebResource:", "default implementation is to cache resources for 1 hour.", "can be overridden by extension classes.", "protected int getCacheDuration() {", "return 3600;", "}", "bulk set issues to next version.", "I only did a quick check (and filtered some out for 1.3.1), but we can always bump em again.", "added the method to WebResource"], "SplitGT": [" default implementation is to cache resources for 1 hour.", "can be overridden by extension classes."], "issueString": "add extension point to configure resource cache expiration time\nThe current implementation of WebResource hardcodes the expiration time of cachable files to be 1 hour.  There should be an extension point added to WebResource to allow for customizing this duration *without* needing to override the entire configureResponse() method.\n\nhttp://wicket.sourceforge.net/apidocs/wicket/markup/html/WebResource.html\n\nfor example, add this to WebResource:\n\n/**\n * default implementation is to cache resources for 1 hour.  can be overridden by extension classes.\n */\nprotected int getCacheDuration() {\n  return 3600;\n}\nbulk set issues to next version. I only did a quick check (and filtered some out for 1.3.1), but we can always bump em again.\nadded the method to WebResource\n", "issueSearchSentences": ["can be overridden by extension classes.", "protected int getCacheDuration() {", "protected int getCacheDuration()\n\t{\n\t\treturn 3600;\n\t}", "add extension point to configure resource cache expiration time", "The current implementation of WebResource hardcodes the expiration time of cachable files to be 1 hour."], "issueSearchIndexes": [7, 8, 0, 1, 2]}
{"aId": 43, "code": "@Deprecated\n\tprotected IHeaderResponseFilter createFooterFilter(String footerBucketName,\n\t\tIHeaderResponseFilter header)\n\t{\n\t\treturn new OppositeHeaderResponseFilter(footerBucketName, header);\n\t}", "comment": " see WICKET-4736 JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic", "issueId": "WICKET-4736", "issueStringList": ["JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic", "JavaScriptFilteredIntoFooterHeaderResponse creates two buckets.", "One for CSS and one for JS.", "The current logic is that everything that isn't CSS must be JS and so gets put at the bottom of the page.", "This breaks if CssAcceptingHeaderResponseFilter mistakingly identifies something as non-CSS (eg a CSS file with another extension).", "Also everything else that isn't CSS gets put into the footer bucket (which should contain only JS).", "It would be better if it only puts things in the footer bucket if it can determine that it's JS and sort everything else into the header bucket.", "Fixed.", "Methods' signatures were broken but since the class is final there is no chance that someone has overridden it."], "SplitGT": [" see WICKET-4736 JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic"], "issueString": "JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic\nJavaScriptFilteredIntoFooterHeaderResponse creates two buckets. One for CSS and one for JS. The current logic is that everything that isn't CSS must be JS and so gets put at the bottom of the page. This breaks if CssAcceptingHeaderResponseFilter mistakingly identifies something as non-CSS (eg a CSS file with another extension). Also everything else that isn't CSS gets put into the footer bucket (which should contain only JS).\n\nIt would be better if it only puts things in the footer bucket if it can determine that it's JS and sort everything else into the header bucket.\nFixed.\n\nMethods' signatures were broken but since the class is final there is no chance that someone has overridden it.\n", "issueSearchSentences": ["Also everything else that isn't CSS gets put into the footer bucket (which should contain only JS).", "@Deprecated\n\tprotected IHeaderResponseFilter createFooterFilter(String footerBucketName,\n\t\tIHeaderResponseFilter header)\n\t{\n\t\treturn new OppositeHeaderResponseFilter(footerBucketName, header);\n\t}", "JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic", "JavaScriptFilteredIntoFooterHeaderResponse creates two buckets.", "One for CSS and one for JS."], "issueSearchIndexes": [6, 0, 1, 2, 3]}
{"aId": 44, "code": "public DownloadLink setCacheDuration(final Duration duration)\n\t{\n\t\tcacheDuration = duration;\n\t\treturn this;\n\t}", "comment": " Sets the duration for which the file resource should be cached by the client.", "issueId": "WICKET-4225", "issueStringList": ["Allow setting cache duration for DownloadLink", "Currently it is not possible to set the cache duration for the file resource of DownloadLink.", "It would be good if org.apache.wicket.markup.html.link.DownloadLink.setCacheDuration(Duration) is added with the following behavior:", "if setCacheDuration(null) is used then use IResourceSettings#getDefaultCacheDuration() (this is the default, backward compatible)", "if setCacheDuration(Duration.NONE) is used then the file resource will not be cached by the browser", "if setCacheDuration(someDuration) is used then the file resource will be cached for that duration by the browser"], "SplitGT": [" Sets the duration for which the file resource should be cached by the client."], "issueString": "Allow setting cache duration for DownloadLink \nCurrently it is not possible to set the cache duration for the file resource of DownloadLink.\n\nIt would be good if org.apache.wicket.markup.html.link.DownloadLink.setCacheDuration(Duration) is added with the following behavior:\n- if setCacheDuration(null) is used then use IResourceSettings#getDefaultCacheDuration() (this is the default, backward compatible)\n- if setCacheDuration(Duration.NONE) is used then the file resource will not be cached by the browser\n- if setCacheDuration(someDuration) is used then the file resource will be cached for that duration by the browser \n", "issueSearchSentences": ["public DownloadLink setCacheDuration(final Duration duration)\n\t{\n\t\tcacheDuration = duration;\n\t\treturn this;\n\t}", "Currently it is not possible to set the cache duration for the file resource of DownloadLink.", "Allow setting cache duration for DownloadLink", "if setCacheDuration(null) is used then use IResourceSettings#getDefaultCacheDuration() (this is the default, backward compatible)", "if setCacheDuration(Duration.NONE) is used then the file resource will not be cached by the browser"], "issueSearchIndexes": [0, 2, 1, 4, 5]}
{"aId": 45, "code": "public AutoCompleteSettings setMinInputLength(int minInputLength)\r\n\t{\r\n\t\tthis.minInputLength = minInputLength;\r\n\t\treturn this;\r\n\t}", "comment": " Set the minimum input length required to display the autocomplete list", "issueId": "WICKET-4993", "issueStringList": ["Add a minInputLength parameter to AutoCompleteTextField", "We should add a parameter to AutoCompleteTextField to set the minimum input length required to display the autocomplete list.", "See patch.", "Hi Andrea,", "Please update your patch to latest Wicket 6 and we will add it for 6.10.", "Thanks!", "I've updated the patch.", "You can add it or wait for me to commit it when I will have commitment grant :)", "The default value should be 1 to be backward compatible, right ?", "In your patch I see 3.", "I'll test it now.", "Changed the default to be 1, so it the same behavior as before.", "Additionally added functionality to hide the drop-down when the precondition fails.", "Thanks!", "yes sorry, I left 3 instead of 1.", "Thank you!"], "SplitGT": [" Set the minimum input length required to display the autocomplete list"], "issueString": "Add a minInputLength parameter to AutoCompleteTextField\nWe should add a parameter to AutoCompleteTextField to set the minimum input length required to display the autocomplete list.\nSee patch.\nHi Andrea,\n\nPlease update your patch to latest Wicket 6 and we will add it for 6.10.\nThanks!\nI've updated the patch. You can add it or wait for me to commit it when I will have commitment grant :)\nThe default value should be 1 to be backward compatible, right ?\nIn your patch I see 3.\n\nI'll test it now.\nChanged the default to be 1, so it the same behavior as before.\nAdditionally added functionality to hide the drop-down when the precondition fails.\n\nThanks!\nyes sorry, I left 3 instead of 1. Thank you!\n", "issueSearchSentences": ["public AutoCompleteSettings setMinInputLength(int minInputLength)\r\n\t{\r\n\t\tthis.minInputLength = minInputLength;\r\n\t\treturn this;\r\n\t}", "Add a minInputLength parameter to AutoCompleteTextField", "We should add a parameter to AutoCompleteTextField to set the minimum input length required to display the autocomplete list.", "See patch.", "Hi Andrea,"], "issueSearchIndexes": [0, 1, 2, 3, 4]}
{"aId": 47, "code": "@Override\n\tpublic <C> IConverter<C> getConverter(Class<C> type)\n\t{\n\t\tIConverter<C> converter = super.getConverter(type);\n\t\tif (converter instanceof AbstractDecimalConverter<?>)\n\t\t{\n\t\t\tAbstractDecimalConverter<?> adc = (AbstractDecimalConverter<?>)converter;\n\t\t\tNumberFormat numberFormat = adc.getNumberFormat(HTML5_LOCALE);\n\t\t\t// do not use grouping for HTML5 number/range fields because\n\t\t\t// it is not supported by browsers\n\t\t\tnumberFormat.setGroupingUsed(false);\n\t\t\tadc.setNumberFormat(HTML5_LOCALE, numberFormat);\n\t\t}\n\t\treturn converter;\n\t}", "comment": " WICKET-4501 NumberTextField&lt;BigDecimal> renders its value in unsupported number format", "issueId": "WICKET-4501", "issueStringList": ["NumberTextField<BigDecimal> renders its value in unsupported number format", "The issue is similar to WICKET-3591 but its fix doesn't help when the model object of the NumberTextField is a BigDecimal because BigDecimalConverter#convertToString() produces something like \"123, 456, 789\" and this is not supported by <input type=\"number\">'s spec: http://dev.w3.org/html5/markup/datatypes.html#common.data.float.", "A quickstart that demonstrates the problem.", "Enter a number with at least 4 digits and submit.", "This patch uses a special locale for which the grouping of digits can be disabled without changing global behavior.", "Fixed by applying Christoph's patch.", "I was tinkering with something similar but new Locale(\"en\", \"\", \"wicket-html5\") didn't came to my mind.", "Nice solution Christoph :)."], "SplitGT": [" WICKET-4501 NumberTextField&lt;BigDecimal> renders its value in unsupported number format"], "issueString": "NumberTextField<BigDecimal> renders its value in unsupported number format \nThe issue is similar to WICKET-3591 but its fix doesn't help when the model object of the NumberTextField is a BigDecimal because BigDecimalConverter#convertToString() produces something like \"123, 456, 789\" and this is not supported by <input type=\"number\">'s spec: http://dev.w3.org/html5/markup/datatypes.html#common.data.float.\nA quickstart that demonstrates the problem.\nEnter a number with at least 4 digits and submit.\nThis patch uses a special locale for which the grouping of digits can be disabled without changing global behavior.\nFixed by applying Christoph's patch.\nI was tinkering with something similar but new Locale(\"en\", \"\", \"wicket-html5\") didn't came to my mind.\n\nNice solution Christoph :).\n", "issueSearchSentences": ["NumberTextField<BigDecimal> renders its value in unsupported number format", "Enter a number with at least 4 digits and submit.", "This patch uses a special locale for which the grouping of digits can be disabled without changing global behavior.", "A quickstart that demonstrates the problem.", "@Override\n\tpublic <C> IConverter<C> getConverter(Class<C> type)\n\t{\n\t\tIConverter<C> converter = super.getConverter(type);\n\t\tif (converter instanceof AbstractDecimalConverter<?>)\n\t\t{\n\t\t\tAbstractDecimalConverter<?> adc = (AbstractDecimalConverter<?>)converter;\n\t\t\tNumberFormat numberFormat = adc.getNumberFormat(HTML5_LOCALE);\n\t\t\t// do not use grouping for HTML5 number/range fields because\n\t\t\t// it is not supported by browsers\n\t\t\tnumberFormat.setGroupingUsed(false);\n\t\t\tadc.setNumberFormat(HTML5_LOCALE, numberFormat);\n\t\t}\n\t\treturn converter;\n\t}"], "issueSearchIndexes": [1, 4, 5, 3, 0]}
{"aId": 49, "code": "public final void restart(final AjaxRequestTarget target)\n\t{\n\t\tif (isStopped())\n\t\t{\n\t\t\tstopped = false;\n\t\t\theadRendered = false;\n\t\t\ttarget.add(getComponent());\n\t\t}\n\t}", "comment": " Re-enables the timer if already stopped", "issueId": "WICKET-1525", "issueStringList": ["Ability to enable/disable AbstractAjaxTimerBehavior", "Convert the existing \"stop\" functionality into using the isEnabled() method on IBehavior.", "This would make it possible to disable and enable a timer.", "(The stop method was added before[R490397] IBehavior got the isEnabled method[510198])", "A patch as proposed by Frank and a quickstart to test it.", "@Devs: please take a look and tell me if it is OK.", "If it is then I'll modify the quickstart to a WicketTester test and add comments to the new methods.", "Improve the patch and provide a WicketTester test for the new method.", "i would like to hold off on these kinds of changes for as long as possible, just trying to keep the 1.5.x and 1.4.x as similar as possible while we have to patch both.", "just a heads up so you dont think we have forgotten about the patch.", "cheers.", "I have the same requirement and am using your patch.", "One small addition: The restart() method currently only works from within an AJAX request but changing it to", "Re-enables the timer if already stopped", "@param target the AJAX request target, or null in case this method is call from outside an AJAX request", "public final void restart(final AjaxRequestTarget target)", "{", "if (stopped)", "{", "stopped = false;", "headRendered = false;", "if (target != null)", "{", "target.addComponent(getComponent());", "}", "}", "}", "At least, this works for me.", "Thanks for the feedback Kaspar!", "The check for 'null' is no harm but in which cases 'target' is null for you ?", "I my case, the timer is restarted when a form is submitted -\u00a0but not using AJAX (it's not an AJAX form).", "In this case, target is null because there is no AjaxRequestTarget then.", "Guys,", "Thanks for this patch.", "Works beautifully.", "Would love to see this implemented in Wicket 1.5.x.", "Till the patch makes it's way into Wicket, you can use these classes (see attachments) instead."], "SplitGT": [" Re-enables the timer if already stopped"], "issueString": "Ability to enable/disable AbstractAjaxTimerBehavior\nConvert the existing \"stop\" functionality into using the isEnabled() method on IBehavior. This would make it possible to disable and enable a timer.\n\n(The stop method was added before[R490397] IBehavior got the isEnabled method[510198])\nA patch as proposed by Frank and a quickstart to test it.\n\n@Devs: please take a look and tell me if it is OK. If it is then I'll modify the quickstart to a WicketTester test and add comments to the new methods.\nImprove the patch and provide a WicketTester test for the new method.\ni would like to hold off on these kinds of changes for as long as possible, just trying to keep the 1.5.x and 1.4.x as similar as possible while we have to patch both. just a heads up so you dont think we have forgotten about the patch. cheers.\nI have the same requirement and am using your patch.\n\nOne small addition: The restart() method currently only works from within an AJAX request but changing it to\n\n/**\n   * Re-enables the timer if already stopped\n   * \n   * @param target the AJAX request target, or null in case this method is call from outside an AJAX request\n   */\n  public final void restart(final AjaxRequestTarget target)\n  {\n    if (stopped)\n    {\n      stopped = false;\n      headRendered = false;\n      if (target != null)\n      {\n        target.addComponent(getComponent());\n      }\n    }\n  }\n\nAt least, this works for me.\nThanks for the feedback Kaspar!\n\nThe check for 'null' is no harm but in which cases 'target' is null for you ? \nI my case, the timer is restarted when a form is submitted -\u00a0but not using AJAX (it's not an AJAX form). In this case, target is null because there is no AjaxRequestTarget then.\nGuys,\nThanks for this patch. Works beautifully. \nWould love to see this implemented in Wicket 1.5.x.\nTill the patch makes it's way into Wicket, you can use these classes (see attachments) instead.\n", "issueSearchSentences": ["@param target the AJAX request target, or null in case this method is call from outside an AJAX request", "stopped = false;", "{", "{", "headRendered = false;"], "issueSearchIndexes": [15, 20, 19, 23, 21]}
{"aId": 52, "code": "protected IRequestCycleProcessor newRequestCycleProcessor()\n\t{\n\t\tWebRequestCodingStrategy.Settings stratSettings = new WebRequestCodingStrategy.Settings();\n\t\tstratSettings.setMountsCaseSensitive(false);\n\n\t\tWebRequestCodingStrategy strat = new WebRequestCodingStrategy(stratSettings);\n\t\treturn new CompoundRequestCycleProcessor(strat);\n\t}", "comment": " Sets up a request coding strategy that uses case-insensitive mounts", "issueId": "WICKET-82", "issueStringList": ["Support case insensitive mount paths", "http://www.nabble.com/Non-case-sensitive-nice-URL-tf2643746.html", "I use nice URL to mount some page in the usual way :", "mountBookmarkablePage(\"/Organization\", Organization.class);", "That is great, but it will make an error if a user enter the url by hand and decide to not use case sensitive.", "I mean, I can mount organization without the capital letter, but it would make the same error if the user use Capital after that.", "Is there a way of using Nice URL that is not case sensitive?", "Thanks", "Marc", "for demo see NiceUrlApplication, namely", "class NiceUrlApplication extends WicketExampleApplication {", "...", "Sets up a request coding strategy that uses case-insensitive mounts", "@see wicket.protocol.http.WebApplication#newRequestCycleProcessor()", "protected IRequestCycleProcessor newRequestCycleProcessor()", "{", "WebRequestCodingStrategy.Settings stratSettings = new WebRequestCodingStrategy.Settings();", "stratSettings.setMountsCaseSensitive(false);", "WebRequestCodingStrategy strat = new WebRequestCodingStrategy(stratSettings);", "return new CompoundRequestCycleProcessor(strat);", "}", "...", "}"], "SplitGT": [" Sets up a request coding strategy that uses case-insensitive mounts"], "issueString": "Support case insensitive mount paths\nhttp://www.nabble.com/Non-case-sensitive-nice-URL-tf2643746.html\n\nI use nice URL to mount some page in the usual way :\nmountBookmarkablePage(\"/Organization\", Organization.class);\n\nThat is great, but it will make an error if a user enter the url by hand and decide to not use case sensitive.  I mean, I can mount organization without the capital letter, but it would make the same error if the user use Capital after that.\n\nIs there a way of using Nice URL that is not case sensitive?\n\nThanks\n\nMarc\n\nfor demo see NiceUrlApplication, namely\n\nclass NiceUrlApplication extends WicketExampleApplication {\n...\n/**\n\t * Sets up a request coding strategy that uses case-insensitive mounts\n\t * \n\t * @see wicket.protocol.http.WebApplication#newRequestCycleProcessor()\n\t */\n\tprotected IRequestCycleProcessor newRequestCycleProcessor()\n\t{\n\t\tWebRequestCodingStrategy.Settings stratSettings = new WebRequestCodingStrategy.Settings();\n\t\tstratSettings.setMountsCaseSensitive(false);\n\n\t\tWebRequestCodingStrategy strat = new WebRequestCodingStrategy(stratSettings);\n\t\treturn new CompoundRequestCycleProcessor(strat);\n\t}\n\n...\n}\n", "issueSearchSentences": ["stratSettings.setMountsCaseSensitive(false);", "{", "WebRequestCodingStrategy strat = new WebRequestCodingStrategy(stratSettings);", "WebRequestCodingStrategy.Settings stratSettings = new WebRequestCodingStrategy.Settings();", "@see wicket.protocol.http.WebApplication#newRequestCycleProcessor()"], "issueSearchIndexes": [18, 16, 19, 17, 14]}
{"aId": 56, "code": "@Override\n\tpublic Url getClientUrl()\n\t{\n\t\tif (errorAttributes != null && !Strings.isEmpty(errorAttributes.getRequestUri()))\n\t\t{\n\t\t\tString problematicURI = Url.parse(errorAttributes.getRequestUri(), getCharset())\n\t\t\t\t.toString();\n\t\t\tUrl url = getContextRelativeUrl(problematicURI, filterPrefix);\n\t\t\treturn setParameters(url);\n\t\t}\n\t\telse if (!isAjax())\n\t\t{\n\t\t\treturn getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString base = null;\n\n\t\t\tbase = getHeader(HEADER_AJAX_BASE_URL);\n\n\t\t\tif (base == null)\n\t\t\t{\n\t\t\t\tbase = getRequestParameters().getParameterValue(PARAM_AJAX_BASE_URL).toString(null);\n\t\t\t}\n\n\t\t\tChecks.notNull(base, \"Current ajax request is missing the base url header or parameter\");\n\n\t\t\treturn setParameters(Url.parse(base, getCharset()));\n\t\t}\n\t}", "comment": " Returns base url without context or filter mapping.", "issueId": "WICKET-4168", "issueStringList": ["Error page resource relative urls are wrong", "The wicket page exposed as 404 error page has wrong links to resources.", "The sample project is attached.", "Run the project with \"mvn jetty:run\" and go to url \"http://localhost:8080/bug/404\" - it's mapped wicket page, works perfect.", "But if you type any wrong url such as \"http://localhost:8080/bug/aaaaaa\" the page doesn't have styles and images.", "Sample project based on quickstart maven project.", "The problem is that ServletWebRequest#getClientUrl method is returning a client URL that includes the context path.", "When responding it uses the errorAttributes.getRequestUri() URL to create the client one.", "I don't know why ServletWebRequest#getClientUrl is testing error attributes in request and using the error URI, it is the address of the resource causing problems, but getClientUrl is designed to to return only the base URL without context or filter mapping.", "Simply remove the test for error attributes an its logic fix this BUG and have no impact at WICKET-3599, WICKET-3551 but breaks some test expectations.", "I think it should use error URI, because actual page could be on different level, not in root as /404.", "A test case for the fix should include urls like \"\"http://localhost:8080/bug/aaaaaa/bbbb/cccc\".", "Also to check if it works after moving the \"/404\" mapping to somewhere else, e.g.", "\"/error/http/404\".", "I can add that the attached quickstart works fine when started with Start.java.", "It seems Jetty acts differently when started with 'mvn jetty:run' and embedded.", "Going to test with Tomcat7.", "The application works fine when deployed at Tomcat 7.0.21 at context path /4168.", "Both /4168/404 and /4168/fasdshshds  show the error page.", "I would blame maven-jetty-plugin or the config in this project's pom.xml", "Are you sure?", "Just tried it with JBossAS7 and Tomcat 7.0.22.", "Fails everywhere.", "I suspect you have deployed it on ROOT once, and \"../../\" works.", "As I see, the problem is in the getClientUrl method.", "If it's normal page it uses the private method \"getUrl\", and it does remove context and filter paths, but for an error page it doesn't.", "Hence all resource relative urls have extra 2 levels up \"../../\".", "I did:", "mvn package", "cp target/*.war $TC7/webapps/4168.war", "start TC7", "open http://localhost:8080/4168 (home page)", "open http://localhost:8080/4168/gfshhffdhdhdh (the error page)", "open http://localhost:8080/4168/404 (the error page)", "Fix added", "I do exactly the same!", "And it fails for me.", "Could you show content of the page?", "It should contain [<img src=\"logo.png\" width..../>], but I have [<img src=\"../../logo.png\" width.../>].", "Also could you try \"http://localhost:8080/4168/gf/s/h/h/f/fdhdhdh\" please?", "Hi, in order to simulate the bug here using Firefox I have to clean the browser cache each time I go to the problematic URL.", "Oh, also the the context path can't be empty.", "I'm using here", "class Start{", "...", "bb.setContextPath(\"/bug\");", "...", "}", "Sorry.", "Are you sure it's fixed in 1.5.2?", "?", "Also, the fix r1190596 invokes setParameters twice for error urls - from getContextRelativeUrl and after it.", "Why are you asking?", "OK, I will double check the setParameters usage."], "SplitGT": [" Returns base url without context or filter mapping."], "issueString": "Error page resource relative urls are wrong\nThe wicket page exposed as 404 error page has wrong links to resources. The sample project is attached.\n\nRun the project with \"mvn jetty:run\" and go to url \"http://localhost:8080/bug/404\" - it's mapped wicket page, works perfect. But if you type any wrong url such as \"http://localhost:8080/bug/aaaaaa\" the page doesn't have styles and images.\nSample project based on quickstart maven project.\nThe problem is that ServletWebRequest#getClientUrl method is returning a client URL that includes the context path. When responding it uses the errorAttributes.getRequestUri() URL to create the client one.\nI don't know why ServletWebRequest#getClientUrl is testing error attributes in request and using the error URI, it is the address of the resource causing problems, but getClientUrl is designed to to return only the base URL without context or filter mapping.\n\nSimply remove the test for error attributes an its logic fix this BUG and have no impact at WICKET-3599, WICKET-3551 but breaks some test expectations.\nI think it should use error URI, because actual page could be on different level, not in root as /404. A test case for the fix should include urls like \"\"http://localhost:8080/bug/aaaaaa/bbbb/cccc\". Also to check if it works after moving the \"/404\" mapping to somewhere else, e.g. \"/error/http/404\".\nI can add that the attached quickstart works fine when started with Start.java.\nIt seems Jetty acts differently when started with 'mvn jetty:run' and embedded.\nGoing to test with Tomcat7.\nThe application works fine when deployed at Tomcat 7.0.21 at context path /4168.\nBoth /4168/404 and /4168/fasdshshds  show the error page.\nI would blame maven-jetty-plugin or the config in this project's pom.xml\nAre you sure? Just tried it with JBossAS7 and Tomcat 7.0.22. Fails everywhere. I suspect you have deployed it on ROOT once, and \"../../\" works.\n\nAs I see, the problem is in the getClientUrl method. If it's normal page it uses the private method \"getUrl\", and it does remove context and filter paths, but for an error page it doesn't. Hence all resource relative urls have extra 2 levels up \"../../\".\nI did: \n- mvn package\n- cp target/*.war $TC7/webapps/4168.war\n- start TC7\n- open http://localhost:8080/4168 (home page)\n- open http://localhost:8080/4168/gfshhffdhdhdh (the error page)\n- open http://localhost:8080/4168/404 (the error page)\nFix added\nI do exactly the same! And it fails for me.\nCould you show content of the page? It should contain [<img src=\"logo.png\" width..../>], but I have [<img src=\"../../logo.png\" width.../>]. Also could you try \"http://localhost:8080/4168/gf/s/h/h/f/fdhdhdh\" please?\nHi, in order to simulate the bug here using Firefox I have to clean the browser cache each time I go to the problematic URL.\nOh, also the the context path can't be empty. I'm using here \nclass Start{\n...\n  bb.setContextPath(\"/bug\");\n...\n}\nSorry. Are you sure it's fixed in 1.5.2??\nAlso, the fix r1190596 invokes setParameters twice for error urls - from getContextRelativeUrl and after it.\nWhy are you asking?\nOK, I will double check the setParameters usage.\n", "issueSearchSentences": ["The problem is that ServletWebRequest#getClientUrl method is returning a client URL that includes the context path.", "When responding it uses the errorAttributes.getRequestUri() URL to create the client one.", "Run the project with \"mvn jetty:run\" and go to url \"http://localhost:8080/bug/404\" - it's mapped wicket page, works perfect.", "Sample project based on quickstart maven project.", "A test case for the fix should include urls like \"\"http://localhost:8080/bug/aaaaaa/bbbb/cccc\"."], "issueSearchIndexes": [7, 8, 4, 6, 12]}
{"aId": 58, "code": "protected boolean accepts(final Component component)\n\t{\n\t\treturn component.isAuto() == false;\n\t}", "comment": " Filters which components' render performance should be measured.", "issueId": "WICKET-4015", "issueStringList": ["Implement a listener which can be used to measure the render time of a component", "It would be a nice addition to org.apache.wicket.markup.html.debug.PageView to show how much time it took for a component to be fully initialized and the time to be rendered.", "This can be accomplished with a listener which implements IComponentInstantiationListener, IComponentInitializationListener, IComponentOnBeforeRenderListener, IComponentOnAfterRenderListener.", "The initialization time measures from the call to Component.<init> (IComponentInstantiationListener), to the call Component.onInitialize() (IComponentInitializationListener) because there is no way to know when the component constructor ends.", "Render time measures the time between IComponentOnBeforeRenderListener.onBeforeRender() and IComponentOnAfterRenderListener.onAfterRender().", "The duration is collected in the meta data of the respective component.", "The listener will be part of wicket-devutils sub-project.", "Update: the instantiation time is not really useful in the way we can measure it so it wont be part of this feature request.", "Due to the problem in WICKET-4012 for now IDetachListener.onDetach() is used instead of IComponentOnAfterRenderListener.onAfterRender().", "Attaching the current version of the modifications I have locally.", "Unfortunately the produced numbers are not very meaningful with the current approaches.", "1) Initialization time problem", "Let's say we have a Page with constructor:", "{", "MyComponent c1 = new MyComponent(\"c1\");", "MyComponent c2 = new MyComponent(\"c2\");", "c1.add(c2)", "MyComponent c3 = new MyComponent(\"c3\");", "c2.add(c3);", "...", "add(c1);", "}", "Here we start the measuring for c1 in its constructor but we will end the measuring at \"add(c1)\" call because at this point we will have the path to the Page and onInitialize() will be called.", "So c1's time will include the time of c2, c3, ... as well and wont be very accurate.", "2) Render time problem", "Wicket does something like:", "for (Component child : this) {", "child.onBeforeRender();", "}", "for (Component child : this) {", "child.render();", "}", "for (Component child : this) {", "child.onAfterRender();", "}", "so we measure the whole time for all components, not just the component's onBefore->onAfter time.", "If we find this functionality useful then we will need to add yet another callbacks: onPreRender and onPostRender, i.e.", ":", "for (Component child : this) {", "getApplication().getOnPreRenderListeners().onPreRender(child);", "child.render();", "getApplication().getOnPostRenderListeners().onPostRender(child);", "}", "This way each component will report its time and its parent will have a time which is a sum of all children + its own time.", "No need of OnPreRender/onPostRender listeners.", "All this is possible even now with Behavior.before/afterRender().", "you are not going to add a behavior to every single component instance out there, are you?", "With r1165186 I added org.apache.wicket.devutils.inspector.RenderPerformanceListener.accepts(Component) that can filter which components' render time should be measured.", "By default only auto components are ignored."], "SplitGT": [" Filters which components' render performance should be measured."], "issueString": "Implement a listener which can be used to measure the render time of a component\nIt would be a nice addition to org.apache.wicket.markup.html.debug.PageView to show how much time it took for a component to be fully initialized and the time to be rendered. This can be accomplished with a listener which implements IComponentInstantiationListener, IComponentInitializationListener, IComponentOnBeforeRenderListener, IComponentOnAfterRenderListener.\n\nThe initialization time measures from the call to Component.<init> (IComponentInstantiationListener), to the call Component.onInitialize() (IComponentInitializationListener) because there is no way to know when the component constructor ends.\n\nRender time measures the time between IComponentOnBeforeRenderListener.onBeforeRender() and IComponentOnAfterRenderListener.onAfterRender().\n\nThe duration is collected in the meta data of the respective component.\n\nThe listener will be part of wicket-devutils sub-project.\n\nUpdate: the instantiation time is not really useful in the way we can measure it so it wont be part of this feature request.\nDue to the problem in WICKET-4012 for now IDetachListener.onDetach() is used instead of IComponentOnAfterRenderListener.onAfterRender().\nAttaching the current version of the modifications I have locally.\nUnfortunately the produced numbers are not very meaningful with the current approaches.\n\n1) Initialization time problem\nLet's say we have a Page with constructor:\n{\n   MyComponent c1 = new MyComponent(\"c1\");\n   MyComponent c2 = new MyComponent(\"c2\");\n   c1.add(c2)\n   MyComponent c3 = new MyComponent(\"c3\");\n   c2.add(c3);\n...\n\n   add(c1);\n}\n\nHere we start the measuring for c1 in its constructor but we will end the measuring at \"add(c1)\" call because at this point we will have the path to the Page and onInitialize() will be called. So c1's time will include the time of c2, c3, ... as well and wont be very accurate.\n\n2) Render time problem\nWicket does something like:\nfor (Component child : this) {\n  child.onBeforeRender();\n}\nfor (Component child : this) {\n  child.render();\n}\nfor (Component child : this) {\n  child.onAfterRender();\n}\nso we measure the whole time for all components, not just the component's onBefore->onAfter time.\nIf we find this functionality useful then we will need to add yet another callbacks: onPreRender and onPostRender, i.e.:\nfor (Component child : this) {\n getApplication().getOnPreRenderListeners().onPreRender(child);\n child.render();\n getApplication().getOnPostRenderListeners().onPostRender(child);\n}\n\nThis way each component will report its time and its parent will have a time which is a sum of all children + its own time.\nNo need of OnPreRender/onPostRender listeners. All this is possible even now with Behavior.before/afterRender().\nyou are not going to add a behavior to every single component instance out there, are you?\nWith r1165186 I added org.apache.wicket.devutils.inspector.RenderPerformanceListener.accepts(Component) that can filter which components' render time should be measured. By default only auto components are ignored.\n", "issueSearchSentences": ["Wicket does something like:", "}", "}", ":", "This can be accomplished with a listener which implements IComponentInstantiationListener, IComponentInitializationListener, IComponentOnBeforeRenderListener, IComponentOnAfterRenderListener."], "issueSearchIndexes": [26, 29, 32, 38, 3]}
{"aId": 59, "code": "public void replaceSession()\n\t{\n\t\tgetSessionStore().invalidate(RequestCycle.get().getRequest());\n\t\tbind();\n\t}", "comment": " Replaces the underlying (Web)Session, invalidating the current one and creating a new one. By calling ISessionStore#invalidate(Request) and #bind Call upon login to protect against session fixation.", "issueId": "WICKET-1767", "issueStringList": ["Protection against Session Fixation", "Securing a Wicket application against Session Fixation attacks (http://www.owasp.org/index.php/Session_Fixation) is currently not trivial.", "This is especially problematic as most Java webservers fall back to URL rewriting when the user disabled cookies.", "The session is gets appended to the URL and its trivial to steal a session.", "To protect against session fixation, the HTTP session must be invalidated and recreated on login, giving the user a new session id.", "The following code does exactly that, it must be called before loggin in the user (eg.", "store credentials).", "A redirect isn't required, though it should be part of the login-form anyway.", "ISessionStore store = Application.get().getSessionStore();", "Request request = RequestCycle.get().getRequest();", "store.invalidate(request);", "Session session = Application.get().newSession(request, RequestCycle.get().getResponse());", "session.bind();", "store.bind(request, session);", "Calling session.invalidateNow() does NOT work (I have no idea why).", "I'd like to see support for this as part of Wicket - it took me about 6 hours to figure out the Wicket internals and produce these 6 lines of code.", "Others shouldn't have to bother with that.", "I can't provide a testcase.", "Applications work fine without the addition, but leave users vulnerable to the session-fixation.", "Manual testing has to look at the session id (eg.", "via Firebug's Net tab) before and after a login.", "the first 3 lines are exactly what session.invalidate does", "But we dont create a new session right away.", "And i think that is the problem", "But what you coud try is doing this:", "session.invalidateNow()", "Session.unset();", "Thanks for the comment Johan.", "invalidateNow actually does more then just store.invalidate(request).", "It also sets the invalited flag, which has some, in this case, undesired side effects.", "I didn't understand what exactly happens, but its definitely not the same.", "Calling Session.unset() didn't help either.", "that flag shouldnt be in the way one bit", "It just says that the session is invalidate or should invalidate", "so for the rest it does exactly teh same is the 3 first lines:", "getSessionStore().invalidate(RequestCycle.get().getRequest());", "Then i you call Session.unset()", "and then you ask for a session again (when you login in)", "You should get a new one.", "I guess you really also should call bind() on it because you do want to store it and i guess we dont know that yet", "So", "session.invalidatNow()", "Session.unset()", "Session.get().bind();", "If that doenst work then i guess that something goes wrong in the bind() call and i guess thats related with:", "if (store.lookup(request) == null)", "Maybe that somehow sees still the old session.", "I lack the necessary knowledge about Wicket internals, so I was trying out things while reading bits of Wicket source code.", "session.invalidatNow()", "Session.unset()", "Session.get().bind();", "Those didn't work.", "One possible issue with Session.get(), called after invalidate/unset could be that get() actually creates the session, but without creating a HTTP session.", "Also store.lookup has to return null, as store.invalidate(request) kills the HTTP session, and lookup takes the session id and uses getAttribute to access the HTTP session.", "My code seems to work because, in constract to the various \"alternatives\", it first invalidates the HTTP session, then creates a new Wicket Session (via Application#newSession, then binds it to the HTTP session (creating a new one), then binding it to the SessionStore.", "What do you think?", "Would a simple test application, that does nothing but login in with a single button and outputting the session id help?", "no this is just weird", "It has to be in the last bind() call that you do the rest is exactly the same", "session.invalidatNow()", "Session.unset()", "session = Session.get();", "session.bind()", "i guess that last call is just a NOP.", "doesnt do anything because store.lookup() still returns something.", "for example after that sesion.bind() call does the session have an id?", "this code has to work it is just exactly the same as yours i cant see any difference and then it is just the rebinding in the same request that goes wrong", "session.invalidatNow()", "Session.unset()", "session = Session.get(); << this should now be another instance of session!", "Application.get().getSessionStore().bind(request, session);", "the only thing is that session doesnt have an id then i think.", "Tried this:", "get().invalidateNow();", "Session.unset();", "Session session = Session.get();", "session.bind();", "Application.get().getSessionStore().bind(request(), session);", "Without the session.bind() no new HttpSession is created, resulting in a NullPointerException in SessionStore.", "With the bind-call, as above, it just doesn't work.", "Some further experimentation showed that this works, somewhat simplifying my initial solution:", "Application.get().getSessionStore().invalidate(RequestCycle.get().getRequest());", "Session session = Session.get();", "session.bind();", "Application.get().getSessionStore().bind(request(), session);", "Replacing the first line with get().invalidateNow() does NOT work.", "So that sessionInvalidated flag in Session must have some undesired sideeffect, as that is the only difference between Session#invalidateNow and my code.", "that that code works is weird you dont even call unset() !", "So the second line where you do session.get() you should get the same session that is already stored in the thread local", "I still dont get what that sessioninvalidate flag has to do with anything.", "If you call Session.unset()", "and then Session.get() then you have a new session.", "That that old object with that flag is not used anymore..", "So how can it be in the way?", "?", "So you are saying that you have to call session.bind() else you dont have a new httpsession.", "then what thought would go wrong that it would go into this if", "if (store.lookup(request) == null)", "{", "explicitly create a session", "id = store.getSessionId(request, true);", "bind it", "store.bind(request, this);", "isnt the case.", "So your call that you do also your self:", "Application.get().getSessionStore().bind(request(), session);", "is already done.", "so why do you have to call it a second time also yourself?", "This all doesnt make sense.", "I can only repeat myself - and provide a testapp if that helps.", "You're welcome to give it a try yourself, I don't see how we could get any further otherwise.", "give me a test case then if you cant debug it what is really different", "Because currently the only thing i see to fix this is doing that Session.unset() in the invalidateNow() call", "Everything should work then  (if you call bind() your self in your login code)", "I just noticed an interesting thing here: I'm not calling Session.unset, thats why it works at all.", "Basically I'm replacing the HTTP session WITHOUT(!)", "replacing the Wicket Session - it just gets bound to the new HTTP session, and thats it.", "Thats why invalidateNow doesn't work: The Session is marked as invalid and rebinding it fails.", "Good to finalize realize that.", "All wicket related state is bound to the wicket Session object.", "By just rebinding it to a new Session, everything continues to work as intentended.", "Creating a new wicket Session kills the state that has to be maintained.", "Assuming the session-fixation-protection is a desired feature, can we add something to Session that makes this easier to use and much easier to document?", "Something like Session.get().replace().", "Replaces the underlying HTTP Session, invalidating the current one and", "creating a new one.", "<p>", "Call upon login to protect against session fixation.", "@see http://www.owasp.org/index.php/Session_Fixation", "public void replace() {", "getSessionStore().invalidate(RequestCycle.get().getRequest());", "bind();", "getSessionStore().bind(RequestCycle.get().getRequest(), this);", "}", "if you are not replacing the old session instance with the new, then it is possible to still access stale values from the old session instance during that request...", "I don't consider that a problem.", "On the hand, the old session got invalidet, so there is no way it still contains stale values.", "On the other, I don't need to invalidate Wickets Session state, all I need is a new HTTP session.", "After all, the point isn't to remove Wicket's session state, but to get a new session id.", "the stale state might not be in the actual httpsession, but it remains in wicket's session object attached to the current thread, and is not synced into httpsession until the end of requests afaik.", "so there is still a problem there, because between you calling invalidate() and the end of the request you can have business logic acting on old values it stored in wicket's session object.", "so the only thing you want to do is remove the http session but nothing more?", "((WebRequest)RequestCycle.get().getRequest()).getHttpServletRequest().getSession().invalidate()", "session.bind()", "Thanks Johan, that makes it even shorter.", "This works fine:", "Replaces the underlying HTTP Session, invalidating the current one and", "creating a new one.", "<p>", "Call upon login to protect against session fixation.", "@see http://www.owasp.org/index.php/Session_Fixation", "public void replace() {", "((WebRequest)RequestCycle.get().getRequest()).getHttpServletRequest().getSession().invalidate();", "bind();", "}", "that is something we cant add to Session but maybe to the WebSession subclass.", "i dont like the name replace() to much..", "a bit more explicit like invalidateHttpSession() or replaceHttpSession() (in WebSession not Session)", "igor should we add this to the api what do you think?", "replaceHttpSession() in WebSession sounds good.", "By the way, I'm still wondering why Wicket has the seperatation of a non-web-layer and a WebXXX-layer on top of that.", "Can you give me an idea about that?", "I haven't seen any hint at usage of Wicket in non-http scenerios...", "for example there was/is talk about a Wap implementation", "also the portlets are implemented a bit different, but thats only for the special request/response wrappers", "but currently the only impl is really the http/web implementation but the base is http/web free", "a while ago someone also used wicket with apache mina instead of wicket running in jetty.", "so the separation is used, albeit seldomly.", "Any plans to fix this?", "It doesn't affect any existing code and its only four lines of code...", "will try to apply it in 1.4", "johan, should we just add bind() call to session.invalidatenow()?", "seems like that is the only missing bit and it would make more sense there then in yet another method.", "that doesnt sound logical to me", "if i call invalidateNow() of a wicket session then it doesnt say to me that that where i just called invalidateNow() on is then added to a new HttpSession so it is kind of still alive not really invalidated at all (at least not the object i called it on)", "And then the boolean in the wicket session", "sessionInvalidated = true; // set this for isSessionInvalidated", "is telling us what?...", "no i guess having a nice method like replaceHttpSession is way better.", "i added this method:", "Replaces the underlying (Web)Session, invalidating the current one and creating a new one.", "By", "calling {@link ISessionStore#invalidate(Request)} and {@link #bind()}", "<p>", "Call upon login to protect against session fixation.", "@see \"http://www.owasp.org/index.php/Session_Fixation\"", "public void replaceSession()", "{", "getSessionStore().invalidate(RequestCycle.get().getRequest());", "bind();", "}", "i think thats the nicest thing to have (maybe a better method name anyone?)"], "SplitGT": [" Replaces the underlying (Web)Session, invalidating the current one and creating a new one.", "By calling ISessionStore#invalidate(Request) and #bind Call upon login to protect against session fixation."], "issueString": "Protection against Session Fixation\nSecuring a Wicket application against Session Fixation attacks (http://www.owasp.org/index.php/Session_Fixation) is currently not trivial. This is especially problematic as most Java webservers fall back to URL rewriting when the user disabled cookies. The session is gets appended to the URL and its trivial to steal a session.\n\nTo protect against session fixation, the HTTP session must be invalidated and recreated on login, giving the user a new session id. The following code does exactly that, it must be called before loggin in the user (eg. store credentials). A redirect isn't required, though it should be part of the login-form anyway.\n\nISessionStore store = Application.get().getSessionStore();\nRequest request = RequestCycle.get().getRequest();\nstore.invalidate(request);\nSession session = Application.get().newSession(request, RequestCycle.get().getResponse());\nsession.bind();\nstore.bind(request, session);\n\nCalling session.invalidateNow() does NOT work (I have no idea why).\n\nI'd like to see support for this as part of Wicket - it took me about 6 hours to figure out the Wicket internals and produce these 6 lines of code. Others shouldn't have to bother with that.\n\nI can't provide a testcase. Applications work fine without the addition, but leave users vulnerable to the session-fixation. Manual testing has to look at the session id (eg. via Firebug's Net tab) before and after a login.\nthe first 3 lines are exactly what session.invalidate does\n\nBut we dont create a new session right away. And i think that is the problem\nBut what you coud try is doing this:\n\nsession.invalidateNow()\nSession.unset();\n\n\nThanks for the comment Johan.\n\ninvalidateNow actually does more then just store.invalidate(request). It also sets the invalited flag, which has some, in this case, undesired side effects. I didn't understand what exactly happens, but its definitely not the same.\n\nCalling Session.unset() didn't help either.\nthat flag shouldnt be in the way one bit\nIt just says that the session is invalidate or should invalidate\n\nso for the rest it does exactly teh same is the 3 first lines:\n\ngetSessionStore().invalidate(RequestCycle.get().getRequest());\n\nThen i you call Session.unset()\nand then you ask for a session again (when you login in)\nYou should get a new one. I guess you really also should call bind() on it because you do want to store it and i guess we dont know that yet\n\nSo\nsession.invalidatNow()\nSession.unset()\nSession.get().bind();\n\n\nIf that doenst work then i guess that something goes wrong in the bind() call and i guess thats related with:\n\nif (store.lookup(request) == null)\n\nMaybe that somehow sees still the old session.\nI lack the necessary knowledge about Wicket internals, so I was trying out things while reading bits of Wicket source code.\n\nsession.invalidatNow()\nSession.unset()\nSession.get().bind(); \n\nThose didn't work. One possible issue with Session.get(), called after invalidate/unset could be that get() actually creates the session, but without creating a HTTP session.\n\nAlso store.lookup has to return null, as store.invalidate(request) kills the HTTP session, and lookup takes the session id and uses getAttribute to access the HTTP session.\n\nMy code seems to work because, in constract to the various \"alternatives\", it first invalidates the HTTP session, then creates a new Wicket Session (via Application#newSession, then binds it to the HTTP session (creating a new one), then binding it to the SessionStore.\n\nWhat do you think? Would a simple test application, that does nothing but login in with a single button and outputting the session id help?\nno this is just weird\nIt has to be in the last bind() call that you do the rest is exactly the same\n\nsession.invalidatNow()\nSession.unset()\nsession = Session.get();\nsession.bind()\n\ni guess that last call is just a NOP. doesnt do anything because store.lookup() still returns something.\n\nfor example after that sesion.bind() call does the session have an id?\n\nthis code has to work it is just exactly the same as yours i cant see any difference and then it is just the rebinding in the same request that goes wrong\n\nsession.invalidatNow()\nSession.unset()\nsession = Session.get(); << this should now be another instance of session!\nApplication.get().getSessionStore().bind(request, session); \n\nthe only thing is that session doesnt have an id then i think.\n\nTried this:\n\nget().invalidateNow();\nSession.unset();\nSession session = Session.get();\nsession.bind();\nApplication.get().getSessionStore().bind(request(), session);\n\nWithout the session.bind() no new HttpSession is created, resulting in a NullPointerException in SessionStore. With the bind-call, as above, it just doesn't work.\n\nSome further experimentation showed that this works, somewhat simplifying my initial solution:\n\nApplication.get().getSessionStore().invalidate(RequestCycle.get().getRequest());\nSession session = Session.get();\nsession.bind();\nApplication.get().getSessionStore().bind(request(), session);\n\nReplacing the first line with get().invalidateNow() does NOT work. So that sessionInvalidated flag in Session must have some undesired sideeffect, as that is the only difference between Session#invalidateNow and my code.\nthat that code works is weird you dont even call unset() !\nSo the second line where you do session.get() you should get the same session that is already stored in the thread local\n\n\nI still dont get what that sessioninvalidate flag has to do with anything.\nIf you call Session.unset()\nand then Session.get() then you have a new session. That that old object with that flag is not used anymore..\nSo how can it be in the way??\n\nSo you are saying that you have to call session.bind() else you dont have a new httpsession. then what thought would go wrong that it would go into this if\n\n\tif (store.lookup(request) == null)\n\t\t{\n\t\t\t// explicitly create a session\n\t\t\tid = store.getSessionId(request, true);\n\t\t\t// bind it\n\t\t\tstore.bind(request, this);\n\nisnt the case. So your call that you do also your self:\nApplication.get().getSessionStore().bind(request(), session); \n\nis already done. so why do you have to call it a second time also yourself? This all doesnt make sense.\n\n\nI can only repeat myself - and provide a testapp if that helps. You're welcome to give it a try yourself, I don't see how we could get any further otherwise.\ngive me a test case then if you cant debug it what is really different\nBecause currently the only thing i see to fix this is doing that Session.unset() in the invalidateNow() call\n\nEverything should work then  (if you call bind() your self in your login code)\nI just noticed an interesting thing here: I'm not calling Session.unset, thats why it works at all. Basically I'm replacing the HTTP session WITHOUT(!) replacing the Wicket Session - it just gets bound to the new HTTP session, and thats it.\n\nThats why invalidateNow doesn't work: The Session is marked as invalid and rebinding it fails.\n\nGood to finalize realize that. All wicket related state is bound to the wicket Session object. By just rebinding it to a new Session, everything continues to work as intentended. Creating a new wicket Session kills the state that has to be maintained.\n\nAssuming the session-fixation-protection is a desired feature, can we add something to Session that makes this easier to use and much easier to document? Something like Session.get().replace().\n\n/**\n * Replaces the underlying HTTP Session, invalidating the current one and\n * creating a new one.\n * <p>\n * Call upon login to protect against session fixation.\n * \n * @see http://www.owasp.org/index.php/Session_Fixation\n */\npublic void replace() {\n\tgetSessionStore().invalidate(RequestCycle.get().getRequest());\n\tbind();\n\tgetSessionStore().bind(RequestCycle.get().getRequest(), this);\n}\nif you are not replacing the old session instance with the new, then it is possible to still access stale values from the old session instance during that request...\nI don't consider that a problem. On the hand, the old session got invalidet, so there is no way it still contains stale values. On the other, I don't need to invalidate Wickets Session state, all I need is a new HTTP session. After all, the point isn't to remove Wicket's session state, but to get a new session id.\nthe stale state might not be in the actual httpsession, but it remains in wicket's session object attached to the current thread, and is not synced into httpsession until the end of requests afaik. so there is still a problem there, because between you calling invalidate() and the end of the request you can have business logic acting on old values it stored in wicket's session object.\nso the only thing you want to do is remove the http session but nothing more?\n\n((WebRequest)RequestCycle.get().getRequest()).getHttpServletRequest().getSession().invalidate()\nsession.bind()\n\n\n\nThanks Johan, that makes it even shorter.\n\nThis works fine:\n\n/**\n * Replaces the underlying HTTP Session, invalidating the current one and\n * creating a new one.\n * <p>\n * Call upon login to protect against session fixation.\n * \n * @see http://www.owasp.org/index.php/Session_Fixation\n */\npublic void replace() {\n\t((WebRequest)RequestCycle.get().getRequest()).getHttpServletRequest().getSession().invalidate();\n\tbind();\n}\nthat is something we cant add to Session but maybe to the WebSession subclass.\ni dont like the name replace() to much..\na bit more explicit like invalidateHttpSession() or replaceHttpSession() (in WebSession not Session)\n\nigor should we add this to the api what do you think?\nreplaceHttpSession() in WebSession sounds good.\n\nBy the way, I'm still wondering why Wicket has the seperatation of a non-web-layer and a WebXXX-layer on top of that. Can you give me an idea about that? I haven't seen any hint at usage of Wicket in non-http scenerios...\nfor example there was/is talk about a Wap implementation\nalso the portlets are implemented a bit different, but thats only for the special request/response wrappers \n\nbut currently the only impl is really the http/web implementation but the base is http/web free\na while ago someone also used wicket with apache mina instead of wicket running in jetty. so the separation is used, albeit seldomly.\nAny plans to fix this? It doesn't affect any existing code and its only four lines of code...\nwill try to apply it in 1.4\njohan, should we just add bind() call to session.invalidatenow()? seems like that is the only missing bit and it would make more sense there then in yet another method.\nthat doesnt sound logical to me\nif i call invalidateNow() of a wicket session then it doesnt say to me that that where i just called invalidateNow() on is then added to a new HttpSession so it is kind of still alive not really invalidated at all (at least not the object i called it on)\n\nAnd then the boolean in the wicket session \nsessionInvalidated = true; // set this for isSessionInvalidated\n\nis telling us what?...\n\nno i guess having a nice method like replaceHttpSession is way better.\ni added this method:\n\t/**\n\t * Replaces the underlying (Web)Session, invalidating the current one and creating a new one. By\n\t * calling {@link ISessionStore#invalidate(Request)} and {@link #bind()}\n\t * <p>\n\t * Call upon login to protect against session fixation.\n\t * \n\t * @see \"http://www.owasp.org/index.php/Session_Fixation\"\n\t */\n\tpublic void replaceSession()\n\t{\n\t\tgetSessionStore().invalidate(RequestCycle.get().getRequest());\n\t\tbind();\n\t}\n\ni think thats the nicest thing to have (maybe a better method name anyone?)\n", "issueSearchSentences": ["@see \"http://www.owasp.org/index.php/Session_Fixation\"", "so for the rest it does exactly teh same is the 3 first lines:", "public void replace() {", "{", "bind();"], "issueSearchIndexes": [186, 35, 130, 188, 132]}
