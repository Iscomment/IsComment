{"aId": 1, "code": "public static void main(String[] args) {\n\n    try {\n      Injector injector = Guice.createInjector(new ControllerModule(), new AuditLoggerModule());\n      LdapToPamMigrationHelper migrationHelper = injector.getInstance(LdapToPamMigrationHelper.class);\n\n      migrationHelper.migrateLdapUsersGroups();\n\n    } catch (Throwable t) {\n      LOG.error(\"Caught exception on migration. Exiting...\", t);\n      System.exit(1);\n    }\n\n  }", "comment": " Support changes needed to migrate LDAP users & groups to PAM", "issueId": "AMBARI-19038", "issueStringList": ["Support migration of LDAP users & groups to PAM", "After PAM has been declared as the authentication mechanism for Ambari clients (for example, the Ambari Server web-based UI) where previously the mechanism was LDAP, a migration process is needed to converts the LDAP users and groups to PAM users and groups.", "This facility may be invoked using:", "{noformat}", "ambari-server migrate-ldap-pam", "{noformat}", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12841382/AMBARI-19038.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:red}-1 tests included{color}.", "The patch doesn't appear to include any new or modified tests.", "Please justify why no new tests are needed for this patch.", "Also please list what manual steps were performed to verify this patch.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.state.ServicePropertiesTest", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/9491//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/9491//console", "This message is automatically generated.", "[~ghugare], I believe that this JIRA has been orphaned.", "However the topic has been restarted and I have a patch that contains much of the code from the original patch, plus changes for Ambari 2.5.", "Do you mind if I take this JIRA over?", "Cancelling the out-dated patch for this.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12877104/AMBARI-19038_branch-2.5_01.patch", "against trunk revision .", "{color:red}-1 patch{color}.", "The patch command could not apply the patch.", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/11786//console", "This message is automatically generated.", "Committed to branch-2.5", "{noformat}", "commit 13a6fa84542e9f69f85c171007b73636f5130a09", "Author: Robert Levas <rlevas@hortonworks.com>", "Date:   Fri Jul 14 09:57:35 2017 -0400", "{noformat}", "SUCCESS: Integrated in Jenkins build Ambari-branch-2.5 #1688 (See [https://builds.apache.org/job/Ambari-branch-2.5/1688/])", "AMBARI-19038.", "Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=13a6fa84542e9f69f85c171007b73636f5130a09])", "(edit) ambari-server/pom.xml", "(edit) ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java", "(edit) ambari-server/src/main/python/ambari-server.py", "(edit) ambari-server/sbin/ambari-server", "(add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java", "(edit) ambari-server/src/main/python/ambari_server/setupSecurity.py", "(edit) ambari-server/src/main/python/ambari_server/setupActions.py", "(edit) ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/groups/GroupsEditCtrl.js", "Committed to trunk", "{noformat}", "commit f7fac03778fda337bc96ed49ed7507e1af118b7d", "Author: Robert Levas <rlevas@hortonworks.com>", "Date:   Fri Jul 14 10:47:17 2017 -0400", "{noformat}", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7763 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7763/])", "AMBARI-19038.", "Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f7fac03778fda337bc96ed49ed7507e1af118b7d])", "(edit) ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/groups/GroupsEditCtrl.js", "(edit) ambari-server/src/main/python/ambari_server/setupActions.py", "(edit) ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java", "(add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java", "(edit) ambari-server/pom.xml", "(edit) ambari-server/sbin/ambari-server", "(edit) ambari-server/src/main/python/ambari-server.py", "(edit) ambari-server/src/main/python/ambari_server/setupSecurity.py"], "SplitGT": [" Support changes needed to migrate LDAP users & groups to PAM"], "issueString": "Support migration of LDAP users & groups to PAM\nAfter PAM has been declared as the authentication mechanism for Ambari clients (for example, the Ambari Server web-based UI) where previously the mechanism was LDAP, a migration process is needed to converts the LDAP users and groups to PAM users and groups.  \n\nThis facility may be invoked using:\n\n{noformat}\nambari-server migrate-ldap-pam\n{noformat}\n\n\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12841382/AMBARI-19038.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.\n                        Please justify why no new tests are needed for this patch.\n                        Also please list what manual steps were performed to verify this patch.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.state.ServicePropertiesTest\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/9491//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/9491//console\n\nThis message is automatically generated.\n[~ghugare], I believe that this JIRA has been orphaned. However the topic has been restarted and I have a patch that contains much of the code from the original patch, plus changes for Ambari 2.5.  Do you mind if I take this JIRA over?\n\nCancelling the out-dated patch for this. \n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12877104/AMBARI-19038_branch-2.5_01.patch\n  against trunk revision .\n\n    {color:red}-1 patch{color}.  The patch command could not apply the patch.\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/11786//console\n\nThis message is automatically generated.\nCommitted to branch-2.5\n\n{noformat}\ncommit 13a6fa84542e9f69f85c171007b73636f5130a09\nAuthor: Robert Levas <rlevas@hortonworks.com>\nDate:   Fri Jul 14 09:57:35 2017 -0400\n{noformat}\nSUCCESS: Integrated in Jenkins build Ambari-branch-2.5 #1688 (See [https://builds.apache.org/job/Ambari-branch-2.5/1688/])\nAMBARI-19038. Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=13a6fa84542e9f69f85c171007b73636f5130a09])\n* (edit) ambari-server/pom.xml\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java\n* (edit) ambari-server/src/main/python/ambari-server.py\n* (edit) ambari-server/sbin/ambari-server\n* (add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java\n* (edit) ambari-server/src/main/python/ambari_server/setupSecurity.py\n* (edit) ambari-server/src/main/python/ambari_server/setupActions.py\n* (edit) ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/groups/GroupsEditCtrl.js\n\nCommitted to trunk\n\n{noformat}\ncommit f7fac03778fda337bc96ed49ed7507e1af118b7d\nAuthor: Robert Levas <rlevas@hortonworks.com>\nDate:   Fri Jul 14 10:47:17 2017 -0400\n{noformat}\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7763 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7763/])\nAMBARI-19038. Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f7fac03778fda337bc96ed49ed7507e1af118b7d])\n* (edit) ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/groups/GroupsEditCtrl.js\n* (edit) ambari-server/src/main/python/ambari_server/setupActions.py\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java\n* (add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java\n* (edit) ambari-server/pom.xml\n* (edit) ambari-server/sbin/ambari-server\n* (edit) ambari-server/src/main/python/ambari-server.py\n* (edit) ambari-server/src/main/python/ambari_server/setupSecurity.py\n\n", "issueSearchSentences": ["ambari-server migrate-ldap-pam", "(add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java", "(add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java", "Support migration of LDAP users & groups to PAM", "After PAM has been declared as the authentication mechanism for Ambari clients (for example, the Ambari Server web-based UI) where previously the mechanism was LDAP, a migration process is needed to converts the LDAP users and groups to PAM users and groups."], "issueSearchScores": [0.5366621017456055, 0.5299456119537354, 0.5299456119537354, 0.5191376805305481, 0.5172934532165527]}
{"aId": 3, "code": "@ApiModelProperty(name = \"ldap_integration_desired\")\n  public boolean isLdapIntegrationDesired() {\n    return ldapIntegrationDesired;\n  }", "comment": " Indicates whether the service is chosen for LDAP integration or not", "issueId": "AMBARI-24927", "issueStringList": ["Add LDAP integration support information to service information via Ambari's REST API", "Add LDAP integration support information to service information via Ambari's REST API.", "This information should be usable by Ambari's search predicate feature.", "New\u00a0_read-only_\u00a0properties for (stack) services should be:", "*{{ldap_integration_supported}}*\u00a0- Indicates whether the service supports LDAP integration or not", "Information is expected to be determined by service's meta info (see AMBARI-24907)", "New\u00a0_read-only_\u00a0properties for installed services should be:", "*{{ldap_integration_supported}}*\u00a0- Indicates whether the service supports LDAP integration or not", "Information is expected to be determined by service's meta info (see\u00a0AMBARI-24907\u00a0)", "*{{ldap_integration_enabled}}*\u00a0- Indicates whether the service is configured for LDAP integration or not", "Information is expected to be determined by a value indicated in the service's meta info (see AMBARI-24907)", "*{{ldap_integration_desired}}*\u00a0- Indicates whether the service is chosen for LDAP integration or not (see AMBARI-24913)", "Information is expected to be in the Ambari configurations with the property name\u00a0{{ldap_enabled_services}}", "Examples:", "{noformat:title=Get stack service details}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",", "{", "\"href\" : \":URL\",", "\"StackServices\" : {", "...", "\"ldap_integration_supported\": \"false\",", "...", "},", "...", "{noformat}", "{noformat:title=Get installed service information}", "GET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME", "{", "\"href\" : \":URL\",", "\"ServiceInfo\" : {", "\"cluster_name\" : \":CLUSTER_NAME\",", "...", "\"ldap_integration_supported\": \"true\",", "\"ldap_integration_enabled\": \"false\",", "\"ldap_integration_desired\": \"false\",", "...", "},", "...", "{noformat}", "{noformat:title=List installed services that support LDAP integration}", "GET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/ldap_integration_supported=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}", "{noformat}", "{noformat:title=List stack services that support LDAP integration}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/ldap_integration_supported=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}{noformat}", "SUCCESS: Integrated in Jenkins build Ambari-trunk-Commit #10318 (See [https://builds.apache.org/job/Ambari-trunk-Commit/10318/])", "AMBARI-24927.", "Adding LDAP integration support information to service (github: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=296484db88ec8cb8b4753f6e69e23db3975dfc1b])", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariServerTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/utils/StageUtilsTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog252Test.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/state/services/AlertNoticeDispatchServiceTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerLDAPConfigurationHandler.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/testutils/PartialNiceMockBinder.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/alerts/ComponentVersionAlertRunnableTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/PreconfigureKerberosActionTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/orm/dao/AlertsDAOCachedTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostResourceProviderTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/UpdateKerberosConfigsServerActionTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserAuthenticationSourceResourceProviderTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/alerts/AgentHeartbeatAlertRunnableTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog251Test.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/agent/AgentResourceTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/update/HostUpdateHelperTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandler.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/state/ConfigHelperTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/state/services/CachedAlertFlushServiceTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerSSOConfigurationHandler.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/alerts/AmbariPerformanceRunnableTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/KerberosKeytabsActionTest.java"], "SplitGT": [" Indicates whether the service is chosen for LDAP integration or not"], "issueString": "Add LDAP integration support information to service information via Ambari's REST API\nAdd LDAP integration support information to service information via Ambari's REST API. This information should be usable by Ambari's search predicate feature.\r\n\r\nNew\u00a0_read-only_\u00a0properties for (stack) services should be:\r\n * *{{ldap_integration_supported}}*\u00a0- Indicates whether the service supports LDAP integration or not\r\n ** Information is expected to be determined by service's meta info (see AMBARI-24907)\r\n\r\nNew\u00a0_read-only_\u00a0properties for installed services should be:\r\n * *{{ldap_integration_supported}}*\u00a0- Indicates whether the service supports LDAP integration or not\r\n ** Information is expected to be determined by service's meta info (see\u00a0AMBARI-24907\u00a0)\r\n * *{{ldap_integration_enabled}}*\u00a0- Indicates whether the service is configured for LDAP integration or not\r\n ** Information is expected to be determined by a value indicated in the service's meta info (see AMBARI-24907)\r\n * *{{ldap_integration_desired}}*\u00a0- Indicates whether the service is chosen for LDAP integration or not (see AMBARI-24913)\r\n ** Information is expected to be in the Ambari configurations with the property name\u00a0{{ldap_enabled_services}}\r\n\r\nExamples:\r\n{noformat:title=Get stack service details}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",\r\n{\r\n  \"href\" : \":URL\",\r\n  \"StackServices\" : {\r\n     ...\r\n     \"ldap_integration_supported\": \"false\",\r\n     ...\r\n  },\r\n  ...\r\n{noformat}\r\n{noformat:title=Get installed service information}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME\r\n{\r\n  \"href\" : \":URL\",\r\n  \"ServiceInfo\" : {\r\n    \"cluster_name\" : \":CLUSTER_NAME\",\r\n    ...\r\n    \"ldap_integration_supported\": \"true\",\r\n    \"ldap_integration_enabled\": \"false\",\r\n    \"ldap_integration_desired\": \"false\",\r\n     ...\r\n    },\r\n    ...\r\n{noformat}\r\n{noformat:title=List installed services that support LDAP integration}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/ldap_integration_supported=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}\r\n{noformat}\r\n{noformat:title=List stack services that support LDAP integration}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/ldap_integration_supported=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}{noformat}\nSUCCESS: Integrated in Jenkins build Ambari-trunk-Commit #10318 (See [https://builds.apache.org/job/Ambari-trunk-Commit/10318/])\nAMBARI-24927. Adding LDAP integration support information to service (github: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=296484db88ec8cb8b4753f6e69e23db3975dfc1b])\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariServerTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/KerberosHelperTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/utils/StageUtilsTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog252Test.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/state/services/AlertNoticeDispatchServiceTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerLDAPConfigurationHandler.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/testutils/PartialNiceMockBinder.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog260Test.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/alerts/ComponentVersionAlertRunnableTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/PreconfigureKerberosActionTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/orm/dao/AlertsDAOCachedTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostResourceProviderTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/UpdateKerberosConfigsServerActionTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserAuthenticationSourceResourceProviderTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/alerts/AgentHeartbeatAlertRunnableTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog251Test.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/agent/AgentResourceTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/update/HostUpdateHelperTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandler.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/state/ConfigHelperTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/state/services/CachedAlertFlushServiceTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerSSOConfigurationHandler.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/alerts/AmbariPerformanceRunnableTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/serveraction/upgrades/KerberosKeytabsActionTest.java\n\n", "issueSearchSentences": ["\"ldap_integration_desired\": \"false\",", "\"ldap_integration_supported\": \"true\",", "*{{ldap_integration_desired}}*\u00a0- Indicates whether the service is chosen for LDAP integration or not (see AMBARI-24913)", "\"ldap_integration_supported\": \"false\",", "\"ldap_integration_enabled\": \"false\","], "issueSearchScores": [0.7077538967132568, 0.6788636445999146, 0.6767618656158447, 0.6684429049491882, 0.6529444456100464]}
{"aId": 5, "code": "protected void updateHBaseConfigs() throws AmbariException {\n    final AmbariManagementController controller = injector.getInstance(AmbariManagementController.class);\n    final Clusters clusters = controller.getClusters();\n\n    if (null != clusters) {\n      Map<String, Cluster> clusterMap = clusters.getClusters();\n\n      if (null != clusterMap && !clusterMap.isEmpty()) {\n        for (final Cluster cluster : clusterMap.values()) {\n          Set<String> installedServices = cluster.getServices().keySet();\n          StackId stackId = cluster.getCurrentStackVersion();\n\n          // HBase is installed and Kerberos is enabled\n          if (installedServices.contains(\"HBASE\") && SecurityType.KERBEROS == cluster.getSecurityType() && isAtLeastHdp25(stackId)) {\n            Config hbaseSite = cluster.getDesiredConfigByType(HBASE_SITE_CONFIG);\n            if (null != hbaseSite) {\n              Map<String, String> hbaseSiteProperties = hbaseSite.getProperties();\n              // Get any existing config properties (they probably don't exist)\n              String principal = hbaseSiteProperties.get(HBASE_SPNEGO_PRINCIPAL_KEY);\n              String keytab = hbaseSiteProperties.get(HBASE_SPNEGO_KEYTAB_KEY);\n\n              final Map<String, String> updatedKerberosProperties = new HashMap<>();\n\n              // Set the principal for SPNEGO if it's not already set\n              if (null == principal) {\n                final KerberosDescriptor defaultDescriptor = getKerberosDescriptor(cluster);\n                final KerberosIdentityDescriptor spnegoDescriptor = defaultDescriptor.getIdentity(\"spnego\");\n                if (null != spnegoDescriptor) {\n                  // Add the SPNEGO config for the principal\n                  KerberosPrincipalDescriptor principalDescriptor = spnegoDescriptor.getPrincipalDescriptor();\n                  if (null != principalDescriptor) {\n                    updatedKerberosProperties.put(HBASE_SPNEGO_PRINCIPAL_KEY, principalDescriptor.getValue());\n                  }\n                }\n              }\n\n              // Set the keytab for SPNEGO if it's not already set\n              if (null == keytab) {\n                final KerberosDescriptor defaultDescriptor = getKerberosDescriptor(cluster);\n                final KerberosIdentityDescriptor spnegoDescriptor = defaultDescriptor.getIdentity(\"spnego\");\n                if (null != spnegoDescriptor) {\n                  // Add the SPNEGO config for the keytab\n                  KerberosKeytabDescriptor keytabDescriptor = spnegoDescriptor.getKeytabDescriptor();\n                  if (null != keytabDescriptor) {\n                    updatedKerberosProperties.put(HBASE_SPNEGO_KEYTAB_KEY, keytabDescriptor.getFile());\n                  }\n                }\n              }\n\n              // Update the configuration if we changed anything\n              if (!updatedKerberosProperties.isEmpty()) {\n                updateConfigurationProperties(HBASE_SITE_CONFIG, updatedKerberosProperties, true, false);\n              }\n            }\n          }\n        }\n      }\n    }\n  }", "comment": " Update HBase Kerberos configurations. HBase needs to have new keytab and principal properties to enable SPNEGO authentication (if the user so chooses to enable it).", "issueId": "AMBARI-17129", "issueStringList": ["Set necessary HBase configuration to enable SPNEGO authentication if desired", "Over in HBASE-5291, I implemented support to enable SPNEGO authentication of the HBase web UIs.", "We should update the HBase configuration when Kerberos is enabled such that, if the user chooses to enable the SPNEGO auth, the principal and keytab information is already present in the configuration.", "If the SPNEGO auth is not enabled, then these properties won't affect anything if they are set.", ".001 Pre-emptive patch based on HBASE-5291.", "Still waiting on a review over there though.", "FYI, [~rlevas]", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12809303/AMBARI-17129.001.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 1 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.upgrade.UpgradeCatalog240Test", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/7284//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/7284//console", "This message is automatically generated.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12809321/AMBARI-17129.002.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 1 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.agent.TestHeartbeatHandler", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/7285//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/7285//console", "This message is automatically generated.", "Ok!", "HBASE-5291 is committed to the upstream branches.", "I think this is ready to be merged, [~rlevas].", "[~elserj]...", "I will start the process to commit it.", "[~elserj], Can you fix the merge issues?", "{noformat}", "error: patch failed: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java:361", "error: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java: patch does not apply", "error: patch failed: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog240Test.java:498", "error: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog240Test.java: patch does not apply", "{noformat}", "Please fix for the trunk and branch-2.4 since they may have diverged significantly by now.", "bq.", "Can you fix the merge issues?", "Sure thing.", "Will rebase and check both branches.", ".003 is just a rebase of .002.", "Applies cleanly to trunk and branch-2.4.", "[~elserj].... thanks... running unit tests now.", "Committed to trunk", "{noformat}", "commit 89870f28a204b782f5d25eb09e6e3c5bfa496acc", "Author: Josh Elser <jelser@hortonworks.com>", "Date:   Thu Jun 16 17:36:32 2016 -0400", "{noformat}", "Committed to branch-2.4", "{noformat}", "commit dbc865b4851fe1a75a2a1c843bd2d0220b1344ce", "Author: Josh Elser <jelser@hortonworks.com>", "Date:   Thu Jun 16 17:37:27 2016 -0400", "{noformat}", "FAILURE: Integrated in Ambari-trunk-Commit #5096 (See [https://builds.apache.org/job/Ambari-trunk-Commit/5096/])", "AMBARI-17129.", "Set necessary HBase configuration to enable SPNEGO (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=89870f28a204b782f5d25eb09e6e3c5bfa496acc])", "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog240Test.java", "ambari-server/src/main/resources/stacks/HDP/2.5/services/HBASE/kerberos.json", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java", "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/alerts.json"], "SplitGT": [" Update HBase Kerberos configurations.", "HBase needs to have new keytab and principal properties to enable SPNEGO authentication (if the user so chooses to enable it)."], "issueString": "Set necessary HBase configuration to enable SPNEGO authentication if desired\nOver in HBASE-5291, I implemented support to enable SPNEGO authentication of the HBase web UIs.\n\nWe should update the HBase configuration when Kerberos is enabled such that, if the user chooses to enable the SPNEGO auth, the principal and keytab information is already present in the configuration. If the SPNEGO auth is not enabled, then these properties won't affect anything if they are set.\n.001 Pre-emptive patch based on HBASE-5291. Still waiting on a review over there though.\n\nFYI, [~rlevas]\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12809303/AMBARI-17129.001.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.upgrade.UpgradeCatalog240Test\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/7284//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/7284//console\n\nThis message is automatically generated.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12809321/AMBARI-17129.002.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.agent.TestHeartbeatHandler\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/7285//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/7285//console\n\nThis message is automatically generated.\nOk! HBASE-5291 is committed to the upstream branches. I think this is ready to be merged, [~rlevas].\n[~elserj]... I will start the process to commit it. \n\n[~elserj], Can you fix the merge issues?\n\n{noformat}\nerror: patch failed: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java:361\nerror: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java: patch does not apply\nerror: patch failed: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog240Test.java:498\nerror: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog240Test.java: patch does not apply\n{noformat}\n\nPlease fix for the trunk and branch-2.4 since they may have diverged significantly by now. \n\nbq. Can you fix the merge issues?\n\nSure thing. Will rebase and check both branches.\n.003 is just a rebase of .002. Applies cleanly to trunk and branch-2.4.\n[~elserj].... thanks... running unit tests now. \n\nCommitted to trunk\n{noformat}\ncommit 89870f28a204b782f5d25eb09e6e3c5bfa496acc\nAuthor: Josh Elser <jelser@hortonworks.com>\nDate:   Thu Jun 16 17:36:32 2016 -0400\n{noformat}\n\nCommitted to branch-2.4\n{noformat}\ncommit dbc865b4851fe1a75a2a1c843bd2d0220b1344ce\nAuthor: Josh Elser <jelser@hortonworks.com>\nDate:   Thu Jun 16 17:37:27 2016 -0400\n{noformat}\n\nFAILURE: Integrated in Ambari-trunk-Commit #5096 (See [https://builds.apache.org/job/Ambari-trunk-Commit/5096/])\nAMBARI-17129. Set necessary HBase configuration to enable SPNEGO (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=89870f28a204b782f5d25eb09e6e3c5bfa496acc])\n* ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog240Test.java\n* ambari-server/src/main/resources/stacks/HDP/2.5/services/HBASE/kerberos.json\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java\n* ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/alerts.json\n\n", "issueSearchSentences": ["We should update the HBase configuration when Kerberos is enabled such that, if the user chooses to enable the SPNEGO auth, the principal and keytab information is already present in the configuration.", "org.apache.ambari.server.upgrade.UpgradeCatalog240Test", "Set necessary HBase configuration to enable SPNEGO (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=89870f28a204b782f5d25eb09e6e3c5bfa496acc])", "Set necessary HBase configuration to enable SPNEGO authentication if desired", "The patch failed these unit tests in ambari-server:"], "issueSearchScores": [0.543808102607727, 0.4768674969673157, 0.4731156826019287, 0.4690525233745575, 0.4616912603378296]}
{"aId": 6, "code": "private void validatePasswordProperties(BlueprintEntity blueprint, Map<String, HostGroup> hostGroups,\n                                          String defaultPassword) {\n\n    Map<String, Map<String, Collection<String>>> missingPasswords = blueprint.validateConfigurations(\n        stackInfo, PropertyInfo.PropertyType.PASSWORD);\n\n    Iterator<Map.Entry<String, Map<String, Collection<String>>>> iter;\n    for(iter = missingPasswords.entrySet().iterator(); iter.hasNext(); ) {\n      Map.Entry<String, Map<String, Collection<String>>> entry = iter.next();\n      Map<String, Collection<String>> missingProps = entry.getValue();\n      Iterator<Map.Entry<String, Collection<String>>> propIter;\n      for (propIter = missingProps.entrySet().iterator(); propIter.hasNext(); ) {\n        Map.Entry<String, Collection<String>> propEntry = propIter.next();\n        String configType = propEntry.getKey();\n        Collection<String> propertySet = propEntry.getValue();\n\n        for (String property : propertySet) {\n          if (setDefaultPassword(defaultPassword, configType, property)) {\n            propIter.remove();\n          } else if (isPropertyInConfiguration(mapClusterConfigurations.get(configType), property)){\n              propIter.remove();\n          } else {\n            HostGroup hostgroup = hostGroups.get(entry.getKey());\n            if (hostgroup != null) {\n              if (isPropertyInConfiguration(hostgroup.getConfigurations().get(configType), property)) {\n                propIter.remove();\n              }\n            }\n          }\n        }\n      }\n      if (entry.getValue().isEmpty()) {\n        iter.remove();\n      }\n    }\n\n    if (! missingPasswords.isEmpty()) {\n      throw new IllegalArgumentException(\"Missing required password properties.  Specify a value for these \" +\n          \"properties in the cluster or host group configurations or include 'default_password' field in request. \" +\n          missingPasswords);\n    }\n  }", "comment": " Validate that all required password properties have been set or that 'default_password' is specified.", "issueId": "AMBARI-5690", "issueStringList": ["Validate required fields including passwords for blueprint cluster creation", "For blueprint creation, validate all non-password required properties have been  set in the blueprint.", "For cluster creation via a blueprint, validate that all required password properties have been set in configuration or that a 'default_password' property has been included in the request.", "Password properties can be set in the blueprint cluster or host group configurations or as part of the cluster create call as either cluster or host group properties.", "Example with default password specified:", "{code}", "{", "\"blueprint\" : \"single-node-test\",", "\"default_password\" : \"admin\",", "\"host_groups\" :[", "{", "\"name\" : \"host_group_1\",", "\"hosts\" : [", "{", "\"fqdn\" : \"test.novalocal\"", "}", "]", "}", "]", "}", "{code}", "Example with password property specified during cluster creation as a cluster scoped property:", "{code}", "{", "\"blueprint\" : \"single-node-test\",", "\"configurations\" : [", "{", "\"core-site\" : {", "\"super.secret.property\" : \"password\"", "}", "}", "],", "\"host_groups\" :[", "{", "\"name\" : \"host_group_1\",", "\"hosts\" : [", "{", "\"fqdn\" : \"test.novalocal\"", "}", "]", "}", "]", "}", "{code}", "Example with password property specified during cluster creation as a host group scoped property:", "{code}", "{", "\"blueprint\" : \"single-node-test\",", "\"host_groups\" :[", "{", "\"name\" : \"host_group_1\",", "\"configurations\" : [", "{", "\"core-site\" : {", "\"super.secret.property\" : \"password\"", "}", "}", "],", "\"hosts\" : [", "{", "\"fqdn\" : \"test.novalocal\"", "}", "]", "}", "]", "}", "{code}", "Example error response:", "{code}", "{", "status: 400", "message: \"Missing required password properties.", "Specify a value for these properties in the cluster or host group configurations or specify a 'default_password'.", "{host_group_1={hive-site=[javax.jdo.option.ConnectionPassword]}}\"", "}", "{code}", "merged to trunk and branch-1.6.0"], "SplitGT": [" Validate that all required password properties have been set or that 'default_password' is specified."], "issueString": "Validate required fields including passwords for blueprint cluster creation\nFor blueprint creation, validate all non-password required properties have been  set in the blueprint.\n\nFor cluster creation via a blueprint, validate that all required password properties have been set in configuration or that a 'default_password' property has been included in the request.  Password properties can be set in the blueprint cluster or host group configurations or as part of the cluster create call as either cluster or host group properties.\n\n\nExample with default password specified:\n{code}\n{\n  \"blueprint\" : \"single-node-test\",\n  \"default_password\" : \"admin\",\n  \"host_groups\" :[\n    { \n      \"name\" : \"host_group_1\",  \n      \"hosts\" : [          \n        { \n          \"fqdn\" : \"test.novalocal\"\n        }\n      ]\n    }\n  ]\n}\n{code}\nExample with password property specified during cluster creation as a cluster scoped property:\n\n{code}\n{\n  \"blueprint\" : \"single-node-test\",\n  \"configurations\" : [\n    {\n      \"core-site\" : {\n        \"super.secret.property\" : \"password\"\n      }\n    }\n  ],\n  \"host_groups\" :[\n    {\n      \"name\" : \"host_group_1\",       \n      \"hosts\" : [         \n        {\n          \"fqdn\" : \"test.novalocal\"\n        }\n      ]\n    }\n  ]\n}\n{code}\nExample with password property specified during cluster creation as a host group scoped property:\n\n{code}\n{\n  \"blueprint\" : \"single-node-test\",  \n  \"host_groups\" :[\n    {\n      \"name\" : \"host_group_1\",   \n      \"configurations\" : [\n        {\n          \"core-site\" : {\n            \"super.secret.property\" : \"password\"\n          }\n        }\n      ],    \n      \"hosts\" : [         \n        {\n          \"fqdn\" : \"test.novalocal\"\n        }\n      ]\n    }\n  ]\n}\n{code}\nExample error response:\n\n{code}\n{\nstatus: 400\nmessage: \"Missing required password properties. Specify a value for these properties in the cluster or host group configurations or specify a 'default_password'. {host_group_1={hive-site=[javax.jdo.option.ConnectionPassword]}}\"\n}\n{code}\nmerged to trunk and branch-1.6.0\n", "issueSearchSentences": ["For cluster creation via a blueprint, validate that all required password properties have been set in configuration or that a 'default_password' property has been included in the request.", "For blueprint creation, validate all non-password required properties have been  set in the blueprint.", "Password properties can be set in the blueprint cluster or host group configurations or as part of the cluster create call as either cluster or host group properties.", "Validate required fields including passwords for blueprint cluster creation", "Example with password property specified during cluster creation as a host group scoped property:"], "issueSearchScores": [0.7582824230194092, 0.7478270530700684, 0.7162567377090454, 0.6351457238197327, 0.5735417008399963]}
{"aId": 7, "code": "public String getBuild() {\n    return build;\n  }", "comment": " Get the view build number.", "issueId": "AMBARI-11814", "issueStringList": ["Views : Update view.xml xsd to allow for optional build-number", "The view.xml xsd should allow view.xml to optionally contain <build> for the view build number.", "The build number should also be exposed through the REST API when introspecting a view or view instance.", "SUCCESS: Integrated in Ambari-trunk-Commit #2868 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2868/])", "AMBARI-11814 - Views : Update view.xml xsd to allow for optional build-number (tbeerbower) (tbeerbower: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=5240ca45e65a01f4006226aee9a4f6b4e95f9e8d)", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java", "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql", "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql", "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql", "ambari-views/examples/phone-list-view/src/main/resources/view.xml", "ambari-server/src/test/java/org/apache/ambari/server/orm/entities/ViewEntityTest.java", "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java", "ambari-views/src/main/java/org/apache/ambari/view/ViewDefinition.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewVersionResourceProvider.java", "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql", "ambari-server/src/test/java/org/apache/ambari/server/view/configuration/ViewConfigTest.java", "ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewEntity.java", "ambari-views/src/main/resources/view.xsd", "ambari-server/src/main/java/org/apache/ambari/server/view/configuration/ViewConfig.java"], "SplitGT": [" Get the view build number."], "issueString": "Views : Update view.xml xsd to allow for optional build-number\nThe view.xml xsd should allow view.xml to optionally contain <build> for the view build number.\n\nThe build number should also be exposed through the REST API when introspecting a view or view instance.\nSUCCESS: Integrated in Ambari-trunk-Commit #2868 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2868/])\nAMBARI-11814 - Views : Update view.xml xsd to allow for optional build-number (tbeerbower) (tbeerbower: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=5240ca45e65a01f4006226aee9a4f6b4e95f9e8d)\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java\n* ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql\n* ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql\n* ambari-views/examples/phone-list-view/src/main/resources/view.xml\n* ambari-server/src/test/java/org/apache/ambari/server/orm/entities/ViewEntityTest.java\n* ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java\n* ambari-views/src/main/java/org/apache/ambari/view/ViewDefinition.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewVersionResourceProvider.java\n* ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql\n* ambari-server/src/test/java/org/apache/ambari/server/view/configuration/ViewConfigTest.java\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewEntity.java\n* ambari-views/src/main/resources/view.xsd\n* ambari-server/src/main/java/org/apache/ambari/server/view/configuration/ViewConfig.java\n\n", "issueSearchSentences": ["The build number should also be exposed through the REST API when introspecting a view or view instance.", "The view.xml xsd should allow view.xml to optionally contain <build> for the view build number.", "SUCCESS: Integrated in Ambari-trunk-Commit #2868 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2868/])", "AMBARI-11814 - Views : Update view.xml xsd to allow for optional build-number (tbeerbower) (tbeerbower: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=5240ca45e65a01f4006226aee9a4f6b4e95f9e8d)", "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java"], "issueSearchScores": [0.4573534429073334, 0.43135833740234375, 0.33347922563552856, 0.2382529079914093, 0.21936379373073578]}
{"aId": 9, "code": "@Transactional\n  private Long populateHostsId(ResultSet resultSet) throws SQLException {\n    Long hostId = 0L;\n    if (resultSet != null) {\n      try {\n        while (resultSet.next()) {\n          final String hostName = resultSet.getString(1);\n          HostEntity host = hostDAO.findByName(hostName);\n          host.setId(++hostId);\n          hostDAO.merge(host);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Unable to populate the id of the hosts. \" + e.getMessage());\n      }\n    }\n    return hostId;\n  }", "comment": " Populate the id of the hosts table with an auto-increment int.", "issueId": "AMBARI-10190", "issueStringList": ["Full Delete of Host : Add host_id column to clusterhostmapping, and create initial UpgradeCatalog210", "Add the column id to the hosts table, and populate it with auto-increment values", "Temporarily remove and recreate all FKs to the host_name column, in order to change the PK of the hosts table from the host_name to the id column", "Add the column host_id to the clusterhostmapping table and populate it", "Drop the host_name column from the clusterhostmapping table", "Create the initial UpgradeCatalog210.java file and unit test", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12706804/AMBARI-10190.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 2 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The test build failed in ambari-server", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/2120//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/2120//console", "This message is automatically generated.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12707044/AMBARI-10190.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 3 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The test build failed in ambari-server", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/2125//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/2125//console", "This message is automatically generated.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12707047/AMBARI-10190.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 3 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The test build failed in ambari-server", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/2128//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/2128//console", "This message is automatically generated.", "Unit test timed out and was killed by BAO.", "Local unit tests passed.", "Pushed to trunk in commit f73936a281896b82e89a64399f712d0e17142637", "ABORTED: Integrated in Ambari-trunk-Commit #2107 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2107/])", "AMBARI-10190.", "Full Delete of Host : Add host_id column to clusterhostmapping, and create initial UpgradeCatalog210 (alejandro) (afernandez: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f73936a281896b82e89a64399f712d0e17142637)", "ambari-server/src/test/java/org/apache/ambari/server/state/alerts/AlertReceivedListenerTest.java", "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java", "ambari-server/src/main/java/org/apache/ambari/server/state/Alert.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java", "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql", "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql", "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java", "ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaPredicateVisitor.java", "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql", "ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java", "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java"], "SplitGT": [" Populate the id of the hosts table with an auto-increment int."], "issueString": "Full Delete of Host : Add host_id column to clusterhostmapping, and create initial UpgradeCatalog210\n* Add the column id to the hosts table, and populate it with auto-increment values\n* Temporarily remove and recreate all FKs to the host_name column, in order to change the PK of the hosts table from the host_name to the id column\n* Add the column host_id to the clusterhostmapping table and populate it\n* Drop the host_name column from the clusterhostmapping table\n* Create the initial UpgradeCatalog210.java file and unit test\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12706804/AMBARI-10190.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The test build failed in ambari-server \n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/2120//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/2120//console\n\nThis message is automatically generated.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12707044/AMBARI-10190.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The test build failed in ambari-server \n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/2125//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/2125//console\n\nThis message is automatically generated.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12707047/AMBARI-10190.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The test build failed in ambari-server \n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/2128//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/2128//console\n\nThis message is automatically generated.\nUnit test timed out and was killed by BAO. Local unit tests passed.\nPushed to trunk in commit f73936a281896b82e89a64399f712d0e17142637\nABORTED: Integrated in Ambari-trunk-Commit #2107 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2107/])\nAMBARI-10190. Full Delete of Host : Add host_id column to clusterhostmapping, and create initial UpgradeCatalog210 (alejandro) (afernandez: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f73936a281896b82e89a64399f712d0e17142637)\n* ambari-server/src/test/java/org/apache/ambari/server/state/alerts/AlertReceivedListenerTest.java\n* ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java\n* ambari-server/src/main/java/org/apache/ambari/server/state/Alert.java\n* ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java\n* ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql\n* ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql\n* ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaPredicateVisitor.java\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql\n* ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java\n* ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java\n* ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java\n* ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java\n\n", "issueSearchSentences": ["Add the column host_id to the clusterhostmapping table and populate it", "Temporarily remove and recreate all FKs to the host_name column, in order to change the PK of the hosts table from the host_name to the id column", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java", "Full Delete of Host : Add host_id column to clusterhostmapping, and create initial UpgradeCatalog210", "Full Delete of Host : Add host_id column to clusterhostmapping, and create initial UpgradeCatalog210 (alejandro) (afernandez: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f73936a281896b82e89a64399f712d0e17142637)"], "issueSearchScores": [0.5648255348205566, 0.5564071536064148, 0.5504311323165894, 0.4972788989543915, 0.4965006411075592]}
{"aId": 10, "code": "@Override\n  public void publish(List<SingleMetric> metrics) {\n\n    //If Sink not yet initialized, drop the metrics on the floor.\n    if (isInitialized) {\n      List<TimelineMetric> metricList = getFilteredMetricList(metrics);\n      if (!metricList.isEmpty()) {\n        TimelineMetrics timelineMetrics = new TimelineMetrics();\n        timelineMetrics.setMetrics(metricList);\n        emitMetrics(timelineMetrics);\n      }\n    }\n  }", "comment": " Publish metrics to AMS.", "issueId": "AMBARI-17596", "issueStringList": ["Collect & Publish AmbariServer database metrics", "Implement the collection APIs to get the defined metrics from Ambari Server and use the Ambari-Server metrics Sink to publish metrics to AMS.", "Attached patch with initial work for Database Metrics source done by [~ltseng].", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12846078/AMBARI-17596.patch", "against trunk revision .", "{color:red}-1 patch{color}.", "The patch command could not apply the patch.", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/9947//console", "This message is automatically generated.", "Pushed to branch-2.5 and trunk.", "SUCCESS: Integrated in Jenkins build Ambari-trunk-Commit #6391 (See [https://builds.apache.org/job/Ambari-trunk-Commit/6391/])", "AMBARI-17596 : Collect & Publish AmbariServer database metrics.", "(avijayan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=7ca559ccf12dacb1ee053e537868b915ba880647])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariMetricSinkImpl.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsConfiguration.java", "(edit) ambari-server/conf/windows/metrics.properties", "(edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/TestMetricsSource.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/MetricsSource.java", "(add) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariPerformanceMonitor.java", "(add) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/DatabaseMetricsSource.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AbstractMetricsSource.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsServiceTest.java", "(edit) ambari-server/conf/unix/metrics.properties", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsServiceImpl.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/MetricsService.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/JvmMetricsSource.java", "(delete) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/JvmMetricsSourceTest.java", "(edit) ambari-server/src/test/resources/metrics.properties", "(edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/TestAmbariMetricsSinkImpl.java", "(add) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsSourceTest.java", "ABORTED: Integrated in Jenkins build Ambari-branch-2.5 #669 (See [https://builds.apache.org/job/Ambari-branch-2.5/669/])", "AMBARI-17596 : Collect & Publish AmbariServer database metrics.", "(avijayan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=ec8809cea9f175ac8604eb7e3be817150e5fd47a])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AbstractMetricsSource.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/JvmMetricsSource.java", "(delete) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/JvmMetricsSourceTest.java", "(edit) ambari-server/conf/unix/metrics.properties", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsConfiguration.java", "(add) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariPerformanceMonitor.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsServiceTest.java", "(add) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/DatabaseMetricsSource.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsServiceImpl.java", "(add) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsSourceTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/TestAmbariMetricsSinkImpl.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/MetricsService.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/MetricsSource.java", "(edit) ambari-server/src/test/resources/metrics.properties", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariMetricSinkImpl.java", "(edit) ambari-server/conf/windows/metrics.properties", "(edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/TestMetricsSource.java", "FAILURE: Integrated in Jenkins build Ambari-branch-2.5 #670 (See [https://builds.apache.org/job/Ambari-branch-2.5/670/])", "AMBARI-17596 : Collect & Publish AmbariServer database metrics.", "(Fix (avijayan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=a6d858add4d6aea657f1494a9b6118c3f2fcb4c2])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/DatabaseMetricsSource.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsSourceTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariPerformanceMonitor.java"], "SplitGT": [" Publish metrics to AMS."], "issueString": "Collect & Publish AmbariServer database metrics\nImplement the collection APIs to get the defined metrics from Ambari Server and use the Ambari-Server metrics Sink to publish metrics to AMS.\nAttached patch with initial work for Database Metrics source done by [~ltseng]. \n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12846078/AMBARI-17596.patch\n  against trunk revision .\n\n    {color:red}-1 patch{color}.  The patch command could not apply the patch.\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/9947//console\n\nThis message is automatically generated.\nPushed to branch-2.5 and trunk.\nSUCCESS: Integrated in Jenkins build Ambari-trunk-Commit #6391 (See [https://builds.apache.org/job/Ambari-trunk-Commit/6391/])\nAMBARI-17596 : Collect & Publish AmbariServer database metrics. (avijayan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=7ca559ccf12dacb1ee053e537868b915ba880647])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariMetricSinkImpl.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsConfiguration.java\n* (edit) ambari-server/conf/windows/metrics.properties\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/TestMetricsSource.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/MetricsSource.java\n* (add) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariPerformanceMonitor.java\n* (add) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/DatabaseMetricsSource.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AbstractMetricsSource.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsServiceTest.java\n* (edit) ambari-server/conf/unix/metrics.properties\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsServiceImpl.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/MetricsService.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/JvmMetricsSource.java\n* (delete) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/JvmMetricsSourceTest.java\n* (edit) ambari-server/src/test/resources/metrics.properties\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/TestAmbariMetricsSinkImpl.java\n* (add) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsSourceTest.java\n\nABORTED: Integrated in Jenkins build Ambari-branch-2.5 #669 (See [https://builds.apache.org/job/Ambari-branch-2.5/669/])\nAMBARI-17596 : Collect & Publish AmbariServer database metrics. (avijayan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=ec8809cea9f175ac8604eb7e3be817150e5fd47a])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AbstractMetricsSource.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/JvmMetricsSource.java\n* (delete) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/JvmMetricsSourceTest.java\n* (edit) ambari-server/conf/unix/metrics.properties\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsConfiguration.java\n* (add) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariPerformanceMonitor.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsServiceTest.java\n* (add) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/DatabaseMetricsSource.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsServiceImpl.java\n* (add) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsSourceTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/TestAmbariMetricsSinkImpl.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/MetricsService.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/MetricsSource.java\n* (edit) ambari-server/src/test/resources/metrics.properties\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariMetricSinkImpl.java\n* (edit) ambari-server/conf/windows/metrics.properties\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/TestMetricsSource.java\n\nFAILURE: Integrated in Jenkins build Ambari-branch-2.5 #670 (See [https://builds.apache.org/job/Ambari-branch-2.5/670/])\nAMBARI-17596 : Collect & Publish AmbariServer database metrics. (Fix (avijayan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=a6d858add4d6aea657f1494a9b6118c3f2fcb4c2])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/DatabaseMetricsSource.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsSourceTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/AmbariPerformanceMonitor.java\n\n", "issueSearchSentences": ["Implement the collection APIs to get the defined metrics from Ambari Server and use the Ambari-Server metrics Sink to publish metrics to AMS.", "(edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsServiceTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsServiceTest.java", "(add) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsSourceTest.java", "(add) ambari-server/src/test/java/org/apache/ambari/server/metric/system/impl/MetricsSourceTest.java"], "issueSearchScores": [0.5707358121871948, 0.5426661968231201, 0.5426661968231201, 0.5381045341491699, 0.5381045341491699]}
{"aId": 11, "code": "private boolean checkMetricStore() {\n    final long startTime = System.currentTimeMillis();\n    final int delay = configuration.getTimelineMetricsServiceWatcherDelay();\n    final int timeout = configuration.getTimelineMetricsServiceWatcherTimeout();\n\n    TimelineMetric fakeMetric = new TimelineMetric();\n    fakeMetric.setMetricName(FAKE_METRIC_NAME);\n    fakeMetric.setHostName(FAKE_HOSTNAME);\n    fakeMetric.setAppId(FAKE_APP_ID);\n    fakeMetric.setStartTime(startTime);\n    fakeMetric.setTimestamp(startTime);\n    fakeMetric.getMetricValues().put(startTime, 0.0);\n\n    final TimelineMetrics metrics = new TimelineMetrics();\n    metrics.setMetrics(Collections.singletonList(fakeMetric));\n\n    Callable<TimelineMetric> task = new Callable<TimelineMetric>() {\n      public TimelineMetric call() throws Exception {\n        timelineMetricStore.putMetrics(metrics);\n        return timelineMetricStore.getTimelineMetric(\n          FAKE_METRIC_NAME, Collections.singletonList(FAKE_HOSTNAME),\n          FAKE_APP_ID, null, startTime - delay * 2 * 1000,\n          startTime + delay * 2 * 1000, Precision.SECONDS, 1);\n      }\n    };\n\n    Future<TimelineMetric> future = executor.submit(task);\n    TimelineMetric timelineMetric = null;\n    try {\n      timelineMetric = future.get(timeout, TimeUnit.SECONDS);\n    // Phoenix might throw RuntimeExeption's\n    } catch (Exception e) {\n      return false;\n    } finally {\n      future.cancel(true);\n    }\n\n    return timelineMetric != null;\n  }", "comment": " Checks TimelineMetricStore functionality by adding and getting a fake metric to/from HBase", "issueId": "AMBARI-13862", "issueStringList": ["Check status of RS process for AMS in embedded mode", "TimelineMetricStoreWatcher added, it checks TimelineMetricStore functionality by adding and getting a fake metric to/from HBase.", "if adding/getting metric fails 3 times in a row, AHS process shuts down with", "{code}", "2015-11-12 15:22:10,142 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.aggregators.v2.TimelineMetricClusterAggregator: End aggregation cycle @ Thu Nov 12 15:22:10 UTC 2015", "2015-11-12 15:22:10,141 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.aggregators.TimelineMetricClusterAggregatorSecond: Aggregator execution took too long, cancelling sleep.", "executionTime = 138539", "2015-11-12 15:22:10,144 WARN org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.aggregators.TimelineMetricClusterAggregatorSecond: Last Checkpoint is too old, discarding last checkpoint.", "lastCheckPointTime = Thu Nov 12 15:16:51 UTC 2015", "2015-11-12 15:22:10,144 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.aggregators.TimelineMetricClusterAggregatorSecond: Saving checkpoint time on first run.", "Thu Nov 12 15:21:10 UTC 2015", "2015-11-12 15:22:13,700 INFO org.apache.hadoop.metrics2.impl.MetricsSystemImpl: Stopping phoenix metrics system...", "2015-11-12 15:22:13,708 INFO org.apache.hadoop.metrics2.impl.MetricsSystemImpl: phoenix metrics system stopped.", "2015-11-12 15:22:13,709 INFO org.apache.hadoop.metrics2.impl.MetricsSystemImpl: phoenix metrics system shutdown complete.", "2015-11-12 15:22:13,709 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryManagerImpl: Stopping ApplicationHistory", "2015-11-12 15:22:13,710 INFO org.apache.hadoop.ipc.Server: Stopping server on 60200", "2015-11-12 15:22:13,716 INFO org.apache.hadoop.ipc.Server: Stopping IPC Server listener on 60200", "2015-11-12 15:22:13,718 INFO org.apache.hadoop.ipc.Server: Stopping IPC Server Responder", "2015-11-12 15:22:13,720 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer: SHUTDOWN_MSG:", "SHUTDOWN_MSG: Shutting down ApplicationHistoryServer at c6404.ambari.apache.org/192.168.64.104", "{code}", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12771999/AMBARI-13862.patch", "against trunk revision .", "{color:red}-1 patch{color}.", "Top-level trunk compilation may be broken.", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/4274//console", "This message is automatically generated.", "Committed to trunk and branch-2.1", "FAILURE: Integrated in Ambari-trunk-Commit #3832 (See [https://builds.apache.org/job/Ambari-trunk-Commit/3832/])", "AMBARI-13862 Check status of RS process for AMS in embedded mode (dsen) (dsen: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=9319c67f94a7e61ba4da0cf52a92a3b72ea0cb2a])", "ambari-metrics/ambari-metrics-timelineservice/conf/unix/ambari-metrics-collector", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcher.java", "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-site.xml", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricConfiguration.java", "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcherTest.java", "ABORTED: Integrated in Ambari-branch-2.1 #857 (See [https://builds.apache.org/job/Ambari-branch-2.1/857/])", "AMBARI-13862 Check status of RS process for AMS in embedded mode (dsen) (dsen: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f469d930324ea6e328760bd9be9e3e54452e4ec9])", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java", "ambari-metrics/ambari-metrics-timelineservice/conf/unix/ambari-metrics-collector", "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcherTest.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcher.java", "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-site.xml", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricConfiguration.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java"], "SplitGT": [" Checks TimelineMetricStore functionality by adding and getting a fake metric to/from HBase"], "issueString": "Check status of RS process for AMS in embedded mode\nTimelineMetricStoreWatcher added, it checks TimelineMetricStore functionality by adding and getting a fake metric to/from HBase.\n\nif adding/getting metric fails 3 times in a row, AHS process shuts down with\n{code}\n2015-11-12 15:22:10,142 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.aggregators.v2.TimelineMetricClusterAggregator: End aggregation cycle @ Thu Nov 12 15:22:10 UTC 2015\n2015-11-12 15:22:10,141 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.aggregators.TimelineMetricClusterAggregatorSecond: Aggregator execution took too long, cancelling sleep. executionTime = 138539\n2015-11-12 15:22:10,144 WARN org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.aggregators.TimelineMetricClusterAggregatorSecond: Last Checkpoint is too old, discarding last checkpoint. lastCheckPointTime = Thu Nov 12 15:16:51 UTC 2015\n2015-11-12 15:22:10,144 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.aggregators.TimelineMetricClusterAggregatorSecond: Saving checkpoint time on first run. Thu Nov 12 15:21:10 UTC 2015\n2015-11-12 15:22:13,700 INFO org.apache.hadoop.metrics2.impl.MetricsSystemImpl: Stopping phoenix metrics system...\n2015-11-12 15:22:13,708 INFO org.apache.hadoop.metrics2.impl.MetricsSystemImpl: phoenix metrics system stopped.\n2015-11-12 15:22:13,709 INFO org.apache.hadoop.metrics2.impl.MetricsSystemImpl: phoenix metrics system shutdown complete.\n2015-11-12 15:22:13,709 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryManagerImpl: Stopping ApplicationHistory\n2015-11-12 15:22:13,710 INFO org.apache.hadoop.ipc.Server: Stopping server on 60200\n2015-11-12 15:22:13,716 INFO org.apache.hadoop.ipc.Server: Stopping IPC Server listener on 60200\n2015-11-12 15:22:13,718 INFO org.apache.hadoop.ipc.Server: Stopping IPC Server Responder\n2015-11-12 15:22:13,720 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer: SHUTDOWN_MSG: \n/************************************************************\nSHUTDOWN_MSG: Shutting down ApplicationHistoryServer at c6404.ambari.apache.org/192.168.64.104\n************************************************************/\n{code}\n\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12771999/AMBARI-13862.patch\n  against trunk revision .\n\n    {color:red}-1 patch{color}.  Top-level trunk compilation may be broken.\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/4274//console\n\nThis message is automatically generated.\nCommitted to trunk and branch-2.1\nFAILURE: Integrated in Ambari-trunk-Commit #3832 (See [https://builds.apache.org/job/Ambari-trunk-Commit/3832/])\nAMBARI-13862 Check status of RS process for AMS in embedded mode (dsen) (dsen: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=9319c67f94a7e61ba4da0cf52a92a3b72ea0cb2a])\n* ambari-metrics/ambari-metrics-timelineservice/conf/unix/ambari-metrics-collector\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcher.java\n* ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-site.xml\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricConfiguration.java\n* ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcherTest.java\n\nABORTED: Integrated in Ambari-branch-2.1 #857 (See [https://builds.apache.org/job/Ambari-branch-2.1/857/])\nAMBARI-13862 Check status of RS process for AMS in embedded mode (dsen) (dsen: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f469d930324ea6e328760bd9be9e3e54452e4ec9])\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java\n* ambari-metrics/ambari-metrics-timelineservice/conf/unix/ambari-metrics-collector\n* ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcherTest.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcher.java\n* ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-site.xml\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricConfiguration.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java\n\n", "issueSearchSentences": ["TimelineMetricStoreWatcher added, it checks TimelineMetricStore functionality by adding and getting a fake metric to/from HBase.", "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcherTest.java", "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcherTest.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcher.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricStoreWatcher.java"], "issueSearchScores": [0.7397310137748718, 0.6846092939376831, 0.6846092939376831, 0.673147439956665, 0.673147439956665]}
{"aId": 12, "code": "@ApiModelProperty(name = \"sso_integration_enabled\")\n  public boolean isSsoIntegrationEnabled() {\n    return ssoIntegrationEnabled;\n  }", "comment": " Indicates whether the service is configured for SSO integration or not", "issueId": "AMBARI-23289", "issueStringList": ["Add SSO integration support information to service information via Ambari's REST API", "Add SSO integration support information to service information via Ambari's REST API.", "This information should be usable by Ambari's search predicate feature.", "New _read-only_ properties for (stack) services should be:", "*{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not", "Information is expected to be determined by service's meta info (see BUG-98626)", "New _read-only_ properties for installed services should be:", "*{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not", "Information is expected to be determined by the service's meta info (see BUG-98626)", "*{{sso_integration_enabled}}* - Indicates whether the service is configured for SSO integration or not", "Information is expected to be determined by a value indicated in the service's meta info (see BUG-98626)", "*{{sso_integration_desired}}* - Indicates whether the service is chosen for SSO integration or not", "Information is expected to be in {{cluster-env/sso_enabled_services}} (see BUG-98451)", "Examples:", "{noformat:title=Get stack service details}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",", "{", "\"href\" : \":URL\",", "\"StackServices\" : {", "...", "\"sso_integration_supported\": \"false\",", "...", "},", "...", "{noformat}", "{noformat:title=Get installed service information}", "GET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME", "{", "\"href\" : \":URL\",", "\"ServiceInfo\" : {", "\"cluster_name\" : \":CLUSTER_NAME\",", "...", "\"sso_integration_supported\": \"true\",", "\"sso_integration_enabled\": \"false\",", "\"sso_integration_desired\": \"false\",", "...", "},", "...", "{noformat}", "{noformat:title=List installed services that support SSO integration}", "GET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}", "{noformat}", "{noformat:title=List stack services that support SSO integration}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/credential_store_enabled=false", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}", "{noformat}", "SUCCESS: Integrated in Jenkins build Ambari-trunk-Commit #8906 (See [https://builds.apache.org/job/Ambari-trunk-Commit/8906/])", "AMBARI-23289.", "Add SSO integration support information to service (m.magyar3: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=a8c2d0de1b17ae5804e1819e1b7c94e560930a00])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandler.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java", "(add) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandlerTest.java"], "SplitGT": [" Indicates whether the service is configured for SSO integration or not"], "issueString": "Add SSO integration support information to service information via Ambari's REST API\nAdd SSO integration support information to service information via Ambari's REST API.  This information should be usable by Ambari's search predicate feature.\r\n\r\nNew _read-only_ properties for (stack) services should be:\r\n* *{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not\r\n** Information is expected to be determined by service's meta info (see BUG-98626)\r\n\r\nNew _read-only_ properties for installed services should be:\r\n* *{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not\r\n** Information is expected to be determined by the service's meta info (see BUG-98626)\r\n* *{{sso_integration_enabled}}* - Indicates whether the service is configured for SSO integration or not\r\n** Information is expected to be determined by a value indicated in the service's meta info (see BUG-98626)\r\n* *{{sso_integration_desired}}* - Indicates whether the service is chosen for SSO integration or not\r\n** Information is expected to be in {{cluster-env/sso_enabled_services}} (see BUG-98451)\r\n\r\nExamples:\r\n{noformat:title=Get stack service details}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",\r\n{\r\n  \"href\" : \":URL\",\r\n  \"StackServices\" : {\r\n     ...\r\n     \"sso_integration_supported\": \"false\",\r\n     ...\r\n  },\r\n  ...\r\n{noformat}\r\n\r\n{noformat:title=Get installed service information}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME\r\n{\r\n  \"href\" : \":URL\",\r\n  \"ServiceInfo\" : {\r\n    \"cluster_name\" : \":CLUSTER_NAME\",\r\n    ...\r\n    \"sso_integration_supported\": \"true\",\r\n    \"sso_integration_enabled\": \"false\",\r\n    \"sso_integration_desired\": \"false\",\r\n     ...\r\n    },\r\n    ...\r\n{noformat}\r\n\r\n{noformat:title=List installed services that support SSO integration}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}\r\n{noformat}\r\n\r\n{noformat:title=List stack services that support SSO integration}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/credential_store_enabled=false\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}\r\n{noformat}\r\n\r\n\nSUCCESS: Integrated in Jenkins build Ambari-trunk-Commit #8906 (See [https://builds.apache.org/job/Ambari-trunk-Commit/8906/])\nAMBARI-23289. Add SSO integration support information to service (m.magyar3: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=a8c2d0de1b17ae5804e1819e1b7c94e560930a00])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandler.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java\n* (add) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandlerTest.java\n\n", "issueSearchSentences": ["*{{sso_integration_enabled}}* - Indicates whether the service is configured for SSO integration or not", "*{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not", "*{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not", "\"sso_integration_enabled\": \"false\",", "\"sso_integration_supported\": \"true\","], "issueSearchScores": [0.765794038772583, 0.7528413534164429, 0.7528413534164429, 0.7436814904212952, 0.7423849701881409]}
{"aId": 14, "code": "private AlertFirmness calculateFirmnessForStateChange(AlertDefinitionEntity definition,\n      AlertState state, long occurrences) {\n    if (state == AlertState.OK) {\n      return AlertFirmness.HARD;\n    }\n\n    if (definition.getSourceType() == SourceType.AGGREGATE) {\n      return AlertFirmness.HARD;\n    }\n\n    if (definition.getRepeatTolerance() <= 1) {\n      return AlertFirmness.HARD;\n    }\n\n    if (definition.getRepeatTolerance() <= occurrences) {\n      return AlertFirmness.HARD;\n    }\n\n    return AlertFirmness.SOFT;\n  }", "comment": " If an alert is SourceType#AGGREGATE, then the firmness is always AlertFirmness#HARD. Otherwise, the firmness will be AlertFirmness#SOFT unless therepeat tolerance has been met.", "issueId": "AMBARI-15686", "issueStringList": ["Alert Dispatch Scheduling Changes to Support Repeat Tolerance", "When an alert state change is received, its notification will no longer be queued for immediate delivery if the firmness of the alert is SOFT.", "Instead, notifications will only be created and queued for delivery if the alert firmness is HARD in order to prevent false positives on alerts which have repeat tolerance enabled.", "Changes Included in this task:", "Database changes to support HARD/SOFT states to complement repeat occurrence values", "{code}", "CREATE TABLE alert_current (", "...", "occurrences BIGINT NOT NULL DEFAULT 1,", "firmness VARCHAR(255) NOT NULL DEFAULT 'HARD',", "...", ");", "{code}", "Changes to eventing system to handle alert state changes difference depending on whether the alerts are HARD/SOFT", "HARD/SOFT Calculations", "If an alert is {{AlertState#OK}}, then the firmness is always {{AlertFirmness#HARD}}", "If an alert is {{link SourceType#AGGREGATE}}, then the firmness is always {{link AlertFirmness#HARD}}.", "Otherwise, the firmness will be {@link AlertFirmness#SOFT} unless the repeat tolerance has been met.", "Exposure of HARD/SOFT alert states", "{code}", "GET api/v1/clusters/c1/alerts/1", "{", "\"href\": \"http://localhost:8080/api/v1/clusters/c1/alerts/1\",", "\"Alert\": {", "\"cluster_name\": \"c1\",", "...", "\"repeat_tolerance\": 1,", "\"repeat_tolerance_remaining\": 0,", "\"occurrences\": 8,", "\"firmness\": \"HARD\"", "....", "{code}", "FAILURE: Integrated in Ambari-trunk-Commit #4592 (See [https://builds.apache.org/job/Ambari-trunk-Commit/4592/])", "AMBARI-15686 - Alert Dispatch Scheduling Changes to Support Repeat (jhurley: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=18449b5b804790c15f0917ccb43b9a8be4bd5ca1])", "ambari-server/src/main/java/org/apache/ambari/server/events/AlertStateChangeEvent.java", "ambari-server/src/test/java/org/apache/ambari/server/state/alerts/AggregateAlertListenerTest.java", "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java", "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertAggregateListener.java", "ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql", "ambari-server/src/test/java/org/apache/ambari/server/state/alerts/InitialAlertEventTest.java", "ambari-server/src/test/java/org/apache/ambari/server/state/alerts/AlertReceivedListenerTest.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertResourceProvider.java", "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/state/Alert.java", "ambari-server/src/test/java/org/apache/ambari/server/state/alerts/AlertStateChangedEventTest.java", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java", "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql", "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog240Test.java", "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertStateChangedListener.java", "ambari-server/src/main/java/org/apache/ambari/server/state/AlertFirmness.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertCurrentEntity.java", "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql", "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql"], "SplitGT": [" If an alert is SourceType#AGGREGATE, then the firmness is always AlertFirmness#HARD.", "Otherwise, the firmness will be AlertFirmness#SOFT unless therepeat tolerance has been met."], "issueString": "Alert Dispatch Scheduling Changes to Support Repeat Tolerance\nWhen an alert state change is received, its notification will no longer be queued for immediate delivery if the firmness of the alert is SOFT. Instead, notifications will only be created and queued for delivery if the alert firmness is HARD in order to prevent false positives on alerts which have repeat tolerance enabled. \n\nChanges Included in this task:\n- Database changes to support HARD/SOFT states to complement repeat occurrence values\n{code}\nCREATE TABLE alert_current (\n  ...\n  occurrences BIGINT NOT NULL DEFAULT 1,\n  firmness VARCHAR(255) NOT NULL DEFAULT 'HARD',\n  ...\n);\n{code}\n\n- Changes to eventing system to handle alert state changes difference depending on whether the alerts are HARD/SOFT\n- HARD/SOFT Calculations\n-- If an alert is {{AlertState#OK}}, then the firmness is always {{AlertFirmness#HARD}}\n-- If an alert is {{link SourceType#AGGREGATE}}, then the firmness is always {{link AlertFirmness#HARD}}.\n-- Otherwise, the firmness will be {@link AlertFirmness#SOFT} unless the repeat tolerance has been met.\n\n- Exposure of HARD/SOFT alert states\n{code}\nGET api/v1/clusters/c1/alerts/1\n{\n  \"href\": \"http://localhost:8080/api/v1/clusters/c1/alerts/1\",\n  \"Alert\": {\n    \"cluster_name\": \"c1\",\n    ...\n    \"repeat_tolerance\": 1,\n    \"repeat_tolerance_remaining\": 0,\n    \"occurrences\": 8,\n    \"firmness\": \"HARD\"\n    ....\n{code}\nFAILURE: Integrated in Ambari-trunk-Commit #4592 (See [https://builds.apache.org/job/Ambari-trunk-Commit/4592/])\nAMBARI-15686 - Alert Dispatch Scheduling Changes to Support Repeat (jhurley: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=18449b5b804790c15f0917ccb43b9a8be4bd5ca1])\n* ambari-server/src/main/java/org/apache/ambari/server/events/AlertStateChangeEvent.java\n* ambari-server/src/test/java/org/apache/ambari/server/state/alerts/AggregateAlertListenerTest.java\n* ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java\n* ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertAggregateListener.java\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql\n* ambari-server/src/test/java/org/apache/ambari/server/state/alerts/InitialAlertEventTest.java\n* ambari-server/src/test/java/org/apache/ambari/server/state/alerts/AlertReceivedListenerTest.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertResourceProvider.java\n* ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/state/Alert.java\n* ambari-server/src/test/java/org/apache/ambari/server/state/alerts/AlertStateChangedEventTest.java\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog240.java\n* ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql\n* ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog240Test.java\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertStateChangedListener.java\n* ambari-server/src/main/java/org/apache/ambari/server/state/AlertFirmness.java\n* ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertCurrentEntity.java\n* ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql\n* ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql\n\n", "issueSearchSentences": ["If an alert is {{AlertState#OK}}, then the firmness is always {{AlertFirmness#HARD}}", "Changes to eventing system to handle alert state changes difference depending on whether the alerts are HARD/SOFT", "ambari-server/src/main/java/org/apache/ambari/server/state/AlertFirmness.java", "When an alert state change is received, its notification will no longer be queued for immediate delivery if the firmness of the alert is SOFT.", "Otherwise, the firmness will be {@link AlertFirmness#SOFT} unless the repeat tolerance has been met."], "issueSearchScores": [0.6989859938621521, 0.6707870960235596, 0.6583148241043091, 0.6348956823348999, 0.6094222068786621]}
{"aId": 15, "code": "public boolean isSkipBlockCacheForAggregatorsEnabled() {\n    return skipBlockCacheForAggregatorsEnabled;\n  }", "comment": " Provide skip block cache hint for aggregator queries.", "issueId": "AMBARI-14598", "issueStringList": ["Provide ability to skip block cache on aggregator queries", "AMS block cache utilization for metrics data can be optimized with respect to user queries vs aggregators to free up block cache usage.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12781360/AMBARI-14598.patch", "against trunk revision .", "{color:red}-1 patch{color}.", "Top-level trunk compilation may be broken.", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/4834//console", "This message is automatically generated.", "Pushed to trunk.", "SUCCESS: Integrated in Ambari-trunk-Commit #4165 (See [https://builds.apache.org/job/Ambari-trunk-Commit/4165/])", "AMBARI-14598.", "Provide ability to skip block cache on aggregator queries.", "(swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=c7c1206a99b414712c61936c015bd27cad6e4e0e])", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/v2/TimelineMetricClusterAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricHostAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/v2/TimelineMetricHostAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricConfiguration.java", "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-site.xml", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java"], "SplitGT": [" Provide skip block cache hint for aggregator queries."], "issueString": "Provide ability to skip block cache on aggregator queries\nAMS block cache utilization for metrics data can be optimized with respect to user queries vs aggregators to free up block cache usage.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12781360/AMBARI-14598.patch\n  against trunk revision .\n\n    {color:red}-1 patch{color}.  Top-level trunk compilation may be broken.\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/4834//console\n\nThis message is automatically generated.\nPushed to trunk.\nSUCCESS: Integrated in Ambari-trunk-Commit #4165 (See [https://builds.apache.org/job/Ambari-trunk-Commit/4165/])\nAMBARI-14598. Provide ability to skip block cache on aggregator queries. (swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=c7c1206a99b414712c61936c015bd27cad6e4e0e])\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/v2/TimelineMetricClusterAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricHostAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/v2/TimelineMetricHostAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricConfiguration.java\n* ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-site.xml\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java\n\n", "issueSearchSentences": ["Provide ability to skip block cache on aggregator queries.", "Provide ability to skip block cache on aggregator queries", "AMS block cache utilization for metrics data can be optimized with respect to user queries vs aggregators to free up block cache usage.", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregator.java"], "issueSearchScores": [0.511493444442749, 0.47355329990386963, 0.4303818643093109, 0.2727719247341156, 0.26885467767715454]}
{"aId": 18, "code": "public void setKerberosRequired(Boolean kerberosRequired) {\n    this.kerberosRequired = kerberosRequired;\n  }", "comment": " Sets the flag is Kerberos is required for SSO integration", "issueId": "AMBARI-24335", "issueStringList": ["Update service metainfo to declare Kerberos is required for SSO integration support", "Update service metainfo to declare Kerberos is required for SSO integration support.", "The metainfo file allow for a service to indicate that is supports SSO integration.", "{code:java|title=Example}", "<sso>", "<supported>true</supported>", "<enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>", "</sso>", "{code}", "However, some services required that Kerberos is enabled to support SSO.", "This needs to be indicated in the metainfo so that Ambari knows how to behave properly.", "{code:java|title=Example}", "<sso>", "<supported>true</supported>", "<enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>", "<kerberosRequired>true</kerberosRequired>", "</sso>", "{code}", "Along with this change, the following API request needs to be updated to supply the relevant data:", "{noformat:title=Get stack service details}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",", "{", "\"href\" : \":URL\",", "\"StackServices\" : {", "...", "\"sso_integration_supported\": \"true\",", "\"sso_integration_requires_kerberos\": \"true\",", "...", "},", "...", "{noformat}", "{noformat:title=Get installed service information}", "GET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME", "{", "\"href\" : \":URL\",", "\"ServiceInfo\" : {", "\"cluster_name\" : \":CLUSTER_NAME\",", "...", "\"sso_integration_supported\": \"true\",", "\"sso_integration_requires_kerberos\": \"true\",", "\"sso_integration_enabled\": \"false\",", "\"sso_integration_desired\": \"false\",", "...", "},", "...", "{noformat}", "{noformat:title=List installed services that support SSO integration only when Kerberos to be enabled}", "GET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true&ServiceInfo/sso_integration_requires_kerberos=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}", "{noformat}", "{noformat:title=List stack services that support SSO integration only when Kerberos is enabed}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/sso_integration_supported=true&StackServices/sso_integration_requires_kerberos=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}{noformat}", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #9682 (See [https://builds.apache.org/job/Ambari-trunk-Commit/9682/])", "AMBARI-24335.", "Updating service metainfo to declare if Kerberos is (github: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=0b7e8d0b0c9fc0e24e21a8de61ea1eb6e682092f])", "(edit) ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java"], "SplitGT": [" Sets the flag is Kerberos is required for SSO integration"], "issueString": "Update service metainfo to declare Kerberos is required for SSO integration support\nUpdate service metainfo to declare Kerberos is required for SSO integration support.\r\n\r\nThe metainfo file allow for a service to indicate that is supports SSO integration.\r\n{code:java|title=Example}\r\n      <sso>\r\n        <supported>true</supported>\r\n        <enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>\r\n      </sso>\r\n{code}\r\nHowever, some services required that Kerberos is enabled to support SSO. This needs to be indicated in the metainfo so that Ambari knows how to behave properly.\r\n{code:java|title=Example}\r\n      <sso>\r\n        <supported>true</supported>\r\n        <enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>\r\n        <kerberosRequired>true</kerberosRequired>\r\n      </sso>\r\n{code}\r\nAlong with this change, the following API request needs to be updated to supply the relevant data:\r\n{noformat:title=Get stack service details}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",\r\n{\r\n  \"href\" : \":URL\",\r\n  \"StackServices\" : {\r\n     ...\r\n     \"sso_integration_supported\": \"true\",\r\n     \"sso_integration_requires_kerberos\": \"true\",\r\n     ...\r\n  },\r\n  ...\r\n{noformat}\r\n{noformat:title=Get installed service information}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME\r\n{\r\n  \"href\" : \":URL\",\r\n  \"ServiceInfo\" : {\r\n    \"cluster_name\" : \":CLUSTER_NAME\",\r\n    ...\r\n    \"sso_integration_supported\": \"true\",\r\n    \"sso_integration_requires_kerberos\": \"true\",\r\n    \"sso_integration_enabled\": \"false\",\r\n    \"sso_integration_desired\": \"false\",\r\n     ...\r\n    },\r\n    ...\r\n{noformat}\r\n{noformat:title=List installed services that support SSO integration only when Kerberos to be enabled}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true&ServiceInfo/sso_integration_requires_kerberos=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}\r\n{noformat}\r\n{noformat:title=List stack services that support SSO integration only when Kerberos is enabed}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/sso_integration_supported=true&StackServices/sso_integration_requires_kerberos=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}{noformat}\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #9682 (See [https://builds.apache.org/job/Ambari-trunk-Commit/9682/])\nAMBARI-24335. Updating service metainfo to declare if Kerberos is (github: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=0b7e8d0b0c9fc0e24e21a8de61ea1eb6e682092f])\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java\n\n", "issueSearchSentences": ["<kerberosRequired>true</kerberosRequired>", "Update service metainfo to declare Kerberos is required for SSO integration support.", "However, some services required that Kerberos is enabled to support SSO.", "Update service metainfo to declare Kerberos is required for SSO integration support", "\"sso_integration_requires_kerberos\": \"true\","], "issueSearchScores": [0.6109867095947266, 0.5490715503692627, 0.5416969060897827, 0.5341959595680237, 0.5238456726074219]}
{"aId": 21, "code": "private String selectRandomHostNameWithPreferenceOnAvailability(List<String> candidateHostNames) throws AmbariException {\n    if (null == candidateHostNames || candidateHostNames.isEmpty()) {\n      return null;\n    }\n    if (candidateHostNames.size() == 1) {\n      return candidateHostNames.get(0);\n    }\n\n    List<String> hostsWithZeroCommands = new ArrayList<>();\n    List<String> hostsWithInProgressCommands = new ArrayList<>();\n\n    Map<Long, Integer> hostIdToCount = hostRoleCommandDAO.getHostIdToCountOfCommandsWithStatus(HostRoleStatus.IN_PROGRESS_STATUSES);\n    for (String hostName : candidateHostNames) {\n      Host host = clusters.getHost(hostName);\n\n      if (hostIdToCount.containsKey(host.getHostId()) && hostIdToCount.get(host.getHostId()) > 0) {\n        hostsWithInProgressCommands.add(hostName);\n      } else {\n        hostsWithZeroCommands.add(hostName);\n      }\n    }\n\n    List<String> preferredList = !hostsWithZeroCommands.isEmpty() ? hostsWithZeroCommands : hostsWithInProgressCommands;\n    if (!preferredList.isEmpty()) {\n      int randomIndex = new Random().nextInt(preferredList.size());\n      return preferredList.get(randomIndex);\n    }\n\n    return null;\n  }", "comment": " Assuming all hosts are healthy and not in maintenance mode.", "issueId": "AMBARI-18619", "issueStringList": ["Optimize Service Checks to it picks a random host and prefers hosts with 0 active commands", "STR:", "Deploy a 3-node cluster with Ambari 2.4 and HDP 2.5 with clients on every host.", "Run multiple service checks in parallel, but notice that they typically run on the same 1 or 2 hosts.", "Currently, Ambari relies on getting the list of candidate hosts from the DB and excludes all hosts that are in maintenance mode.", "From that list, it picks the first host that is healthy (i.e., heartbeating).", "This means that the logic does not pick a random host.", "Instead, Ambari should always pick a random host and prefer to schedule on hosts that have 0 in-progress commands.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12833855/AMBARI-18619.trunk.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 1 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.controller.internal.ActiveWidgetLayoutResourceProviderTest", "org.apache.ambari.server.controller.internal.UserAuthorizationResourceProviderTest", "org.apache.ambari.server.controller.AmbariManagementControllerTest", "org.apache.ambari.server.controller.internal.UserResourceProviderTest", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/8895//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/8895//console", "This message is automatically generated.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12834002/AMBARI-18619.branch-2.5.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 1 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.controller.internal.ActiveWidgetLayoutResourceProviderTest", "org.apache.ambari.server.controller.internal.UserAuthorizationResourceProviderTest", "org.apache.ambari.server.state.cluster.ClusterDeadlockTest", "org.apache.ambari.server.controller.AmbariManagementControllerTest", "org.apache.ambari.server.controller.internal.UserResourceProviderTest", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/8916//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/8916//console", "This message is automatically generated.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12834079/AMBARI-18619.branch-2.5.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 2 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.controller.internal.ActiveWidgetLayoutResourceProviderTest", "org.apache.ambari.server.controller.internal.UserAuthorizationResourceProviderTest", "org.apache.ambari.server.controller.internal.UserResourceProviderTest", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/8919//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/8919//console", "This message is automatically generated.", "Pushed to trunk, commit 365a5d638fb7edcd4ff5561b29f0efb66fa5b881", "branch-2.5, commit 68d4da47b84301b4688fce5eef1360a779f1849a", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #5828 (See [https://builds.apache.org/job/Ambari-trunk-Commit/5828/])", "AMBARI-18619.", "Optimize Service Checks to it picks a random host and (afernandez: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=365a5d638fb7edcd4ff5561b29f0efb66fa5b881])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserResourceProviderTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ActiveWidgetLayoutResourceProviderTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserAuthorizationResourceProviderTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java", "FAILURE: Integrated in Jenkins build Ambari-branch-2.5 #172 (See [https://builds.apache.org/job/Ambari-branch-2.5/172/])", "AMBARI-18619.", "Optimize Service Checks to it picks a random host and (afernandez: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=68d4da47b84301b4688fce5eef1360a779f1849a])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserAuthorizationResourceProviderTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ActiveWidgetLayoutResourceProviderTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserResourceProviderTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java"], "SplitGT": [" Assuming all hosts are healthy and not in maintenance mode."], "issueString": "Optimize Service Checks to it picks a random host and prefers hosts with 0 active commands\nSTR:\n* Deploy a 3-node cluster with Ambari 2.4 and HDP 2.5 with clients on every host.\n* Run multiple service checks in parallel, but notice that they typically run on the same 1 or 2 hosts.\n\nCurrently, Ambari relies on getting the list of candidate hosts from the DB and excludes all hosts that are in maintenance mode. From that list, it picks the first host that is healthy (i.e., heartbeating). This means that the logic does not pick a random host.\n\nInstead, Ambari should always pick a random host and prefer to schedule on hosts that have 0 in-progress commands.\n\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12833855/AMBARI-18619.trunk.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.controller.internal.ActiveWidgetLayoutResourceProviderTest\n                  org.apache.ambari.server.controller.internal.UserAuthorizationResourceProviderTest\n                  org.apache.ambari.server.controller.AmbariManagementControllerTest\n                  org.apache.ambari.server.controller.internal.UserResourceProviderTest\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/8895//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/8895//console\n\nThis message is automatically generated.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12834002/AMBARI-18619.branch-2.5.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.controller.internal.ActiveWidgetLayoutResourceProviderTest\n                  org.apache.ambari.server.controller.internal.UserAuthorizationResourceProviderTest\n                  org.apache.ambari.server.state.cluster.ClusterDeadlockTest\n                  org.apache.ambari.server.controller.AmbariManagementControllerTest\n                  org.apache.ambari.server.controller.internal.UserResourceProviderTest\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/8916//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/8916//console\n\nThis message is automatically generated.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12834079/AMBARI-18619.branch-2.5.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.controller.internal.ActiveWidgetLayoutResourceProviderTest\n                  org.apache.ambari.server.controller.internal.UserAuthorizationResourceProviderTest\n                  org.apache.ambari.server.controller.internal.UserResourceProviderTest\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/8919//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/8919//console\n\nThis message is automatically generated.\nPushed to trunk, commit 365a5d638fb7edcd4ff5561b29f0efb66fa5b881\nbranch-2.5, commit 68d4da47b84301b4688fce5eef1360a779f1849a\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #5828 (See [https://builds.apache.org/job/Ambari-trunk-Commit/5828/])\nAMBARI-18619. Optimize Service Checks to it picks a random host and (afernandez: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=365a5d638fb7edcd4ff5561b29f0efb66fa5b881])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserResourceProviderTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ActiveWidgetLayoutResourceProviderTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserAuthorizationResourceProviderTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n\nFAILURE: Integrated in Jenkins build Ambari-branch-2.5 #172 (See [https://builds.apache.org/job/Ambari-branch-2.5/172/])\nAMBARI-18619. Optimize Service Checks to it picks a random host and (afernandez: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=68d4da47b84301b4688fce5eef1360a779f1849a])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelperTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserAuthorizationResourceProviderTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ActiveWidgetLayoutResourceProviderTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UserResourceProviderTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n\n", "issueSearchSentences": ["Currently, Ambari relies on getting the list of candidate hosts from the DB and excludes all hosts that are in maintenance mode.", "This means that the logic does not pick a random host.", "Instead, Ambari should always pick a random host and prefer to schedule on hosts that have 0 in-progress commands.", "From that list, it picks the first host that is healthy (i.e., heartbeating).", "Optimize Service Checks to it picks a random host and prefers hosts with 0 active commands"], "issueSearchScores": [0.7205427885055542, 0.7017242908477783, 0.6688395738601685, 0.6312816143035889, 0.6214083433151245]}
{"aId": 22, "code": "@ApiModelProperty(name = \"rollingRestartSupported\")\n  public boolean isRollingRestartSupported(){\n    return rollingRestartSupported;\n  }", "comment": " Get whether the component supports rolling restart", "issueId": "AMBARI-21737", "issueStringList": ["Ambari should expose whether a service is able to rolling-restart instead of hard coding service name", "Add a new property rollingRestartSupported to component in the metainfo.xml file.", "This property can be used to decide whether the component supports rolling restart.", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7928 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7928/])", "AMBARI-21737 - Ambari should expose whether a service is able to (mradhakrishnan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=54513bf0fc4a08552b326f9d4482c1bcd350ee7b])", "(edit) ambari-server/src/main/resources/properties.json", "(edit) ambari-server/src/main/resources/common-services/KAFKA/0.10.0.3.0/metainfo.xml", "(edit) ambari-server/src/main/resources/common-services/KAFKA/0.8.1/metainfo.xml", "(edit) ambari-web/app/models/stack_service_component.js", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceComponentResourceProvider.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceComponentResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ComponentInfo.java", "(edit) ambari-web/app/mappers/stack_service_mapper.js", "FAILURE: Integrated in Jenkins build Ambari-branch-2.6 #48 (See [https://builds.apache.org/job/Ambari-branch-2.6/48/])", "AMBARI-21737 : Ambari should expose whether a service is able to (mradhakrishnan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=4c39e3ba33b1caec68310fd1b7d22efd2b21015e])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceComponentResourceProvider.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ComponentInfo.java", "(edit) ambari-web/app/mappers/stack_service_mapper.js", "(edit) ambari-server/src/main/resources/properties.json", "(edit) ambari-web/app/models/stack_service_component.js", "(edit) ambari-server/src/main/resources/common-services/KAFKA/0.8.1/metainfo.xml", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceComponentResponse.java"], "SplitGT": [" Get whether the component supports rolling restart"], "issueString": "Ambari should expose whether a service is able to rolling-restart instead of hard coding service name\nAdd a new property rollingRestartSupported to component in the metainfo.xml file. This property can be used to decide whether the component supports rolling restart.\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7928 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7928/])\nAMBARI-21737 - Ambari should expose whether a service is able to (mradhakrishnan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=54513bf0fc4a08552b326f9d4482c1bcd350ee7b])\n* (edit) ambari-server/src/main/resources/properties.json\n* (edit) ambari-server/src/main/resources/common-services/KAFKA/0.10.0.3.0/metainfo.xml\n* (edit) ambari-server/src/main/resources/common-services/KAFKA/0.8.1/metainfo.xml\n* (edit) ambari-web/app/models/stack_service_component.js\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceComponentResourceProvider.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceComponentResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ComponentInfo.java\n* (edit) ambari-web/app/mappers/stack_service_mapper.js\n\nFAILURE: Integrated in Jenkins build Ambari-branch-2.6 #48 (See [https://builds.apache.org/job/Ambari-branch-2.6/48/])\nAMBARI-21737 : Ambari should expose whether a service is able to (mradhakrishnan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=4c39e3ba33b1caec68310fd1b7d22efd2b21015e])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceComponentResourceProvider.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ComponentInfo.java\n* (edit) ambari-web/app/mappers/stack_service_mapper.js\n* (edit) ambari-server/src/main/resources/properties.json\n* (edit) ambari-web/app/models/stack_service_component.js\n* (edit) ambari-server/src/main/resources/common-services/KAFKA/0.8.1/metainfo.xml\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceComponentResponse.java\n\n", "issueSearchSentences": ["This property can be used to decide whether the component supports rolling restart.", "Add a new property rollingRestartSupported to component in the metainfo.xml file.", "Ambari should expose whether a service is able to rolling-restart instead of hard coding service name", "AMBARI-21737 - Ambari should expose whether a service is able to (mradhakrishnan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=54513bf0fc4a08552b326f9d4482c1bcd350ee7b])", "AMBARI-21737 : Ambari should expose whether a service is able to (mradhakrishnan: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=4c39e3ba33b1caec68310fd1b7d22efd2b21015e])"], "issueSearchScores": [0.7317222952842712, 0.6504793167114258, 0.6131316423416138, 0.29895299673080444, 0.2919316291809082]}
{"aId": 23, "code": "protected void checkPatchVDFAvailableServices(Cluster cluster, RepositoryVersionEntity repoVersionEnt,\n                                              VersionDefinitionXml desiredVersionDefinition) throws SystemException, AmbariException {\n    if (repoVersionEnt.getType() == RepositoryType.PATCH) {\n\n      Collection<String> notPresentServices = new ArrayList<>();\n      Collection<String> presentServices = new ArrayList<>();\n\n      presentServices.addAll(cluster.getServices().keySet());\n      final StackInfo stack;\n      stack = metaInfo.get().getStack(repoVersionEnt.getStackName(), repoVersionEnt.getStackVersion());\n\n      for (AvailableService availableService : desiredVersionDefinition.getAvailableServices(stack)) {\n        String name = availableService.getName();\n        if (!presentServices.contains(name)) {\n          notPresentServices.add(name);\n        }\n      }\n      if (!notPresentServices.isEmpty()) {\n        throw new IllegalArgumentException(String.format(\"%s VDF includes services that are not installed: %s\",\n            RepositoryType.PATCH, StringUtils.join(notPresentServices, \",\")));\n      }\n    }\n  }", "comment": " Reject PATCH VDFs with Services that are not included in the Cluster", "issueId": "AMBARI-21832", "issueStringList": ["Reject PATCH VDFs with Services that are not Included in the Cluster", "Currently there is an odd scenario which can occur when patch repositories are registered which have services not yet installed.", "Consider the following scenario:", "Install ZooKeeper, Storm on HDP 2.6.0.0-1234", "Register/patch a {{PATCH}} VDF for Storm and Accumulo for 2.6.0.1-9999", "Install Accumulo", "Which version does Accumulo use - the {{STANDARD}} repository or the {{PATCH}}?", "If the {{PATCH}} repository is chosen, this will now prevent reversion of the patch since there's no prior version for Accumulo to revert back to.", "If Accumulo uses the {{STANDARD}} repo, then there needs to be a lot of design and UX flow work provided to indicate that a {{PATCH}} which was previously applied can be re-applied for the new service.", "This also causes problems for patch reversion since now there would be two upgrades which need to be reverted to \"get rid\" of the patch.", "For the timeframe for Ambari 2.6, we should reject VDFs that include services which are not installed.", "This will prevent the problem.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12884074/AMBARI-21832.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:red}-1 tests included{color}.", "The patch doesn't appear to include any new or modified tests.", "Please justify why no new tests are needed for this patch.", "Also please list what manual steps were performed to verify this patch.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 javac{color}.", "The patch appears to cause the [build to fail|https://builds.apache.org/job/Ambari-trunk-test-patch/12084//artifact/patch-work/patchJavacWarnings.txt].", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/12084//console", "This message is automatically generated.", "Committed", "To https://git-wip-us.apache.org/repos/asf/ambari.git", "6174afff1e..9e4324fcfc  branch-2.6 -> branch-2.6", "c51540dee8..c091ebe8af  trunk -> trunk", "FAILURE: Integrated in Jenkins build Ambari-branch-2.6 #116 (See [https://builds.apache.org/job/Ambari-branch-2.6/116/])", "AMBARI-21832.", "Reject PATCH VDFs with Services that are not Included in (dlysnichenko: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=9e4324fcfcf54760f0b080d79c4939cc3977895a])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7990 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7990/])", "AMBARI-21832.", "Reject PATCH VDFs with Services that are not Included in (dlysnichenko: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=c091ebe8afa1d83384d5607fb4ee52eb018772b0])", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java"], "SplitGT": [" Reject PATCH VDFs with Services that are not included in the Cluster"], "issueString": "Reject PATCH VDFs with Services that are not Included in the Cluster\n\nCurrently there is an odd scenario which can occur when patch repositories are registered which have services not yet installed. Consider the following scenario:\n\n- Install ZooKeeper, Storm on HDP 2.6.0.0-1234\n- Register/patch a {{PATCH}} VDF for Storm and Accumulo for 2.6.0.1-9999\n- Install Accumulo\n\nWhich version does Accumulo use - the {{STANDARD}} repository or the {{PATCH}}? If the {{PATCH}} repository is chosen, this will now prevent reversion of the patch since there's no prior version for Accumulo to revert back to.\n\nIf Accumulo uses the {{STANDARD}} repo, then there needs to be a lot of design and UX flow work provided to indicate that a {{PATCH}} which was previously applied can be re-applied for the new service. This also causes problems for patch reversion since now there would be two upgrades which need to be reverted to \"get rid\" of the patch.\n\nFor the timeframe for Ambari 2.6, we should reject VDFs that include services which are not installed. This will prevent the problem.\n\n\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12884074/AMBARI-21832.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.\n                        Please justify why no new tests are needed for this patch.\n                        Also please list what manual steps were performed to verify this patch.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 javac{color}.  The patch appears to cause the [build to fail|https://builds.apache.org/job/Ambari-trunk-test-patch/12084//artifact/patch-work/patchJavacWarnings.txt].\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/12084//console\n\nThis message is automatically generated.\nCommitted\nTo https://git-wip-us.apache.org/repos/asf/ambari.git\n   6174afff1e..9e4324fcfc  branch-2.6 -> branch-2.6\n   c51540dee8..c091ebe8af  trunk -> trunk\nFAILURE: Integrated in Jenkins build Ambari-branch-2.6 #116 (See [https://builds.apache.org/job/Ambari-branch-2.6/116/])\nAMBARI-21832. Reject PATCH VDFs with Services that are not Included in (dlysnichenko: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=9e4324fcfcf54760f0b080d79c4939cc3977895a])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java\n\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7990 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7990/])\nAMBARI-21832. Reject PATCH VDFs with Services that are not Included in (dlysnichenko: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=c091ebe8afa1d83384d5607fb4ee52eb018772b0])\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java\n\n", "issueSearchSentences": ["Currently there is an odd scenario which can occur when patch repositories are registered which have services not yet installed.", "Also please list what manual steps were performed to verify this patch.", "Reject PATCH VDFs with Services that are not Included in the Cluster", "The applied patch does not increase the total number of release audit warnings.", "(edit) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProviderTest.java"], "issueSearchScores": [0.7658689022064209, 0.6071922183036804, 0.5646029710769653, 0.5419577360153198, 0.5382663011550903]}
{"aId": 24, "code": "@ApiModelProperty(name = \"sso_integration_desired\")\n  public boolean isSsoIntegrationDesired() {\n    return ssoIntegrationDesired;\n  }", "comment": " Indicates whether the service is chosen for SSO integration or not", "issueId": "AMBARI-23289", "issueStringList": ["Add SSO integration support information to service information via Ambari's REST API", "Add SSO integration support information to service information via Ambari's REST API.", "This information should be usable by Ambari's search predicate feature.", "New _read-only_ properties for (stack) services should be:", "*{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not", "Information is expected to be determined by service's meta info (see BUG-98626)", "New _read-only_ properties for installed services should be:", "*{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not", "Information is expected to be determined by the service's meta info (see BUG-98626)", "*{{sso_integration_enabled}}* - Indicates whether the service is configured for SSO integration or not", "Information is expected to be determined by a value indicated in the service's meta info (see BUG-98626)", "*{{sso_integration_desired}}* - Indicates whether the service is chosen for SSO integration or not", "Information is expected to be in {{cluster-env/sso_enabled_services}} (see BUG-98451)", "Examples:", "{noformat:title=Get stack service details}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",", "{", "\"href\" : \":URL\",", "\"StackServices\" : {", "...", "\"sso_integration_supported\": \"false\",", "...", "},", "...", "{noformat}", "{noformat:title=Get installed service information}", "GET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME", "{", "\"href\" : \":URL\",", "\"ServiceInfo\" : {", "\"cluster_name\" : \":CLUSTER_NAME\",", "...", "\"sso_integration_supported\": \"true\",", "\"sso_integration_enabled\": \"false\",", "\"sso_integration_desired\": \"false\",", "...", "},", "...", "{noformat}", "{noformat:title=List installed services that support SSO integration}", "GET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}", "{noformat}", "{noformat:title=List stack services that support SSO integration}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/credential_store_enabled=false", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}", "{noformat}", "SUCCESS: Integrated in Jenkins build Ambari-trunk-Commit #8906 (See [https://builds.apache.org/job/Ambari-trunk-Commit/8906/])", "AMBARI-23289.", "Add SSO integration support information to service (m.magyar3: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=a8c2d0de1b17ae5804e1819e1b7c94e560930a00])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandler.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java", "(add) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandlerTest.java"], "SplitGT": [" Indicates whether the service is chosen for SSO integration or not"], "issueString": "Add SSO integration support information to service information via Ambari's REST API\nAdd SSO integration support information to service information via Ambari's REST API.  This information should be usable by Ambari's search predicate feature.\r\n\r\nNew _read-only_ properties for (stack) services should be:\r\n* *{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not\r\n** Information is expected to be determined by service's meta info (see BUG-98626)\r\n\r\nNew _read-only_ properties for installed services should be:\r\n* *{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not\r\n** Information is expected to be determined by the service's meta info (see BUG-98626)\r\n* *{{sso_integration_enabled}}* - Indicates whether the service is configured for SSO integration or not\r\n** Information is expected to be determined by a value indicated in the service's meta info (see BUG-98626)\r\n* *{{sso_integration_desired}}* - Indicates whether the service is chosen for SSO integration or not\r\n** Information is expected to be in {{cluster-env/sso_enabled_services}} (see BUG-98451)\r\n\r\nExamples:\r\n{noformat:title=Get stack service details}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",\r\n{\r\n  \"href\" : \":URL\",\r\n  \"StackServices\" : {\r\n     ...\r\n     \"sso_integration_supported\": \"false\",\r\n     ...\r\n  },\r\n  ...\r\n{noformat}\r\n\r\n{noformat:title=Get installed service information}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME\r\n{\r\n  \"href\" : \":URL\",\r\n  \"ServiceInfo\" : {\r\n    \"cluster_name\" : \":CLUSTER_NAME\",\r\n    ...\r\n    \"sso_integration_supported\": \"true\",\r\n    \"sso_integration_enabled\": \"false\",\r\n    \"sso_integration_desired\": \"false\",\r\n     ...\r\n    },\r\n    ...\r\n{noformat}\r\n\r\n{noformat:title=List installed services that support SSO integration}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}\r\n{noformat}\r\n\r\n{noformat:title=List stack services that support SSO integration}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/credential_store_enabled=false\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}\r\n{noformat}\r\n\r\n\nSUCCESS: Integrated in Jenkins build Ambari-trunk-Commit #8906 (See [https://builds.apache.org/job/Ambari-trunk-Commit/8906/])\nAMBARI-23289. Add SSO integration support information to service (m.magyar3: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=a8c2d0de1b17ae5804e1819e1b7c94e560930a00])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandler.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java\n* (add) ambari-server/src/test/java/org/apache/ambari/server/controller/internal/AmbariServerConfigurationHandlerTest.java\n\n", "issueSearchSentences": ["\"sso_integration_desired\": \"false\",", "\"sso_integration_supported\": \"true\",", "*{{sso_integration_desired}}* - Indicates whether the service is chosen for SSO integration or not", "\"sso_integration_supported\": \"false\",", "*{{sso_integration_supported}}* - Indicates whether the service supports SSO integration or not"], "issueSearchScores": [0.7097290754318237, 0.6910135746002197, 0.6811495423316956, 0.6772217750549316, 0.6566243171691895]}
{"aId": 25, "code": "public String removeProperty(String configType, String propertyName) {\n    String previousValue = null;\n    if (properties.containsKey(configType)) {\n      previousValue = properties.get(configType).remove(propertyName);\n    }\n\n    if (parentConfiguration != null) {\n      String parentPreviousValue =  parentConfiguration.removeProperty(configType, propertyName);\n      if (previousValue == null) {\n        previousValue = parentPreviousValue;\n      }\n    }\n    return previousValue;\n  }", "comment": " Remove a property from the configuration hierarchy. All occurrences of the property are removed from the config hierarchy such that a subsequent call to getPropertyValue for the removed property will return null.", "issueId": "AMBARI-11790", "issueStringList": ["Configuration.removeProperty() should remove all occurrences of the given property", "If a property exists at multiple levels in a configuration such as in a blueprint and in the stack, only the most advanced occurrence of the property is removed, which in this case would be the blueprint configuration.", "Instead, all occurrences of the property should be removed from the config hierarchy such that a subsequent call to getPropertyValue() for the removed property would return null.", "merged to trunk and branch-2.1", "SUCCESS: Integrated in Ambari-trunk-Commit #2858 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2858/])", "AMBARI-11790.", "Remove all occurrences of a property from a configuration hierarchy (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=6a9d590aaeeb24045a62fa3780582dbb51a7521f)", "ambari-server/src/test/java/org/apache/ambari/server/topology/ConfigurationTest.java", "ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java"], "SplitGT": [" Remove a property from the configuration hierarchy.", "All occurrences of the property are removed from the config hierarchy such that a subsequent call to getPropertyValue for the removed property will return null."], "issueString": "Configuration.removeProperty() should remove all occurrences of the given property\nIf a property exists at multiple levels in a configuration such as in a blueprint and in the stack, only the most advanced occurrence of the property is removed, which in this case would be the blueprint configuration.  Instead, all occurrences of the property should be removed from the config hierarchy such that a subsequent call to getPropertyValue() for the removed property would return null.\nmerged to trunk and branch-2.1\nSUCCESS: Integrated in Ambari-trunk-Commit #2858 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2858/])\nAMBARI-11790. Remove all occurrences of a property from a configuration hierarchy (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=6a9d590aaeeb24045a62fa3780582dbb51a7521f)\n* ambari-server/src/test/java/org/apache/ambari/server/topology/ConfigurationTest.java\n* ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java\n\n", "issueSearchSentences": ["Configuration.removeProperty() should remove all occurrences of the given property", "Instead, all occurrences of the property should be removed from the config hierarchy such that a subsequent call to getPropertyValue() for the removed property would return null.", "If a property exists at multiple levels in a configuration such as in a blueprint and in the stack, only the most advanced occurrence of the property is removed, which in this case would be the blueprint configuration.", "Remove all occurrences of a property from a configuration hierarchy (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=6a9d590aaeeb24045a62fa3780582dbb51a7521f)", "ambari-server/src/test/java/org/apache/ambari/server/topology/ConfigurationTest.java"], "issueSearchScores": [0.784440815448761, 0.7519928216934204, 0.6280534863471985, 0.6148686408996582, 0.24606022238731384]}
{"aId": 27, "code": "protected void initializeClusterAndServiceWidgets() throws AmbariException {\n    AmbariManagementController controller = injector.getInstance(AmbariManagementController.class);\n    Clusters clusters = controller.getClusters();\n    if (clusters == null) {\n      return;\n    }\n\n    Map<String, Cluster> clusterMap = clusters.getClusters();\n\n    if (clusterMap != null && !clusterMap.isEmpty()) {\n      for (Cluster cluster : clusterMap.values()) {\n        controller.initializeWidgetsAndLayouts(cluster, null);\n\n        Map<String, Service> serviceMap = cluster.getServices();\n        if (serviceMap != null && !serviceMap.isEmpty()) {\n          for (Service service : serviceMap.values()) {\n            controller.initializeWidgetsAndLayouts(cluster, service);\n          }\n        }\n      }\n    }\n  }", "comment": " Copy cluster & service widgets from stack to DB.", "issueId": "AMBARI-10445", "issueStringList": ["Populate cluster widgets from stack-defined widgets on cluster/service create", "On cluster create, copy cluster & host level widgets from stack to DB.", "On service create, copy service level widgets from stack to DB.", "Pushed to trunk.", "FAILURE: Integrated in Ambari-trunk-Commit #2261 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2261/])", "AMBARI-10445.", "Populate cluster widgets from stack-defined widgets on cluster/service create.", "(swagle) (swagle: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=c71624a60654b1ed2ef04068fe986a0409fdd648)", "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetLayoutResourceProvider.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java", "ambari-server/src/main/java/org/apache/ambari/server/state/stack/WidgetLayout.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/WidgetDAO.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java", "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/WidgetEntity.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java", "ambari-server/src/test/resources/stacks/OTHER/2.0/services/HBASE/widgets.json", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java", "ambari-server/src/main/java/org/apache/ambari/server/state/stack/WidgetLayoutInfo.java", "ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/WidgetLayoutEntity.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/WidgetLayoutDAO.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java", "ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java", "ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql", "AMBARI-10445.", "Populate cluster widgets from stack-defined widgets on cluster/service create.", "Dispaly Name not null fix.", "(swagle) (swagle: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=fe702ab2a0e36371d0a311d04e5c58a028ead9c2)", "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql", "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql", "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql", "Upgrade Catalog changes.", "+1 for the addendum.", "FAILURE: Integrated in Ambari-trunk-Commit #2264 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2264/])", "AMBARI-10445.", "Populate cluster widgets from stack-defined widgets on cluster/service create.", "Upgrade Catalog changes.", "(swagle) (swagle: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=5dad81c3df577bc81f588cb61eae6b0f56089b87)", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java", "FAILURE: Integrated in Ambari-trunk-Commit #2265 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2265/])", "AMBARI-10445.", "Populate cluster widgets from stack-defined widgets on cluster/service create.", "Upgrade Catalog changes.", "(swagle) (swagle: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=37717dd4cd55ee75f3f218e6fee20af529cc0f87)", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java", "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java"], "SplitGT": [" Copy cluster & service widgets from stack to DB."], "issueString": "Populate cluster widgets from stack-defined widgets on cluster/service create\n- On cluster create, copy cluster & host level widgets from stack to DB.\n- On service create, copy service level widgets from stack to DB.\nPushed to trunk.\nFAILURE: Integrated in Ambari-trunk-Commit #2261 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2261/])\nAMBARI-10445. Populate cluster widgets from stack-defined widgets on cluster/service create. (swagle) (swagle: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=c71624a60654b1ed2ef04068fe986a0409fdd648)\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetLayoutResourceProvider.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java\n* ambari-server/src/main/java/org/apache/ambari/server/state/stack/WidgetLayout.java\n* ambari-server/src/main/java/org/apache/ambari/server/orm/dao/WidgetDAO.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\n* ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java\n* ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/orm/entities/WidgetEntity.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java\n* ambari-server/src/test/resources/stacks/OTHER/2.0/services/HBASE/widgets.json\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java\n* ambari-server/src/main/java/org/apache/ambari/server/state/stack/WidgetLayoutInfo.java\n* ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java\n* ambari-server/src/main/java/org/apache/ambari/server/orm/entities/WidgetLayoutEntity.java\n* ambari-server/src/main/java/org/apache/ambari/server/orm/dao/WidgetLayoutDAO.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java\n* ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql\nAMBARI-10445. Populate cluster widgets from stack-defined widgets on cluster/service create. Dispaly Name not null fix. (swagle) (swagle: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=fe702ab2a0e36371d0a311d04e5c58a028ead9c2)\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql\n* ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql\n* ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql\n\nUpgrade Catalog changes.\n+1 for the addendum.\nFAILURE: Integrated in Ambari-trunk-Commit #2264 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2264/])\nAMBARI-10445. Populate cluster widgets from stack-defined widgets on cluster/service create. Upgrade Catalog changes. (swagle) (swagle: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=5dad81c3df577bc81f588cb61eae6b0f56089b87)\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java\n\nFAILURE: Integrated in Ambari-trunk-Commit #2265 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2265/])\nAMBARI-10445. Populate cluster widgets from stack-defined widgets on cluster/service create. Upgrade Catalog changes. (swagle) (swagle: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=37717dd4cd55ee75f3f218e6fee20af529cc0f87)\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java\n* ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java\n\n", "issueSearchSentences": ["ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java", "ambari-server/src/test/java/org/apache/ambari/server/controller/AmbariManagementControllerTest.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java", "Populate cluster widgets from stack-defined widgets on cluster/service create."], "issueSearchScores": [0.5449522733688354, 0.5378952026367188, 0.5308367609977722, 0.5134516954421997, 0.5014243125915527]}
{"aId": 28, "code": "public void setConfiguration(Configuration conf) {\n      configuration = conf;\n    }", "comment": " Set the configuration for all of the active roles", "issueId": "AMBARI-91", "issueStringList": ["Move the example blueprints into xml", "I've moved the sample blueprints into xml resources.", "There are now three fake blueprints:", "hadoop-security, rev 0", "cluster123, rev 0", "cluster124, rev 0", "with the later two deriving from the first.", "I also added a new level of configuration that is used for the active roles in a component."], "SplitGT": [" Set the configuration for all of the active roles"], "issueString": "Move the example blueprints into xml\nI've moved the sample blueprints into xml resources. There are now three fake blueprints:\n\nhadoop-security, rev 0\ncluster123, rev 0\ncluster124, rev 0\n\nwith the later two deriving from the first.\nI also added a new level of configuration that is used for the active roles in a component.\n", "issueSearchSentences": ["I also added a new level of configuration that is used for the active roles in a component.", "hadoop-security, rev 0", "cluster123, rev 0", "cluster124, rev 0", "with the later two deriving from the first."], "issueSearchScores": [0.36796045303344727, 0.2778259515762329, 0.1822408139705658, 0.18065404891967773, 0.12296894192695618]}
{"aId": 30, "code": "public void breakCycleGraph() throws AmbariException{\n    List<String> edges = new ArrayList<String>();\n    for (String role : graph.keySet()){\n      RoleGraphNode fromNode = graph.get(role);\n      String fnRole = fromNode.getRole().name();\n      String fnCommand = fromNode.getCommand().name();\n\n      Iterator<RoleGraphNode> it = fromNode.getEdges().iterator();\n      while(it.hasNext()){\n        RoleGraphNode toNode = it.next();\n        String tnRole = toNode.getRole().name();\n        String tnCommand = toNode.getCommand().name();\n        //Check if the reversed edge exists in the list already\n        //If the edit exists, print an error message and break the edge\n        String format = \"%s:%s --> %s:%s\";\n        String edge = String.format(format, fnRole, fnCommand, tnRole, tnCommand);\n        String reversedEdge = String.format(format, tnRole, tnCommand, fnRole, fnCommand);\n        if (edges.contains(reversedEdge)){\n          String msg = String.format(\n              \"Circular dependencies detected between %s and %s for %s. \"\n              + \"%s already exists in the role command order.\", fnRole, tnRole, edge, reversedEdge);\n          LOG.error(msg);\n          throw new AmbariException(msg);\n        } else {\n          edges.add(edge);\n        }\n      }\n    }\n  }", "comment": " Cycle graphs indicate circular dependencies such as the following example that can cause Ambari enter an infinite loop while building stages.", "issueId": "AMBARI-21161", "issueStringList": ["Able to safe guard Ambari server against circular dependencies in role command order", "It is important to safe guard against cycle graphs, when Ambari supports mpacks, custom services and service level role command order.", "Cycle graphs indicate circular dependencies that can cause Ambari enter an infinite loop while building stages, causing Ambari server to take up 100% CPU and large amount of memory.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12870645/AMBARI-21161.patch", "against trunk revision .", "{color:red}-1 patch{color}.", "The patch command could not apply the patch.", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/11625//console", "This message is automatically generated.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12870844/AMBARI-21161.patch", "against trunk revision .", "{color:red}-1 patch{color}.", "Top-level [trunk compilation|https://builds.apache.org/job/Ambari-trunk-test-patch/11629//artifact/patch-work/trunkJavacWarnings.txt] may be broken.", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/11629//console", "This message is automatically generated.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12871831/AMBARI-21161-v3.patch", "against trunk revision .", "{color:red}-1 patch{color}.", "Top-level [trunk compilation|https://builds.apache.org/job/Ambari-trunk-test-patch/11632//artifact/patch-work/trunkJavacWarnings.txt] may be broken.", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/11632//console", "This message is automatically generated.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12871831/AMBARI-21161-v3.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 2 new or modified test files.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.state.UpgradeHelperTest", "org.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest", "org.apache.ambari.server.controller.AmbariManagementControllerImplTest", "org.apache.ambari.server.controller.AmbariManagementControllerTest", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/11633//console", "This message is automatically generated.", "org.apache.ambari.server.state.UpgradeHelperTest test with my changes passed locally when I ran it.", "The following unit tests also failed without my changes", "org.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest", "org.apache.ambari.server.controller.AmbariManagementControllerImplTest", "org.apache.ambari.server.controller.AmbariManagementControllerTest", "pushed to trunk as https://git-wip-us.apache.org/repos/asf?p=ambari.git;a=commit;h=acb2f9896e55db202f5b054565d09c0e598011ed", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7583 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7583/])", "AMBARI-21161 Able to safe guard Ambari server against circular (dili: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=acb2f9896e55db202f5b054565d09c0e598011ed])", "(edit) ambari-server/src/test/java/org/apache/ambari/server/stageplanner/TestStagePlanner.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java", "(edit) ambari-server/src/test/resources/stacks/HDP/2.0.6.1/role_command_order.json", "Integration test failures as shown below existed without code change added via this JIRA.", "Test Result (7 failures / -1)", "org.apache.ambari.server.controller.AmbariManagementControllerImplTest.testPopulateServicePackagesInfo", "org.apache.ambari.server.controller.AmbariManagementControllerTest.testEmptyConfigs", "org.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupWithWrongConfigType", "org.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupAsAmbariAdministrator", "org.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupAsClusterAdministrator", "org.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupAsClusterOperator", "org.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupAsServiceAdministrator"], "SplitGT": [" Cycle graphs indicate circular dependencies such as the following example that can cause Ambari enter an infinite loop while building stages."], "issueString": "Able to safe guard Ambari server against circular dependencies in role command order\nIt is important to safe guard against cycle graphs, when Ambari supports mpacks, custom services and service level role command order. Cycle graphs indicate circular dependencies that can cause Ambari enter an infinite loop while building stages, causing Ambari server to take up 100% CPU and large amount of memory.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12870645/AMBARI-21161.patch\n  against trunk revision .\n\n    {color:red}-1 patch{color}.  The patch command could not apply the patch.\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/11625//console\n\nThis message is automatically generated.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12870844/AMBARI-21161.patch\n  against trunk revision .\n\n    {color:red}-1 patch{color}.  Top-level [trunk compilation|https://builds.apache.org/job/Ambari-trunk-test-patch/11629//artifact/patch-work/trunkJavacWarnings.txt] may be broken.\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/11629//console\n\nThis message is automatically generated.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12871831/AMBARI-21161-v3.patch\n  against trunk revision .\n\n    {color:red}-1 patch{color}.  Top-level [trunk compilation|https://builds.apache.org/job/Ambari-trunk-test-patch/11632//artifact/patch-work/trunkJavacWarnings.txt] may be broken.\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/11632//console\n\nThis message is automatically generated.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12871831/AMBARI-21161-v3.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.state.UpgradeHelperTest\n                  org.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest\n                  org.apache.ambari.server.controller.AmbariManagementControllerImplTest\n                  org.apache.ambari.server.controller.AmbariManagementControllerTest\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/11633//console\n\nThis message is automatically generated.\norg.apache.ambari.server.state.UpgradeHelperTest test with my changes passed locally when I ran it. \n\nThe following unit tests also failed without my changes\norg.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest\norg.apache.ambari.server.controller.AmbariManagementControllerImplTest\norg.apache.ambari.server.controller.AmbariManagementControllerTest\npushed to trunk as https://git-wip-us.apache.org/repos/asf?p=ambari.git;a=commit;h=acb2f9896e55db202f5b054565d09c0e598011ed\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7583 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7583/])\nAMBARI-21161 Able to safe guard Ambari server against circular (dili: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=acb2f9896e55db202f5b054565d09c0e598011ed])\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/stageplanner/TestStagePlanner.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java\n* (edit) ambari-server/src/test/resources/stacks/HDP/2.0.6.1/role_command_order.json\n\nIntegration test failures as shown below existed without code change added via this JIRA. \n\nTest Result (7 failures / -1)\norg.apache.ambari.server.controller.AmbariManagementControllerImplTest.testPopulateServicePackagesInfo\norg.apache.ambari.server.controller.AmbariManagementControllerTest.testEmptyConfigs\norg.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupWithWrongConfigType\norg.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupAsAmbariAdministrator\norg.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupAsClusterAdministrator\norg.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupAsClusterOperator\norg.apache.ambari.server.controller.internal.ConfigGroupResourceProviderTest.testUpdateConfigGroupAsServiceAdministrator\n\n", "issueSearchSentences": ["(edit) ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java", "It is important to safe guard against cycle graphs, when Ambari supports mpacks, custom services and service level role command order.", "Cycle graphs indicate circular dependencies that can cause Ambari enter an infinite loop while building stages, causing Ambari server to take up 100% CPU and large amount of memory.", "Able to safe guard Ambari server against circular dependencies in role command order", "Integration test failures as shown below existed without code change added via this JIRA."], "issueSearchScores": [0.46072477102279663, 0.4525423049926758, 0.443758487701416, 0.3497644066810608, 0.3013671636581421]}
{"aId": 32, "code": "private boolean isKerberosClientInstallAllowed(final ClusterTopology topology) {\n    final org.apache.ambari.server.topology.Configuration topologyConfig = topology.getBlueprint().getConfiguration();\n    final String kdc_type = topologyConfig.getPropertyValue(KerberosHelper.KERBEROS_ENV, KerberosHelper.KDC_TYPE);\n    final String manage_identities = topologyConfig.getPropertyValue(KerberosHelper.KERBEROS_ENV, KerberosHelper.MANAGE_IDENTITIES);\n\n    return KDCType.NONE != KDCType.translate(kdc_type) || Boolean.parseBoolean(manage_identities);\n  }", "comment": " The Kerberos Client component is unnecessarily installed via Blueprints when kerberos-env/kdc-type is \"none\". The Blueprint TopologyManager should only force the Kerberos client to be installed if Kerberos is enabled and kerberos_env/kdc_type is not \"none\" or when kerberos_env/manage_identities is true.", "issueId": "AMBARI-25186", "issueStringList": ["Kerberos Client is unnecessarily installed via Blueprints when kerberos-env/kdc-type is none", "The Kerberos Client component is unnecessarily installed via Blueprints when \\{{kerberos-env/kdc-type}} is \"none\".", "The Blueprint TopologyManager should only force the Kerberos client to be installed if Kerberos is enabled and {{kerberos_env/kdc_type}}\u00a0is not \"none\".", "This also needs to go into trunk.", "SUCCESS: Integrated in Jenkins build Ambari-branch-2.7 #457 (See [https://builds.apache.org/job/Ambari-branch-2.7/457/])", "[AMBARI-25186] Kerberos Client is unnecessarily installed via Blueprints (benyoka: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=97c84a7205c23a5efd17c2f0cab4e223d832b6c3])", "(edit) ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java", "Fixed on branch-2.7"], "SplitGT": [" The Kerberos Client component is unnecessarily installed via Blueprints when kerberos-env/kdc-type is \"none\".", "The Blueprint TopologyManager should only force the Kerberos client to be installed if Kerberos is enabled and kerberos_env/kdc_type is not \"none\" or when kerberos_env/manage_identities is true."], "issueString": "Kerberos Client is unnecessarily installed via Blueprints when kerberos-env/kdc-type is none\nThe Kerberos Client component is unnecessarily installed via Blueprints when \\{{kerberos-env/kdc-type}} is \"none\".\u00a0\r\n\r\nThe Blueprint TopologyManager should only force the Kerberos client to be installed if Kerberos is enabled and {{kerberos_env/kdc_type}}\u00a0is not \"none\".\r\n\r\n\u00a0\nThis also needs to go into trunk. \r\n\nSUCCESS: Integrated in Jenkins build Ambari-branch-2.7 #457 (See [https://builds.apache.org/job/Ambari-branch-2.7/457/])\n[AMBARI-25186] Kerberos Client is unnecessarily installed via Blueprints (benyoka: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=97c84a7205c23a5efd17c2f0cab4e223d832b6c3])\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java\n\nFixed on branch-2.7\n", "issueSearchSentences": ["The Blueprint TopologyManager should only force the Kerberos client to be installed if Kerberos is enabled and {{kerberos_env/kdc_type}}\u00a0is not \"none\".", "(edit) ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java", "The Kerberos Client component is unnecessarily installed via Blueprints when \\{{kerberos-env/kdc-type}} is \"none\".", "(edit) ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java", "Kerberos Client is unnecessarily installed via Blueprints when kerberos-env/kdc-type is none"], "issueSearchScores": [0.6843690872192383, 0.6171338558197021, 0.6129981875419617, 0.6063544154167175, 0.5845487713813782]}
{"aId": 35, "code": "@ApiModelProperty(name = \"sso_integration_requires_kerberos\")\n  public boolean isSsoIntegrationRequiresKerberos() {\n    return ssoIntegrationRequiresKerberos;\n  }", "comment": " Indicates if Kerberos is required for SSO integration", "issueId": "AMBARI-24335", "issueStringList": ["Update service metainfo to declare Kerberos is required for SSO integration support", "Update service metainfo to declare Kerberos is required for SSO integration support.", "The metainfo file allow for a service to indicate that is supports SSO integration.", "{code:java|title=Example}", "<sso>", "<supported>true</supported>", "<enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>", "</sso>", "{code}", "However, some services required that Kerberos is enabled to support SSO.", "This needs to be indicated in the metainfo so that Ambari knows how to behave properly.", "{code:java|title=Example}", "<sso>", "<supported>true</supported>", "<enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>", "<kerberosRequired>true</kerberosRequired>", "</sso>", "{code}", "Along with this change, the following API request needs to be updated to supply the relevant data:", "{noformat:title=Get stack service details}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",", "{", "\"href\" : \":URL\",", "\"StackServices\" : {", "...", "\"sso_integration_supported\": \"true\",", "\"sso_integration_requires_kerberos\": \"true\",", "...", "},", "...", "{noformat}", "{noformat:title=Get installed service information}", "GET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME", "{", "\"href\" : \":URL\",", "\"ServiceInfo\" : {", "\"cluster_name\" : \":CLUSTER_NAME\",", "...", "\"sso_integration_supported\": \"true\",", "\"sso_integration_requires_kerberos\": \"true\",", "\"sso_integration_enabled\": \"false\",", "\"sso_integration_desired\": \"false\",", "...", "},", "...", "{noformat}", "{noformat:title=List installed services that support SSO integration only when Kerberos to be enabled}", "GET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true&ServiceInfo/sso_integration_requires_kerberos=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}", "{noformat}", "{noformat:title=List stack services that support SSO integration only when Kerberos is enabed}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/sso_integration_supported=true&StackServices/sso_integration_requires_kerberos=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}{noformat}", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #9682 (See [https://builds.apache.org/job/Ambari-trunk-Commit/9682/])", "AMBARI-24335.", "Updating service metainfo to declare if Kerberos is (github: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=0b7e8d0b0c9fc0e24e21a8de61ea1eb6e682092f])", "(edit) ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java"], "SplitGT": [" Indicates if Kerberos is required for SSO integration"], "issueString": "Update service metainfo to declare Kerberos is required for SSO integration support\nUpdate service metainfo to declare Kerberos is required for SSO integration support.\r\n\r\nThe metainfo file allow for a service to indicate that is supports SSO integration.\r\n{code:java|title=Example}\r\n      <sso>\r\n        <supported>true</supported>\r\n        <enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>\r\n      </sso>\r\n{code}\r\nHowever, some services required that Kerberos is enabled to support SSO. This needs to be indicated in the metainfo so that Ambari knows how to behave properly.\r\n{code:java|title=Example}\r\n      <sso>\r\n        <supported>true</supported>\r\n        <enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>\r\n        <kerberosRequired>true</kerberosRequired>\r\n      </sso>\r\n{code}\r\nAlong with this change, the following API request needs to be updated to supply the relevant data:\r\n{noformat:title=Get stack service details}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",\r\n{\r\n  \"href\" : \":URL\",\r\n  \"StackServices\" : {\r\n     ...\r\n     \"sso_integration_supported\": \"true\",\r\n     \"sso_integration_requires_kerberos\": \"true\",\r\n     ...\r\n  },\r\n  ...\r\n{noformat}\r\n{noformat:title=Get installed service information}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME\r\n{\r\n  \"href\" : \":URL\",\r\n  \"ServiceInfo\" : {\r\n    \"cluster_name\" : \":CLUSTER_NAME\",\r\n    ...\r\n    \"sso_integration_supported\": \"true\",\r\n    \"sso_integration_requires_kerberos\": \"true\",\r\n    \"sso_integration_enabled\": \"false\",\r\n    \"sso_integration_desired\": \"false\",\r\n     ...\r\n    },\r\n    ...\r\n{noformat}\r\n{noformat:title=List installed services that support SSO integration only when Kerberos to be enabled}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true&ServiceInfo/sso_integration_requires_kerberos=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}\r\n{noformat}\r\n{noformat:title=List stack services that support SSO integration only when Kerberos is enabed}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/sso_integration_supported=true&StackServices/sso_integration_requires_kerberos=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}{noformat}\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #9682 (See [https://builds.apache.org/job/Ambari-trunk-Commit/9682/])\nAMBARI-24335. Updating service metainfo to declare if Kerberos is (github: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=0b7e8d0b0c9fc0e24e21a8de61ea1eb6e682092f])\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java\n\n", "issueSearchSentences": ["\"sso_integration_requires_kerberos\": \"true\",", "\"sso_integration_requires_kerberos\": \"true\",", "<kerberosRequired>true</kerberosRequired>", "\"sso_integration_supported\": \"true\",", "\"sso_integration_supported\": \"true\","], "issueSearchScores": [0.7807517051696777, 0.7807517051696777, 0.6709288358688354, 0.6558932065963745, 0.6558932065963745]}
{"aId": 38, "code": "protected void updateKerberosDescriptorArtifacts() throws AmbariException {\n    ArtifactDAO artifactDAO = injector.getInstance(ArtifactDAO.class);\n    List<ArtifactEntity> artifactEntities = artifactDAO.findByName(\"kerberos_descriptor\");\n\n    if (artifactEntities != null) {\n      for (ArtifactEntity artifactEntity : artifactEntities) {\n        updateKerberosDescriptorArtifact(artifactDAO, artifactEntity);\n      }\n    }\n  }", "comment": " Update the stored Kerberos Descriptor artifacts to conform to the new structure.", "issueId": "AMBARI-12356", "issueStringList": ["kinit of hdfs Kerberos identity fails when starting added service(s) after upgrade to Ambari 2.1.0", "STR:", "1.", "Install old version of ambari (2.0.1)", "2.", "Enable security", "3.", "Do Ambari only upgrade to ambari2.1.0", "4.", "Add some component - HiveServer2 or Ooozie server", "5.", "Try to start added component", "Actual result:", "Start have been failed.", "{code}", "Traceback (most recent call last):", "File \"/var/lib/ambari-agent/cache/common-", "services/HIVE/0.12.0.2.0/package/scripts/hive_server.py\", line 182, in <module>", "HiveServer().execute()", "File \"/usr/lib/python2.6/site-packages/resource_management/libraries/script/script.py\",", "line 216, in execute", "method(env)", "File \"/var/lib/ambari-agent/cache/common-", "services/HIVE/0.12.0.2.0/package/scripts/hive_server.py\", line 83, in start", "self.configure(env) # FOR SECURITY", "File \"/var/lib/ambari-agent/cache/common-", "services/HIVE/0.12.0.2.0/package/scripts/hive_server.py\", line 54, in configure", "hive(name='hiveserver2')", "File \"/usr/lib/python2.6/site-packages/ambari_commons/os_family_impl.py\", line 89, in", "thunk", "return fn(*args, **kwargs)", "File \"/var/lib/ambari-agent/cache/common-", "services/HIVE/0.12.0.2.0/package/scripts/hive.py\", line 127, in hive", "mode=params.webhcat_hdfs_user_mode", "File \"/usr/lib/python2.6/site-packages/resource_management/core/base.py\", line 157, in", "__init__", "self.env.run()", "File \"/usr/lib/python2.6/site-packages/resource_management/core/environment.py\", line", "152, in run", "self.run_action(resource, action)", "File \"/usr/lib/python2.6/site-packages/resource_management/core/environment.py\", line", "118, in run_action", "provider_action()", "File \"/usr/lib/python2.6/site-", "packages/resource_management/libraries/providers/hdfs_resource.py\", line 390, in", "action_create_on_execute", "self.action_delayed(\"create\")", "File \"/usr/lib/python2.6/site-", "packages/resource_management/libraries/providers/hdfs_resource.py\", line 387, in", "action_delayed", "self.get_hdfs_resource_executor().action_delayed(action_name, self)", "File \"/usr/lib/python2.6/site-", "packages/resource_management/libraries/providers/hdfs_resource.py\", line 236, in", "action_delayed", "main_resource.kinit()", "File \"/usr/lib/python2.6/site-", "packages/resource_management/libraries/providers/hdfs_resource.py\", line 416, in kinit", "user=user", "File \"/usr/lib/python2.6/site-packages/resource_management/core/base.py\", line 157, in", "__init__", "self.env.run()", "File \"/usr/lib/python2.6/site-packages/resource_management/core/environment.py\", line", "152, in run", "self.run_action(resource, action)", "File \"/usr/lib/python2.6/site-packages/resource_management/core/environment.py\", line", "118, in run_action", "provider_action()", "File \"/usr/lib/python2.6/site-packages/resource_management/core/providers/system.py\",", "line 254, in action_run", "tries=self.resource.tries, try_sleep=self.resource.try_sleep)", "File \"/usr/lib/python2.6/site-packages/resource_management/core/shell.py\", line 70, in", "inner", "result = function(command, **kwargs)", "File \"/usr/lib/python2.6/site-packages/resource_management/core/shell.py\", line 92, in", "checked_call", "tries=tries, try_sleep=try_sleep)", "File \"/usr/lib/python2.6/site-packages/resource_management/core/shell.py\", line 140, in", "_call_wrapper", "result = _call(command, **kwargs_copy)", "File \"/usr/lib/python2.6/site-packages/resource_management/core/shell.py\", line 291, in", "_call", "raise Fail(err_msg)", "resource_management.core.exceptions.Fail: Execution of '/usr/bin/kinit -kt", "etc/security/keytabs/hdfs.headless.keytab hdfs@EXAMPLE.COM' returned 1. kinit: Keytab", "contains no suitable keys for hdfs@EXAMPLE.COM while getting initial credentials", "{code}", "Expected results:", "Can start all added components.", "Cause*", "The Kerberos Descriptor structure changed between Ambari 2.0 and Ambari 2.1.", "This change moved the \"hdfs\" Kerberos identity descriptor from the _global_ scope to under the HDFS service.", "After upgrading from Ambari 2.0 to Ambari 2.1  an additional \"hdfs\" Kerberos identity descriptor was added with the new principal name pattern - $\\{hadoop-env/hdfs_user\\}-$\\{cluster_name\\}@$\\{realm\\}.", "This occurred because the stored Kerberos Descriptor contained the _old_ structure, and when Ambari generated a composite Kerberos Descriptor made up of the Kerberos Descriptor compiled from the relevant stack definition with stored changes applied, that additional \"hdfs\" Kerberos identity descriptor was added.", "Because if this, the Kerberos logic became _confused_ and overwrote the existing hdfs keytab file with one that contained the new principal name.", "Solution*", "While migrating Ambari 2.0 to Ambari 2.1, fix the stored Kerberos Descriptor structure to match the new version's structure.", "{color:green}+1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12744934/AMBARI-12356_01.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 4 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:green}+1 core tests{color}.", "The patch passed unit tests in ambari-server.", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/3393//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/3393//console", "This message is automatically generated.", "Committed to trunk", "{noformat}", "commit 8d00616b16b19506a5bd10ba9ed2b5787aae978c", "Author: Robert Levas <rlevas@hortonworks.com>", "Date:   Mon Jul 13 09:33:16 2015 -0400", "{noformat}", "Committed to branch-2.1", "{noformat}", "commit 8fc0380edcf6e01747148cd19b817c785d8679bb", "Author: Robert Levas <rlevas@hortonworks.com>", "Date:   Mon Jul 13 10:28:21 2015 -0400", "{noformat}", "SUCCESS: Integrated in Ambari-trunk-Commit #3108 (See [https://builds.apache.org/job/Ambari-trunk-Commit/3108/])", "AMBARI-12356.", "kinit of hdfs Kerberos identity fails when starting added service(s) after upgrade to Ambari 2.1.0 (rlevas) (rlevas: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=8d00616b16b19506a5bd10ba9ed2b5787aae978c)", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ArtifactDAO.java", "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java", "ambari-server/src/test/resources/kerberos/test_kerberos_descriptor_simple.json", "ambari-server/src/test/resources/kerberos/test_kerberos_descriptor_no_hdfs.json", "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ArtifactResourceProviderTest.java", "SUCCESS: Integrated in Ambari-branch-2.1 #219 (See [https://builds.apache.org/job/Ambari-branch-2.1/219/])", "AMBARI-12356.", "kinit of hdfs Kerberos identity fails when starting added service(s) after upgrade to Ambari 2.1.0 (rlevas) (rlevas: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=8fc0380edcf6e01747148cd19b817c785d8679bb)", "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java", "ambari-server/src/test/resources/kerberos/test_kerberos_descriptor_simple.json", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java", "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ArtifactResourceProviderTest.java", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java", "ambari-server/src/test/resources/kerberos/test_kerberos_descriptor_no_hdfs.json", "ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ArtifactDAO.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java"], "SplitGT": [" Update the stored Kerberos Descriptor artifacts to conform to the new structure."], "issueString": "kinit of hdfs Kerberos identity fails when starting added service(s) after upgrade to Ambari 2.1.0\nSTR:\n1. Install old version of ambari (2.0.1)\n2. Enable security\n3. Do Ambari only upgrade to ambari2.1.0\n4. Add some component - HiveServer2 or Ooozie server\n5. Try to start added component\n\nActual result:\nStart have been failed. \n\n{code}\nTraceback (most recent call last):\n  File \"/var/lib/ambari-agent/cache/common-\n\nservices/HIVE/0.12.0.2.0/package/scripts/hive_server.py\", line 182, in <module>\n    HiveServer().execute()\n  File \"/usr/lib/python2.6/site-packages/resource_management/libraries/script/script.py\", \n\nline 216, in execute\n    method(env)\n  File \"/var/lib/ambari-agent/cache/common-\n\nservices/HIVE/0.12.0.2.0/package/scripts/hive_server.py\", line 83, in start\n    self.configure(env) # FOR SECURITY\n  File \"/var/lib/ambari-agent/cache/common-\n\nservices/HIVE/0.12.0.2.0/package/scripts/hive_server.py\", line 54, in configure\n    hive(name='hiveserver2')\n  File \"/usr/lib/python2.6/site-packages/ambari_commons/os_family_impl.py\", line 89, in \n\nthunk\n    return fn(*args, **kwargs)\n  File \"/var/lib/ambari-agent/cache/common-\n\nservices/HIVE/0.12.0.2.0/package/scripts/hive.py\", line 127, in hive\n    mode=params.webhcat_hdfs_user_mode\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/base.py\", line 157, in \n\n__init__\n    self.env.run()\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/environment.py\", line \n\n152, in run\n    self.run_action(resource, action)\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/environment.py\", line \n\n118, in run_action\n    provider_action()\n  File \"/usr/lib/python2.6/site-\n\npackages/resource_management/libraries/providers/hdfs_resource.py\", line 390, in \n\naction_create_on_execute\n    self.action_delayed(\"create\")\n  File \"/usr/lib/python2.6/site-\n\npackages/resource_management/libraries/providers/hdfs_resource.py\", line 387, in \n\naction_delayed\n    self.get_hdfs_resource_executor().action_delayed(action_name, self)\n  File \"/usr/lib/python2.6/site-\n\npackages/resource_management/libraries/providers/hdfs_resource.py\", line 236, in \n\naction_delayed\n    main_resource.kinit()\n  File \"/usr/lib/python2.6/site-\n\npackages/resource_management/libraries/providers/hdfs_resource.py\", line 416, in kinit\n    user=user\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/base.py\", line 157, in \n\n__init__\n    self.env.run()\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/environment.py\", line \n\n152, in run\n    self.run_action(resource, action)\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/environment.py\", line \n\n118, in run_action\n    provider_action()\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/providers/system.py\", \n\nline 254, in action_run\n    tries=self.resource.tries, try_sleep=self.resource.try_sleep)\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/shell.py\", line 70, in \n\ninner\n    result = function(command, **kwargs)\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/shell.py\", line 92, in \n\nchecked_call\n    tries=tries, try_sleep=try_sleep)\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/shell.py\", line 140, in \n\n_call_wrapper\n    result = _call(command, **kwargs_copy)\n  File \"/usr/lib/python2.6/site-packages/resource_management/core/shell.py\", line 291, in \n\n_call\n    raise Fail(err_msg)\nresource_management.core.exceptions.Fail: Execution of '/usr/bin/kinit -kt \n\n/etc/security/keytabs/hdfs.headless.keytab hdfs@EXAMPLE.COM' returned 1. kinit: Keytab \n\ncontains no suitable keys for hdfs@EXAMPLE.COM while getting initial credentials\n{code}\n\n\nExpected results:\nCan start all added components.\n\n*Cause*\nThe Kerberos Descriptor structure changed between Ambari 2.0 and Ambari 2.1.  This change moved the \"hdfs\" Kerberos identity descriptor from the _global_ scope to under the HDFS service. After upgrading from Ambari 2.0 to Ambari 2.1  an additional \"hdfs\" Kerberos identity descriptor was added with the new principal name pattern - $\\{hadoop-env/hdfs_user\\}-$\\{cluster_name\\}@$\\{realm\\}.  This occurred because the stored Kerberos Descriptor contained the _old_ structure, and when Ambari generated a composite Kerberos Descriptor made up of the Kerberos Descriptor compiled from the relevant stack definition with stored changes applied, that additional \"hdfs\" Kerberos identity descriptor was added.  Because if this, the Kerberos logic became _confused_ and overwrote the existing hdfs keytab file with one that contained the new principal name.\n\n*Solution*\nWhile migrating Ambari 2.0 to Ambari 2.1, fix the stored Kerberos Descriptor structure to match the new version's structure.\n\n{color:green}+1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12744934/AMBARI-12356_01.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in ambari-server.\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/3393//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/3393//console\n\nThis message is automatically generated.\nCommitted to trunk\n{noformat}\ncommit 8d00616b16b19506a5bd10ba9ed2b5787aae978c\nAuthor: Robert Levas <rlevas@hortonworks.com>\nDate:   Mon Jul 13 09:33:16 2015 -0400\n{noformat}\n\nCommitted to branch-2.1\n{noformat}\ncommit 8fc0380edcf6e01747148cd19b817c785d8679bb\nAuthor: Robert Levas <rlevas@hortonworks.com>\nDate:   Mon Jul 13 10:28:21 2015 -0400\n{noformat}\n\nSUCCESS: Integrated in Ambari-trunk-Commit #3108 (See [https://builds.apache.org/job/Ambari-trunk-Commit/3108/])\nAMBARI-12356. kinit of hdfs Kerberos identity fails when starting added service(s) after upgrade to Ambari 2.1.0 (rlevas) (rlevas: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=8d00616b16b19506a5bd10ba9ed2b5787aae978c)\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java\n* ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java\n* ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ArtifactDAO.java\n* ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java\n* ambari-server/src/test/resources/kerberos/test_kerberos_descriptor_simple.json\n* ambari-server/src/test/resources/kerberos/test_kerberos_descriptor_no_hdfs.json\n* ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ArtifactResourceProviderTest.java\n\nSUCCESS: Integrated in Ambari-branch-2.1 #219 (See [https://builds.apache.org/job/Ambari-branch-2.1/219/])\nAMBARI-12356. kinit of hdfs Kerberos identity fails when starting added service(s) after upgrade to Ambari 2.1.0 (rlevas) (rlevas: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=8fc0380edcf6e01747148cd19b817c785d8679bb)\n* ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java\n* ambari-server/src/test/resources/kerberos/test_kerberos_descriptor_simple.json\n* ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java\n* ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ArtifactResourceProviderTest.java\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java\n* ambari-server/src/test/resources/kerberos/test_kerberos_descriptor_no_hdfs.json\n* ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ArtifactDAO.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java\n\n", "issueSearchSentences": ["While migrating Ambari 2.0 to Ambari 2.1, fix the stored Kerberos Descriptor structure to match the new version's structure.", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java", "After upgrading from Ambari 2.0 to Ambari 2.1  an additional \"hdfs\" Kerberos identity descriptor was added with the new principal name pattern - $\\{hadoop-env/hdfs_user\\}-$\\{cluster_name\\}@$\\{realm\\}.", "The Kerberos Descriptor structure changed between Ambari 2.0 and Ambari 2.1."], "issueSearchScores": [0.5597702264785767, 0.5542882084846497, 0.5542882084846497, 0.5178035497665405, 0.5027637481689453]}
{"aId": 40, "code": "@ApiModelProperty(name = \"sso_integration_requires_kerberos\")\n  public boolean isSsoIntegrationRequiresKerberos() {\n    return ssoIntegrationRequiresKerberos;\n  }", "comment": " Indicates if Kerberos is required for SSO integration", "issueId": "AMBARI-24335", "issueStringList": ["Update service metainfo to declare Kerberos is required for SSO integration support", "Update service metainfo to declare Kerberos is required for SSO integration support.", "The metainfo file allow for a service to indicate that is supports SSO integration.", "{code:java|title=Example}", "<sso>", "<supported>true</supported>", "<enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>", "</sso>", "{code}", "However, some services required that Kerberos is enabled to support SSO.", "This needs to be indicated in the metainfo so that Ambari knows how to behave properly.", "{code:java|title=Example}", "<sso>", "<supported>true</supported>", "<enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>", "<kerberosRequired>true</kerberosRequired>", "</sso>", "{code}", "Along with this change, the following API request needs to be updated to supply the relevant data:", "{noformat:title=Get stack service details}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",", "{", "\"href\" : \":URL\",", "\"StackServices\" : {", "...", "\"sso_integration_supported\": \"true\",", "\"sso_integration_requires_kerberos\": \"true\",", "...", "},", "...", "{noformat}", "{noformat:title=Get installed service information}", "GET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME", "{", "\"href\" : \":URL\",", "\"ServiceInfo\" : {", "\"cluster_name\" : \":CLUSTER_NAME\",", "...", "\"sso_integration_supported\": \"true\",", "\"sso_integration_requires_kerberos\": \"true\",", "\"sso_integration_enabled\": \"false\",", "\"sso_integration_desired\": \"false\",", "...", "},", "...", "{noformat}", "{noformat:title=List installed services that support SSO integration only when Kerberos to be enabled}", "GET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true&ServiceInfo/sso_integration_requires_kerberos=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}", "{noformat}", "{noformat:title=List stack services that support SSO integration only when Kerberos is enabed}", "GET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/sso_integration_supported=true&StackServices/sso_integration_requires_kerberos=true", "{", "\"href\" : \":URL\",", "\"items\" : [", "...", "]", "}{noformat}", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #9682 (See [https://builds.apache.org/job/Ambari-trunk-Commit/9682/])", "AMBARI-24335.", "Updating service metainfo to declare if Kerberos is (github: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=0b7e8d0b0c9fc0e24e21a8de61ea1eb6e682092f])", "(edit) ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java"], "SplitGT": [" Indicates if Kerberos is required for SSO integration"], "issueString": "Update service metainfo to declare Kerberos is required for SSO integration support\nUpdate service metainfo to declare Kerberos is required for SSO integration support.\r\n\r\nThe metainfo file allow for a service to indicate that is supports SSO integration.\r\n{code:java|title=Example}\r\n      <sso>\r\n        <supported>true</supported>\r\n        <enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>\r\n      </sso>\r\n{code}\r\nHowever, some services required that Kerberos is enabled to support SSO. This needs to be indicated in the metainfo so that Ambari knows how to behave properly.\r\n{code:java|title=Example}\r\n      <sso>\r\n        <supported>true</supported>\r\n        <enabledConfiguration>service-site/knox.sso.enabled</enabledConfiguration>\r\n        <kerberosRequired>true</kerberosRequired>\r\n      </sso>\r\n{code}\r\nAlong with this change, the following API request needs to be updated to supply the relevant data:\r\n{noformat:title=Get stack service details}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services/:SERVICE_NAME\",\r\n{\r\n  \"href\" : \":URL\",\r\n  \"StackServices\" : {\r\n     ...\r\n     \"sso_integration_supported\": \"true\",\r\n     \"sso_integration_requires_kerberos\": \"true\",\r\n     ...\r\n  },\r\n  ...\r\n{noformat}\r\n{noformat:title=Get installed service information}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services/:SERVICE_NAME\r\n{\r\n  \"href\" : \":URL\",\r\n  \"ServiceInfo\" : {\r\n    \"cluster_name\" : \":CLUSTER_NAME\",\r\n    ...\r\n    \"sso_integration_supported\": \"true\",\r\n    \"sso_integration_requires_kerberos\": \"true\",\r\n    \"sso_integration_enabled\": \"false\",\r\n    \"sso_integration_desired\": \"false\",\r\n     ...\r\n    },\r\n    ...\r\n{noformat}\r\n{noformat:title=List installed services that support SSO integration only when Kerberos to be enabled}\r\nGET /api/v1/clusters/:CLUSTER_NAME/services?ServiceInfo/sso_integration_supported=true&ServiceInfo/sso_integration_requires_kerberos=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}\r\n{noformat}\r\n{noformat:title=List stack services that support SSO integration only when Kerberos is enabed}\r\nGET /api/v1/stacks/:STACK_NAME/versions/:VERSION/services?StackServices/sso_integration_supported=true&StackServices/sso_integration_requires_kerberos=true\r\n{\r\n  \"href\" : \":URL\",\r\n  \"items\" : [\r\n      ...\r\n   ]\r\n}{noformat}\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #9682 (See [https://builds.apache.org/job/Ambari-trunk-Commit/9682/])\nAMBARI-24335. Updating service metainfo to declare if Kerberos is (github: [https://gitbox.apache.org/repos/asf?p=ambari.git&a=commit&h=0b7e8d0b0c9fc0e24e21a8de61ea1eb6e682092f])\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java\n\n", "issueSearchSentences": ["\"sso_integration_requires_kerberos\": \"true\",", "\"sso_integration_requires_kerberos\": \"true\",", "<kerberosRequired>true</kerberosRequired>", "\"sso_integration_supported\": \"true\",", "\"sso_integration_supported\": \"true\","], "issueSearchScores": [0.7807517051696777, 0.7807517051696777, 0.6709288358688354, 0.6558932065963745, 0.6558932065963745]}
{"aId": 42, "code": "public static void checkTopologyTables() {\n    LOG.info(\"Checking Topology tables\");\n\n    String SELECT_REQUEST_COUNT_QUERY = \"select count(tpr.id) from topology_request tpr\";\n\n    String SELECT_JOINED_COUNT_QUERY = \"select count(DISTINCT tpr.id) from topology_request tpr join \" +\n      \"topology_logical_request tlr on tpr.id = tlr.request_id join topology_host_request thr on tlr.id = \" +\n      \"thr.logical_request_id join topology_host_task tht on thr.id = tht.host_request_id join topology_logical_task \" +\n      \"tlt on tht.id = tlt.host_task_id\";\n\n    int topologyRequestCount = 0;\n    int topologyRequestTablesJoinedCount = 0;\n\n    ResultSet rs = null;\n    Statement statement = null;\n\n    if (connection == null) {\n      if (dbAccessor == null) {\n        dbAccessor = injector.getInstance(DBAccessor.class);\n      }\n      connection = dbAccessor.getConnection();\n    }\n\n    try {\n      statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n\n      rs = statement.executeQuery(SELECT_REQUEST_COUNT_QUERY);\n      if (rs != null) {\n        while (rs.next()) {\n          topologyRequestCount = rs.getInt(1);\n        }\n      }\n\n      rs = statement.executeQuery(SELECT_JOINED_COUNT_QUERY);\n      if (rs != null) {\n        while (rs.next()) {\n          topologyRequestTablesJoinedCount = rs.getInt(1);\n        }\n      }\n\n      if (topologyRequestCount != topologyRequestTablesJoinedCount) {\n        LOG.error(\"Your topology request hierarchy is not complete for each row in topology_request should exist \" +\n          \"at least one raw in topology_logical_request, topology_host_request, topology_host_task, \" +\n          \"topology_logical_task.\");\n        errorsFound = true;\n      }\n\n\n    } catch (SQLException e) {\n      LOG.error(\"Exception occurred during topology request tables check: \", e);\n    } finally {\n      if (rs != null) {\n        try {\n          rs.close();\n        } catch (SQLException e) {\n          LOG.error(\"Exception occurred during result set closing procedure: \", e);\n        }\n      }\n\n      if (statement != null) {\n        try {\n          statement.close();\n        } catch (SQLException e) {\n          LOG.error(\"Exception occurred during statement closing procedure: \", e);\n        }\n      }\n    }\n\n  }", "comment": " This method checks that for each row in topology_request there is at least one row in topology_logical_request, topology_host_request, topology_host_task, topology_logical_task.", "issueId": "AMBARI-19824", "issueStringList": ["Add consistency checker for blueprint tables", "Additional check for topolgy tables: check that for each row in topology_request there is at least one row in topology_logical_request,", "topology_host_request, topology_host_task, topology_logical_task.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12850673/AMBARI-19824.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 1 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.serveraction.upgrades.UpgradeActionTest", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/10390//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/10390//console", "This message is automatically generated.", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #6638 (See [https://builds.apache.org/job/Ambari-trunk-Commit/6638/])", "AMBARI-19824.", "Add consistency checker for blueprint tables (smagyari: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=4ad3a2b3611a38aeea3d64411feec8776a6af554])", "(edit) ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java", "FAILURE: Integrated in Jenkins build Ambari-branch-2.5 #897 (See [https://builds.apache.org/job/Ambari-branch-2.5/897/])", "AMBARI-19824.", "Add consistency checker for blueprint tables (smagyari: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=7eac12f20dd46c0a4b6d705b045998d49840a575])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java", "Committed to trunk, branch-2.5.", "UT failures not related to this patch."], "SplitGT": [" This method checks that for each row in topology_request there is at least one row in topology_logical_request, topology_host_request, topology_host_task, topology_logical_task."], "issueString": "Add consistency checker for blueprint tables\nAdditional check for topolgy tables: check that for each row in topology_request there is at least one row in topology_logical_request,\ntopology_host_request, topology_host_task, topology_logical_task.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12850673/AMBARI-19824.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.serveraction.upgrades.UpgradeActionTest\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/10390//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/10390//console\n\nThis message is automatically generated.\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #6638 (See [https://builds.apache.org/job/Ambari-trunk-Commit/6638/])\nAMBARI-19824. Add consistency checker for blueprint tables (smagyari: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=4ad3a2b3611a38aeea3d64411feec8776a6af554])\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java\n\nFAILURE: Integrated in Jenkins build Ambari-branch-2.5 #897 (See [https://builds.apache.org/job/Ambari-branch-2.5/897/])\nAMBARI-19824. Add consistency checker for blueprint tables (smagyari: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=7eac12f20dd46c0a4b6d705b045998d49840a575])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java\n\nCommitted to trunk, branch-2.5. UT failures not related to this patch.\n", "issueSearchSentences": ["Additional check for topolgy tables: check that for each row in topology_request there is at least one row in topology_logical_request,", "topology_host_request, topology_host_task, topology_logical_task.", "Add consistency checker for blueprint tables", "Add consistency checker for blueprint tables (smagyari: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=7eac12f20dd46c0a4b6d705b045998d49840a575])", "Add consistency checker for blueprint tables (smagyari: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=4ad3a2b3611a38aeea3d64411feec8776a6af554])"], "issueSearchScores": [0.8114226460456848, 0.542996883392334, 0.48159468173980713, 0.4794183373451233, 0.47571712732315063]}
{"aId": 43, "code": "private void migrateLdapUsersGroups() throws SQLException {\n    if (dbAccessor.getDbType() != DbType.ORACLE) { // Tested MYSQL, POSTGRES && MYSQL)\n      dbAccessor.executeQuery(\"UPDATE users SET user_type='PAM',ldap_user=0 WHERE ldap_user=1 and user_name not in (select user_name from (select user_name from users where user_type = 'PAM') as a)\");\n      dbAccessor.executeQuery(\"UPDATE groups SET group_type='PAM',ldap_group=0 WHERE ldap_group=1 and group_name not in (select group_name from (select group_name from groups where group_type = 'PAM') as a)\");\n    } else { // Tested ORACLE\n      dbAccessor.executeQuery(\"UPDATE users SET user_type='PAM',ldap_user=0 WHERE ldap_user=1 and user_name not in (select user_name from users where user_type = 'PAM')\");\n      dbAccessor.executeQuery(\"UPDATE groups SET group_type='PAM',ldap_group=0 WHERE ldap_group=1 and group_name not in (select group_name from groups where group_type = 'PAM')\");\n    }\n  }", "comment": " Migrate LDAP user & groups to PAM", "issueId": "AMBARI-19038", "issueStringList": ["Support migration of LDAP users & groups to PAM", "After PAM has been declared as the authentication mechanism for Ambari clients (for example, the Ambari Server web-based UI) where previously the mechanism was LDAP, a migration process is needed to converts the LDAP users and groups to PAM users and groups.", "This facility may be invoked using:", "{noformat}", "ambari-server migrate-ldap-pam", "{noformat}", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12841382/AMBARI-19038.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:red}-1 tests included{color}.", "The patch doesn't appear to include any new or modified tests.", "Please justify why no new tests are needed for this patch.", "Also please list what manual steps were performed to verify this patch.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.state.ServicePropertiesTest", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/9491//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/9491//console", "This message is automatically generated.", "[~ghugare], I believe that this JIRA has been orphaned.", "However the topic has been restarted and I have a patch that contains much of the code from the original patch, plus changes for Ambari 2.5.", "Do you mind if I take this JIRA over?", "Cancelling the out-dated patch for this.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12877104/AMBARI-19038_branch-2.5_01.patch", "against trunk revision .", "{color:red}-1 patch{color}.", "The patch command could not apply the patch.", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/11786//console", "This message is automatically generated.", "Committed to branch-2.5", "{noformat}", "commit 13a6fa84542e9f69f85c171007b73636f5130a09", "Author: Robert Levas <rlevas@hortonworks.com>", "Date:   Fri Jul 14 09:57:35 2017 -0400", "{noformat}", "SUCCESS: Integrated in Jenkins build Ambari-branch-2.5 #1688 (See [https://builds.apache.org/job/Ambari-branch-2.5/1688/])", "AMBARI-19038.", "Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=13a6fa84542e9f69f85c171007b73636f5130a09])", "(edit) ambari-server/pom.xml", "(edit) ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java", "(edit) ambari-server/src/main/python/ambari-server.py", "(edit) ambari-server/sbin/ambari-server", "(add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java", "(edit) ambari-server/src/main/python/ambari_server/setupSecurity.py", "(edit) ambari-server/src/main/python/ambari_server/setupActions.py", "(edit) ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/groups/GroupsEditCtrl.js", "Committed to trunk", "{noformat}", "commit f7fac03778fda337bc96ed49ed7507e1af118b7d", "Author: Robert Levas <rlevas@hortonworks.com>", "Date:   Fri Jul 14 10:47:17 2017 -0400", "{noformat}", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7763 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7763/])", "AMBARI-19038.", "Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f7fac03778fda337bc96ed49ed7507e1af118b7d])", "(edit) ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/groups/GroupsEditCtrl.js", "(edit) ambari-server/src/main/python/ambari_server/setupActions.py", "(edit) ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java", "(add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java", "(edit) ambari-server/pom.xml", "(edit) ambari-server/sbin/ambari-server", "(edit) ambari-server/src/main/python/ambari-server.py", "(edit) ambari-server/src/main/python/ambari_server/setupSecurity.py"], "SplitGT": [" Migrate LDAP user & groups to PAM"], "issueString": "Support migration of LDAP users & groups to PAM\nAfter PAM has been declared as the authentication mechanism for Ambari clients (for example, the Ambari Server web-based UI) where previously the mechanism was LDAP, a migration process is needed to converts the LDAP users and groups to PAM users and groups.  \n\nThis facility may be invoked using:\n\n{noformat}\nambari-server migrate-ldap-pam\n{noformat}\n\n\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12841382/AMBARI-19038.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.\n                        Please justify why no new tests are needed for this patch.\n                        Also please list what manual steps were performed to verify this patch.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.state.ServicePropertiesTest\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/9491//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/9491//console\n\nThis message is automatically generated.\n[~ghugare], I believe that this JIRA has been orphaned. However the topic has been restarted and I have a patch that contains much of the code from the original patch, plus changes for Ambari 2.5.  Do you mind if I take this JIRA over?\n\nCancelling the out-dated patch for this. \n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12877104/AMBARI-19038_branch-2.5_01.patch\n  against trunk revision .\n\n    {color:red}-1 patch{color}.  The patch command could not apply the patch.\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/11786//console\n\nThis message is automatically generated.\nCommitted to branch-2.5\n\n{noformat}\ncommit 13a6fa84542e9f69f85c171007b73636f5130a09\nAuthor: Robert Levas <rlevas@hortonworks.com>\nDate:   Fri Jul 14 09:57:35 2017 -0400\n{noformat}\nSUCCESS: Integrated in Jenkins build Ambari-branch-2.5 #1688 (See [https://builds.apache.org/job/Ambari-branch-2.5/1688/])\nAMBARI-19038. Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=13a6fa84542e9f69f85c171007b73636f5130a09])\n* (edit) ambari-server/pom.xml\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java\n* (edit) ambari-server/src/main/python/ambari-server.py\n* (edit) ambari-server/sbin/ambari-server\n* (add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java\n* (edit) ambari-server/src/main/python/ambari_server/setupSecurity.py\n* (edit) ambari-server/src/main/python/ambari_server/setupActions.py\n* (edit) ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/groups/GroupsEditCtrl.js\n\nCommitted to trunk\n\n{noformat}\ncommit f7fac03778fda337bc96ed49ed7507e1af118b7d\nAuthor: Robert Levas <rlevas@hortonworks.com>\nDate:   Fri Jul 14 10:47:17 2017 -0400\n{noformat}\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #7763 (See [https://builds.apache.org/job/Ambari-trunk-Commit/7763/])\nAMBARI-19038. Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f7fac03778fda337bc96ed49ed7507e1af118b7d])\n* (edit) ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/groups/GroupsEditCtrl.js\n* (edit) ambari-server/src/main/python/ambari_server/setupActions.py\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java\n* (add) ambari-server/src/main/java/org/apache/ambari/server/security/authentication/LdapToPamMigrationHelper.java\n* (edit) ambari-server/pom.xml\n* (edit) ambari-server/sbin/ambari-server\n* (edit) ambari-server/src/main/python/ambari-server.py\n* (edit) ambari-server/src/main/python/ambari_server/setupSecurity.py\n\n", "issueSearchSentences": ["Support migration of LDAP users & groups to PAM", "Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f7fac03778fda337bc96ed49ed7507e1af118b7d])", "Support migration of LDAP users & groups to PAM (rlevas) (rlevas: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=13a6fa84542e9f69f85c171007b73636f5130a09])", "After PAM has been declared as the authentication mechanism for Ambari clients (for example, the Ambari Server web-based UI) where previously the mechanism was LDAP, a migration process is needed to converts the LDAP users and groups to PAM users and groups.", "ambari-server migrate-ldap-pam"], "issueSearchScores": [0.6721371412277222, 0.6241495609283447, 0.6208176016807556, 0.590644121170044, 0.5675725936889648]}
{"aId": 45, "code": "public Integer getAgentApiAcceptors() {\n    String acceptors = getProperty(SRVR_AGENT_ACCEPTOR_THREAD_COUNT);\n    return StringUtils.isEmpty(acceptors) ? null : Integer.parseInt(acceptors);\n  }", "comment": " Return configured acceptors for agent api connector.", "issueId": "AMBARI-18827", "issueStringList": ["Allow acceptor / seclector configuration for API and agent connectors", "_Objectives_:", "Allow acceptors for agent and api connectors to be configurable", "The thread pool configuration did not take into account both 2-way and 1-way connectors are configured for agent every time although only one is used and not a mixed-mode.", "This causes insufficient threads in agent threadpool for a high cpu core environment.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12838235/AMBARI-18827.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 1 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:red}-1 core tests{color}.", "The patch failed these unit tests in ambari-server:", "org.apache.ambari.server.controller.internal.UpgradeResourceProviderTest", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/9206//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/9206//console", "This message is automatically generated.", "Pushed to 2.5 and trunk.", "FAILURE: Integrated in Jenkins build Ambari-trunk-Commit #6007 (See [https://builds.apache.org/job/Ambari-trunk-Commit/6007/])", "AMBARI-18827.", "Allow acceptor / seclector configuration for API and agent (swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=4d7d3cdc6380db63bf9b1b221f548cd4470e2a51])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java", "(edit) ambari-server/docs/configuration/index.md", "(edit) ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/security/unsecured/rest/ConnectionInfo.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java", "FAILURE: Integrated in Jenkins build Ambari-branch-2.5 #318 (See [https://builds.apache.org/job/Ambari-branch-2.5/318/])", "AMBARI-18827.", "Allow acceptor / seclector configuration for API and agent (swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=2094dc406dd3ffd2785dc4b39f7e240724531e6a])", "(edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java", "(edit) ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java", "(edit) ambari-server/src/main/java/org/apache/ambari/server/security/unsecured/rest/ConnectionInfo.java", "(edit) ambari-server/docs/configuration/index.md"], "SplitGT": [" Return configured acceptors for agent api connector."], "issueString": "Allow acceptor / seclector configuration for API and agent connectors\n_Objectives_:\n- Allow acceptors for agent and api connectors to be configurable\n- The thread pool configuration did not take into account both 2-way and 1-way connectors are configured for agent every time although only one is used and not a mixed-mode. This causes insufficient threads in agent threadpool for a high cpu core environment.\n\n\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12838235/AMBARI-18827.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in ambari-server:\n\n                  org.apache.ambari.server.controller.internal.UpgradeResourceProviderTest\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/9206//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/9206//console\n\nThis message is automatically generated.\nPushed to 2.5 and trunk.\nFAILURE: Integrated in Jenkins build Ambari-trunk-Commit #6007 (See [https://builds.apache.org/job/Ambari-trunk-Commit/6007/])\nAMBARI-18827. Allow acceptor / seclector configuration for API and agent (swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=4d7d3cdc6380db63bf9b1b221f548cd4470e2a51])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java\n* (edit) ambari-server/docs/configuration/index.md\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/security/unsecured/rest/ConnectionInfo.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java\n\nFAILURE: Integrated in Jenkins build Ambari-branch-2.5 #318 (See [https://builds.apache.org/job/Ambari-branch-2.5/318/])\nAMBARI-18827. Allow acceptor / seclector configuration for API and agent (swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=2094dc406dd3ffd2785dc4b39f7e240724531e6a])\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java\n* (edit) ambari-server/src/test/java/org/apache/ambari/server/configuration/ConfigurationTest.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java\n* (edit) ambari-server/src/main/java/org/apache/ambari/server/security/unsecured/rest/ConnectionInfo.java\n* (edit) ambari-server/docs/configuration/index.md\n\n", "issueSearchSentences": ["Allow acceptor / seclector configuration for API and agent (swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=2094dc406dd3ffd2785dc4b39f7e240724531e6a])", "Allow acceptor / seclector configuration for API and agent (swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=4d7d3cdc6380db63bf9b1b221f548cd4470e2a51])", "Allow acceptors for agent and api connectors to be configurable", "Allow acceptor / seclector configuration for API and agent connectors", "AMBARI-18827."], "issueSearchScores": [0.45051074028015137, 0.4478505253791809, 0.4383564591407776, 0.38268494606018066, 0.37476783990859985]}
{"aId": 46, "code": "private void validateHostMappings(Map<String, HostGroup> hostGroups) {\n    Collection<String> mappedHosts = new HashSet<String>();\n    Collection<String> flaggedHosts = new HashSet<String>();\n\n    for (HostGroup hostgroup : hostGroups.values()) {\n      for (String host : hostgroup.getHostInfo()) {\n        if (mappedHosts.contains(host)) {\n          flaggedHosts.add(host);\n        } else {\n          mappedHosts.add(host);\n        }\n      }\n    }\n\n    if (! flaggedHosts.isEmpty())  {\n      throw new IllegalArgumentException(\"A host may only be mapped to a single host group at this time.\" +\n                                         \"  The following hosts are mapped to more than one host group: \" +\n                                         flaggedHosts);\n    }\n  }", "comment": " Validate that a host is only mapped to a single host group.", "issueId": "AMBARI-5618", "issueStringList": ["Validate that a host is only associated with a single host group when provisioning via a blueprint", "When provisioning a cluster via a blueprint, there currently is a restriction that a host may only be associated with a single host group.", "If a user attempts to map a host to multiple host groups, strange errors are reported back to the user which do not explain the problem.", "This work will validate that a host is only mapped to one host group early and will provide a good error message to the user if there is an attempt to map multiple host groups to a host.", "{", "\"status\" : 400,", "\"message\" : \"A host may only be mapped to a single host group at this time.", "The following hosts are mapped to more than one host group: [john2.novalocal]\"", "}", "merged to trunk and branch-1.6.0"], "SplitGT": [" Validate that a host is only mapped to a single host group."], "issueString": "Validate that a host is only associated with a single host group when provisioning via a blueprint\nWhen provisioning a cluster via a blueprint, there currently is a restriction that a host may only be associated with a single host group.  If a user attempts to map a host to multiple host groups, strange errors are reported back to the user which do not explain the problem.\n\nThis work will validate that a host is only mapped to one host group early and will provide a good error message to the user if there is an attempt to map multiple host groups to a host.\n\n{\n  \"status\" : 400,\n  \"message\" : \"A host may only be mapped to a single host group at this time.  The following hosts are mapped to more than one host group: [john2.novalocal]\"\n} \nmerged to trunk and branch-1.6.0\n", "issueSearchSentences": ["This work will validate that a host is only mapped to one host group early and will provide a good error message to the user if there is an attempt to map multiple host groups to a host.", "Validate that a host is only associated with a single host group when provisioning via a blueprint", "If a user attempts to map a host to multiple host groups, strange errors are reported back to the user which do not explain the problem.", "The following hosts are mapped to more than one host group: [john2.novalocal]\"", "\"message\" : \"A host may only be mapped to a single host group at this time."], "issueSearchScores": [0.8359938859939575, 0.7674157619476318, 0.7274928092956543, 0.7023842334747314, 0.5952800512313843]}
{"aId": 48, "code": "public boolean isSkipBlockCacheForAggregatorsEnabled() {\n    return skipBlockCacheForAggregatorsEnabled;\n  }", "comment": " Provide skip block cache hint for aggregator queries.", "issueId": "AMBARI-14598", "issueStringList": ["Provide ability to skip block cache on aggregator queries", "AMS block cache utilization for metrics data can be optimized with respect to user queries vs aggregators to free up block cache usage.", "{color:red}-1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12781360/AMBARI-14598.patch", "against trunk revision .", "{color:red}-1 patch{color}.", "Top-level trunk compilation may be broken.", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/4834//console", "This message is automatically generated.", "Pushed to trunk.", "SUCCESS: Integrated in Ambari-trunk-Commit #4165 (See [https://builds.apache.org/job/Ambari-trunk-Commit/4165/])", "AMBARI-14598.", "Provide ability to skip block cache on aggregator queries.", "(swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=c7c1206a99b414712c61936c015bd27cad6e4e0e])", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/v2/TimelineMetricClusterAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricHostAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/v2/TimelineMetricHostAggregator.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricConfiguration.java", "ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-site.xml", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java"], "SplitGT": [" Provide skip block cache hint for aggregator queries."], "issueString": "Provide ability to skip block cache on aggregator queries\nAMS block cache utilization for metrics data can be optimized with respect to user queries vs aggregators to free up block cache usage.\n{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12781360/AMBARI-14598.patch\n  against trunk revision .\n\n    {color:red}-1 patch{color}.  Top-level trunk compilation may be broken.\n\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/4834//console\n\nThis message is automatically generated.\nPushed to trunk.\nSUCCESS: Integrated in Ambari-trunk-Commit #4165 (See [https://builds.apache.org/job/Ambari-trunk-Commit/4165/])\nAMBARI-14598. Provide ability to skip block cache on aggregator queries. (swagle: [http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=c7c1206a99b414712c61936c015bd27cad6e4e0e])\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/v2/TimelineMetricClusterAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricHostAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/v2/TimelineMetricHostAggregator.java\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/TimelineMetricConfiguration.java\n* ambari-server/src/main/resources/common-services/AMBARI_METRICS/0.1.0/configuration/ams-site.xml\n* ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java\n\n", "issueSearchSentences": ["Provide ability to skip block cache on aggregator queries.", "Provide ability to skip block cache on aggregator queries", "AMS block cache utilization for metrics data can be optimized with respect to user queries vs aggregators to free up block cache usage.", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java", "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregator.java"], "issueSearchScores": [0.511493444442749, 0.47355329990386963, 0.4303818643093109, 0.2727719247341156, 0.26885467767715454]}
{"aId": 49, "code": "public void setBuild(String build) {\n    this.build = build;\n  }", "comment": " Set the view build number.", "issueId": "AMBARI-11814", "issueStringList": ["Views : Update view.xml xsd to allow for optional build-number", "The view.xml xsd should allow view.xml to optionally contain <build> for the view build number.", "The build number should also be exposed through the REST API when introspecting a view or view instance.", "SUCCESS: Integrated in Ambari-trunk-Commit #2868 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2868/])", "AMBARI-11814 - Views : Update view.xml xsd to allow for optional build-number (tbeerbower) (tbeerbower: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=5240ca45e65a01f4006226aee9a4f6b4e95f9e8d)", "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java", "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql", "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql", "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql", "ambari-views/examples/phone-list-view/src/main/resources/view.xml", "ambari-server/src/test/java/org/apache/ambari/server/orm/entities/ViewEntityTest.java", "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java", "ambari-views/src/main/java/org/apache/ambari/view/ViewDefinition.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewVersionResourceProvider.java", "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql", "ambari-server/src/test/java/org/apache/ambari/server/view/configuration/ViewConfigTest.java", "ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql", "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewEntity.java", "ambari-views/src/main/resources/view.xsd", "ambari-server/src/main/java/org/apache/ambari/server/view/configuration/ViewConfig.java"], "SplitGT": [" Set the view build number."], "issueString": "Views : Update view.xml xsd to allow for optional build-number\nThe view.xml xsd should allow view.xml to optionally contain <build> for the view build number.\n\nThe build number should also be exposed through the REST API when introspecting a view or view instance.\nSUCCESS: Integrated in Ambari-trunk-Commit #2868 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2868/])\nAMBARI-11814 - Views : Update view.xml xsd to allow for optional build-number (tbeerbower) (tbeerbower: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=5240ca45e65a01f4006226aee9a4f6b4e95f9e8d)\n* ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java\n* ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql\n* ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql\n* ambari-views/examples/phone-list-view/src/main/resources/view.xml\n* ambari-server/src/test/java/org/apache/ambari/server/orm/entities/ViewEntityTest.java\n* ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog210Test.java\n* ambari-views/src/main/java/org/apache/ambari/view/ViewDefinition.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewVersionResourceProvider.java\n* ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql\n* ambari-server/src/test/java/org/apache/ambari/server/view/configuration/ViewConfigTest.java\n* ambari-server/src/main/resources/Ambari-DDL-Postgres-EMBEDDED-CREATE.sql\n* ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewEntity.java\n* ambari-views/src/main/resources/view.xsd\n* ambari-server/src/main/java/org/apache/ambari/server/view/configuration/ViewConfig.java\n\n", "issueSearchSentences": ["The view.xml xsd should allow view.xml to optionally contain <build> for the view build number.", "The build number should also be exposed through the REST API when introspecting a view or view instance.", "SUCCESS: Integrated in Ambari-trunk-Commit #2868 (See [https://builds.apache.org/job/Ambari-trunk-Commit/2868/])", "AMBARI-11814 - Views : Update view.xml xsd to allow for optional build-number (tbeerbower) (tbeerbower: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=5240ca45e65a01f4006226aee9a4f6b4e95f9e8d)", "Views : Update view.xml xsd to allow for optional build-number"], "issueSearchScores": [0.47952723503112793, 0.4426591098308563, 0.32147884368896484, 0.30174869298934937, 0.24077188968658447]}
{"aId": 51, "code": "private static boolean isSpecialNetworkAddress(String propertyValue) {\n    return propertyValue.contains(\"0.0.0.0\");\n  }", "comment": " This is a special address that signifies that the service is available on all network interfaces on a given machine.", "issueId": "AMBARI-7988", "issueStringList": ["Blueprints export fails to include Yarn Timeline service properties when defaults are used", "If a Blueprint is exported from a running cluster in Ambari, the following properties are not included in the exported Blueprint:", "yarn.timeline-service.address,", "yarn.timeline-service.webapp.address,", "yarn.timeline-service.webapp.https.address", "These properties are not included if the stack defaults are not overridden, which is likely a common case for the Yarn Timeline serivce.", "If these server properties are overridden with host name information prior to cluster start, then these properties do appear in the exported blueprint, with the relevant hostname information removed.", "The problem occurs when the defaults are used with this Yarn service.", "The service configuration defaults to \"0.0.0.0\", a special IP address used to indicate that a service listens on all network interfaces on a given machine.", "Since this address is slightly different than a normal host address, it must be handled differently by the Blueprint configuration processor.", "If the default \"0.0.0.0\" IP address is used for these defaults in the Yarn Timeline Service, the Blueprint configuration processor should allow these configuration properties to be included in the exported Blueprint.", "The current config processor will remove these properties, since no valid hostname is found during the export process.", "I'm working on a fix for this, and will be submitting a patch shortly.", "Uploading patches for trunk and 1.7.0.", "{color:green}+1 overall{color}.", "Here are the results of testing the latest attachment", "http://issues.apache.org/jira/secure/attachment/12677379/AMBARI-7988.patch", "against trunk revision .", "{color:green}+1 @author{color}.", "The patch does not contain any @author tags.", "{color:green}+1 tests included{color}.", "The patch appears to include 1 new or modified test files.", "{color:green}+1 javac{color}.", "The applied patch does not increase the total number of javac compiler warnings.", "{color:green}+1 release audit{color}.", "The applied patch does not increase the total number of release audit warnings.", "{color:green}+1 core tests{color}.", "The patch passed unit tests in ambari-server.", "Test results: https://builds.apache.org/job/Ambari-trunk-test-patch/373//testReport/", "Console output: https://builds.apache.org/job/Ambari-trunk-test-patch/373//console", "This message is automatically generated.", "Uploaded patch for review.", "SUCCESS: Integrated in Ambari-branch-1.7.0 #230 (See [https://builds.apache.org/job/Ambari-branch-1.7.0/230/])", "AMBARI-7988.", "Properly export topology related properties with a value of \"0.0.0.0\" to blueprints (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=14b916cdb723745b49ab993ca9101fd1d2272443)", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java", "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java", "SUCCESS: Integrated in Ambari-branch-1.7.0-docker #2 (See [https://builds.apache.org/job/Ambari-branch-1.7.0-docker/2/])", "AMBARI-7988.", "Properly export topology related properties with a value of \"0.0.0.0\" to blueprints (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=14b916cdb723745b49ab993ca9101fd1d2272443)", "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java", "SUCCESS: Integrated in Ambari-trunk-Commit #726 (See [https://builds.apache.org/job/Ambari-trunk-Commit/726/])", "AMBARI-7988.", "Ensure that topology related properties with the value of 0.0.0.0 are exported to blueprint (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f1720123b881b2377fef73bc4f3f7b922c50c64d)", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java", "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java", "SUCCESS: Integrated in Ambari-trunk-Commit-docker #27 (See [https://builds.apache.org/job/Ambari-trunk-Commit-docker/27/])", "AMBARI-7988.", "Ensure that topology related properties with the value of 0.0.0.0 are exported to blueprint (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f1720123b881b2377fef73bc4f3f7b922c50c64d)", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java", "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"], "SplitGT": [" This is a special address that signifies that the service is available on all network interfaces on a given machine."], "issueString": "Blueprints export fails to include Yarn Timeline service properties when defaults are used\nIf a Blueprint is exported from a running cluster in Ambari, the following properties are not included in the exported Blueprint:\n\nyarn.timeline-service.address,\nyarn.timeline-service.webapp.address,\nyarn.timeline-service.webapp.https.address\n\nThese properties are not included if the stack defaults are not overridden, which is likely a common case for the Yarn Timeline serivce.  \n\nIf these server properties are overridden with host name information prior to cluster start, then these properties do appear in the exported blueprint, with the relevant hostname information removed.\n\nThe problem occurs when the defaults are used with this Yarn service.  The service configuration defaults to \"0.0.0.0\", a special IP address used to indicate that a service listens on all network interfaces on a given machine.  Since this address is slightly different than a normal host address, it must be handled differently by the Blueprint configuration processor.  \n\nIf the default \"0.0.0.0\" IP address is used for these defaults in the Yarn Timeline Service, the Blueprint configuration processor should allow these configuration properties to be included in the exported Blueprint.  \n\nThe current config processor will remove these properties, since no valid hostname is found during the export process.  \n\nI'm working on a fix for this, and will be submitting a patch shortly.  \nUploading patches for trunk and 1.7.0.\n{color:green}+1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12677379/AMBARI-7988.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in ambari-server.\n\nTest results: https://builds.apache.org/job/Ambari-trunk-test-patch/373//testReport/\nConsole output: https://builds.apache.org/job/Ambari-trunk-test-patch/373//console\n\nThis message is automatically generated.\nUploaded patch for review.\nSUCCESS: Integrated in Ambari-branch-1.7.0 #230 (See [https://builds.apache.org/job/Ambari-branch-1.7.0/230/])\nAMBARI-7988.  Properly export topology related properties with a value of \"0.0.0.0\" to blueprints (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=14b916cdb723745b49ab993ca9101fd1d2272443)\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java\n* ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java\n\nSUCCESS: Integrated in Ambari-branch-1.7.0-docker #2 (See [https://builds.apache.org/job/Ambari-branch-1.7.0-docker/2/])\nAMBARI-7988.  Properly export topology related properties with a value of \"0.0.0.0\" to blueprints (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=14b916cdb723745b49ab993ca9101fd1d2272443)\n* ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java\n\nSUCCESS: Integrated in Ambari-trunk-Commit #726 (See [https://builds.apache.org/job/Ambari-trunk-Commit/726/])\nAMBARI-7988.  Ensure that topology related properties with the value of 0.0.0.0 are exported to blueprint (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f1720123b881b2377fef73bc4f3f7b922c50c64d)\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java\n* ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java\n\nSUCCESS: Integrated in Ambari-trunk-Commit-docker #27 (See [https://builds.apache.org/job/Ambari-trunk-Commit-docker/27/])\nAMBARI-7988.  Ensure that topology related properties with the value of 0.0.0.0 are exported to blueprint (jspeidel: http://git-wip-us.apache.org/repos/asf?p=ambari.git&a=commit&h=f1720123b881b2377fef73bc4f3f7b922c50c64d)\n* ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java\n* ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java\n\n", "issueSearchSentences": ["Since this address is slightly different than a normal host address, it must be handled differently by the Blueprint configuration processor.", "If these server properties are overridden with host name information prior to cluster start, then these properties do appear in the exported blueprint, with the relevant hostname information removed.", "The service configuration defaults to \"0.0.0.0\", a special IP address used to indicate that a service listens on all network interfaces on a given machine.", "yarn.timeline-service.address,", "AMBARI-7988."], "issueSearchScores": [0.5538883209228516, 0.4744023084640503, 0.4635186195373535, 0.40189260244369507, 0.40148892998695374]}
